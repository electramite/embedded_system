
shift_reg_164.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000012a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000708  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000630  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6d 00 	call	0xda	; 0xda <main>
  7a:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HC164Init>:
//Initialize HC164 System

void HC164Init()
{
   //Make the Data(DS), Shift clock (SH_CP) lines output
   HC164_DDR|=((1<<HC164_SH_CP_POS)|(1<<HC164_DS_POS));
  82:	87 b3       	in	r24, 0x17	; 23
  84:	83 60       	ori	r24, 0x03	; 3
  86:	87 bb       	out	0x17, r24	; 23
  88:	08 95       	ret

0000008a <Wait>:

*/

void Wait()
{
	for(uint8_t i=0;i<30;i++)
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	05 c0       	rjmp	.+10     	; 0x98 <Wait+0xe>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	e0 e0       	ldi	r30, 0x00	; 0
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <Wait+0x8>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	8e 31       	cpi	r24, 0x1E	; 30
  9a:	c8 f3       	brcs	.-14     	; 0x8e <Wait+0x4>
	{
		_delay_loop_2(0);
	}
}
  9c:	08 95       	ret

0000009e <HC164Pulse>:
//Sends a clock pulse on SH_CP line
void HC164Pulse()
{
   //Pulse the Shift Clock

   HC164_PORT|=(1<<HC164_SH_CP_POS);//HIGH
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	88 bb       	out	0x18, r24	; 24
   HC164_PORT&=(~(1<<HC164_SH_CP_POS));//LOW
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <HC164Write>:

}


void HC164Write(uint8_t data)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	d8 2f       	mov	r29, r24
   //Send each 8 bits serially

   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  b2:	c0 e0       	ldi	r28, 0x00	; 0
  b4:	0d c0       	rjmp	.+26     	; 0xd0 <HC164Write+0x24>
   {
      //Output the data on DS line according to the
      //Value of MSB
      if(data & 0b10000000)
  b6:	dd 23       	and	r29, r29
  b8:	24 f4       	brge	.+8      	; 0xc2 <HC164Write+0x16>
      {
         //MSB is 1 so output high

         HC164DataHigh();
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	88 bb       	out	0x18, r24	; 24
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <HC164Write+0x1c>
      }
      else
      {
         //MSB is 0 so output high
         HC164DataLow();
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	88 bb       	out	0x18, r24	; 24
      }

      HC164Pulse();  //Pulse the Clock line
  c8:	0e 94 4f 00 	call	0x9e	; 0x9e <HC164Pulse>
      data=data<<1;  //Now bring next bit at MSB position
  cc:	dd 0f       	add	r29, r29
void HC164Write(uint8_t data)
{
   //Send each 8 bits serially

   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  ce:	cf 5f       	subi	r28, 0xFF	; 255
  d0:	c8 30       	cpi	r28, 0x08	; 8
  d2:	88 f3       	brcs	.-30     	; 0xb6 <HC164Write+0xa>

      HC164Pulse();  //Pulse the Clock line
      data=data<<1;  //Now bring next bit at MSB position

   }
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:



void main()
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	28 97       	sbiw	r28, 0x08	; 8
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
   uint8_t led_pattern[8]={
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	e0 e6       	ldi	r30, 0x60	; 96
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	de 01       	movw	r26, r28
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	01 90       	ld	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	8a 95       	dec	r24
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x1e>
                        0b00000000,
                     };

   //Initialize HC164 system

   HC164Init();
 100:	0e 94 41 00 	call	0x82	; 0x82 <HC164Init>

   while(1)
   {
      for(uint8_t i=0;i<8;i++)
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	0c c0       	rjmp	.+24     	; 0x120 <main+0x46>
      {
         HC164Write(led_pattern[i]);   //Write the data to HC164
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e1 0f       	add	r30, r17
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	0e 94 56 00 	call	0xac	; 0xac <HC164Write>
         Wait();                 //Wait 
 11a:	0e 94 45 00 	call	0x8a	; 0x8a <Wait>

   HC164Init();

   while(1)
   {
      for(uint8_t i=0;i<8;i++)
 11e:	1f 5f       	subi	r17, 0xFF	; 255
 120:	18 30       	cpi	r17, 0x08	; 8
 122:	90 f3       	brcs	.-28     	; 0x108 <main+0x2e>
 124:	ef cf       	rjmp	.-34     	; 0x104 <main+0x2a>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
