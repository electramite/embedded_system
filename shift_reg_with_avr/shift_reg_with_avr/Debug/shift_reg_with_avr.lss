
shift_reg_with_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077e  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000641  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000351  00000000  00000000  00001037  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012d  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  7a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HC595Init>:
//Initialize HC595 System

void HC595Init()
{
   //Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
   HC595_DDR|=((1<<HC595_SH_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS_POS));
  82:	87 b3       	in	r24, 0x17	; 23
  84:	87 60       	ori	r24, 0x07	; 7
  86:	87 bb       	out	0x17, r24	; 23
  88:	08 95       	ret

0000008a <HC595Pulse>:
//Sends a clock pulse on SH_CP line
void HC595Pulse()
{
   //Pulse the Shift Clock

   HC595_PORT|=(1<<HC595_SH_CP_POS);//HIGH
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	88 bb       	out	0x18, r24	; 24

   HC595_PORT&=(~(1<<HC595_SH_CP_POS));//LOW
  90:	88 b3       	in	r24, 0x18	; 24
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	88 bb       	out	0x18, r24	; 24
  96:	08 95       	ret

00000098 <HC595Latch>:
//Sends a clock pulse on ST_CP line
void HC595Latch()
{
   //Pulse the Store Clock

   HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	88 bb       	out	0x18, r24	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	98 2f       	mov	r25, r24
  a2:	9a 95       	dec	r25
  a4:	f1 f7       	brne	.-4      	; 0xa2 <HC595Latch+0xa>
   _delay_loop_1(1);

   HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	9b 7f       	andi	r25, 0xFB	; 251
  aa:	98 bb       	out	0x18, r25	; 24
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <HC595Latch+0x14>
  b0:	08 95       	ret

000000b2 <HC595Write>:
   and then latched. The byte is then available on
   output line Q0 to Q7 of the HC595 IC.

*/
void HC595Write(uint8_t data)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	d8 2f       	mov	r29, r24
   //Send each 8 bits serially

   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	0d c0       	rjmp	.+26     	; 0xd6 <HC595Write+0x24>
   {
      //Output the data on DS line according to the
      //Value of MSB
      if(data & 0b10000000)
  bc:	dd 23       	and	r29, r29
  be:	24 f4       	brge	.+8      	; 0xc8 <HC595Write+0x16>
      {
         //MSB is 1 so output high

         HC595DataHigh();
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	03 c0       	rjmp	.+6      	; 0xce <HC595Write+0x1c>
      }
      else
      {
         //MSB is 0 so output high
         HC595DataLow();
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	88 bb       	out	0x18, r24	; 24
      }

      HC595Pulse();  //Pulse the Clock line
  ce:	0e 94 45 00 	call	0x8a	; 0x8a <HC595Pulse>
      data=data<<1;  //Now bring next bit at MSB position
  d2:	dd 0f       	add	r29, r29
void HC595Write(uint8_t data)
{
   //Send each 8 bits serially

   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  d4:	cf 5f       	subi	r28, 0xFF	; 255
  d6:	c8 30       	cpi	r28, 0x08	; 8
  d8:	88 f3       	brcs	.-30     	; 0xbc <HC595Write+0xa>

   }

   //Now all 8 bits have been transferred to shift register
   //Move them to output latch at one
   HC595Latch();
  da:	0e 94 4c 00 	call	0x98	; 0x98 <HC595Latch>
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <Wait>:

*/

void Wait()
{
   for(uint8_t i=0;i<30;i++)
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <Wait+0xe>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <Wait+0x8>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	8e 31       	cpi	r24, 0x1E	; 30
  f4:	c8 f3       	brcs	.-14     	; 0xe8 <Wait+0x4>
   {
      _delay_loop_2(0);
   }
}
  f6:	08 95       	ret

000000f8 <main>:

void main()
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	28 97       	sbiw	r28, 0x08	; 8
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
   uint8_t led_pattern[8]={
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	e0 e6       	ldi	r30, 0x60	; 96
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	de 01       	movw	r26, r28
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	01 90       	ld	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	8a 95       	dec	r24
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x1e>
                        0b00000000,
                     };

   //Initialize HC595 system

   HC595Init();
 11e:	0e 94 41 00 	call	0x82	; 0x82 <HC595Init>

   while(1)
   {
      for(uint8_t i=0;i<8;i++)
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	0c c0       	rjmp	.+24     	; 0x13e <main+0x46>
      {
         HC595Write(led_pattern[i]);   //Write the data to HC595
 126:	e1 e0       	ldi	r30, 0x01	; 1
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	e1 0f       	add	r30, r17
 130:	f1 1d       	adc	r31, r1
 132:	80 81       	ld	r24, Z
 134:	0e 94 59 00 	call	0xb2	; 0xb2 <HC595Write>
         Wait();                 //Wait 
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <Wait>

   HC595Init();

   while(1)
   {
      for(uint8_t i=0;i<8;i++)
 13c:	1f 5f       	subi	r17, 0xFF	; 255
 13e:	18 30       	cpi	r17, 0x08	; 8
 140:	90 f3       	brcs	.-28     	; 0x126 <main+0x2e>
 142:	ef cf       	rjmp	.-34     	; 0x122 <main+0x2a>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
