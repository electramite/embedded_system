
led_blink_with_interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076f  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006aa  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00001009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <in_init>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
void in_init(){
	cli();
  80:	f8 94       	cli
	DDRB = 0x01;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  86:	15 b8       	out	0x05, r1	; 5
	TCCR0A |= (1 << WGM01);
  88:	84 b5       	in	r24, 0x24	; 36
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= ((1 << CS02) | (1 << CS00)); // 
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	85 60       	ori	r24, 0x05	; 5
  92:	85 bd       	out	0x25, r24	; 37
	OCR0A = 255;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
  98:	ee e6       	ldi	r30, 0x6E	; 110
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
	sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void)
{	in_init();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <in_init>
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x4>

000000ac <__vector_14>:
	while(1);
}

ISR(TIMER0_COMPA_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	PORTB |= 0x01;
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	89 e6       	ldi	r24, 0x69	; 105
  c6:	98 e1       	ldi	r25, 0x18	; 24
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__vector_14+0x1c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <__vector_14+0x26>
  d2:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0x00;
  d4:	15 b8       	out	0x05, r1	; 5
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	89 e6       	ldi	r24, 0x69	; 105
  da:	98 e1       	ldi	r25, 0x18	; 24
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <__vector_14+0x30>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__vector_14+0x3a>
  e6:	00 00       	nop
	_delay_ms(1000);
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
