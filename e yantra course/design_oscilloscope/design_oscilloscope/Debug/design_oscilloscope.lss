
design_oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00002af6  00002b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030f  0080023a  0080023a  00002bc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001075a  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000289e  00000000  00000000  00013c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000408b  00000000  00000000  000164cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bd8  00000000  00000000  0001a558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036f5  00000000  00000000  0001c130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a03b  00000000  00000000  0001f825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  00029860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c4       	rjmp	.+2152   	; 0x86a <__ctors_end>
       2:	00 00       	nop
       4:	52 c4       	rjmp	.+2212   	; 0x8aa <__bad_interrupt>
       6:	00 00       	nop
       8:	dd c4       	rjmp	.+2490   	; 0x9c4 <__vector_2>
       a:	00 00       	nop
       c:	2b c5       	rjmp	.+2646   	; 0xa64 <__vector_3>
       e:	00 00       	nop
      10:	78 c5       	rjmp	.+2800   	; 0xb02 <__vector_4>
      12:	00 00       	nop
      14:	8f c5       	rjmp	.+2846   	; 0xb34 <__vector_5>
      16:	00 00       	nop
      18:	ad c5       	rjmp	.+2906   	; 0xb74 <__vector_6>
      1a:	00 00       	nop
      1c:	46 c4       	rjmp	.+2188   	; 0x8aa <__bad_interrupt>
      1e:	00 00       	nop
      20:	44 c4       	rjmp	.+2184   	; 0x8aa <__bad_interrupt>
      22:	00 00       	nop
      24:	42 c4       	rjmp	.+2180   	; 0x8aa <__bad_interrupt>
      26:	00 00       	nop
      28:	40 c4       	rjmp	.+2176   	; 0x8aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c4       	rjmp	.+2172   	; 0x8aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c4       	rjmp	.+2168   	; 0x8aa <__bad_interrupt>
      32:	00 00       	nop
      34:	3a c4       	rjmp	.+2164   	; 0x8aa <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c4       	rjmp	.+2160   	; 0x8aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	36 c4       	rjmp	.+2156   	; 0x8aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	34 c4       	rjmp	.+2152   	; 0x8aa <__bad_interrupt>
      42:	00 00       	nop
      44:	32 c4       	rjmp	.+2148   	; 0x8aa <__bad_interrupt>
      46:	00 00       	nop
      48:	30 c4       	rjmp	.+2144   	; 0x8aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2e c4       	rjmp	.+2140   	; 0x8aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	2c c4       	rjmp	.+2136   	; 0x8aa <__bad_interrupt>
      52:	00 00       	nop
      54:	2a c4       	rjmp	.+2132   	; 0x8aa <__bad_interrupt>
      56:	00 00       	nop
      58:	28 c4       	rjmp	.+2128   	; 0x8aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	26 c4       	rjmp	.+2124   	; 0x8aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c4       	rjmp	.+2120   	; 0x8aa <__bad_interrupt>
      62:	00 00       	nop
      64:	22 c4       	rjmp	.+2116   	; 0x8aa <__bad_interrupt>
      66:	00 00       	nop
      68:	20 c4       	rjmp	.+2112   	; 0x8aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1e c4       	rjmp	.+2108   	; 0x8aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	1c c4       	rjmp	.+2104   	; 0x8aa <__bad_interrupt>
      72:	00 00       	nop
      74:	1a c4       	rjmp	.+2100   	; 0x8aa <__bad_interrupt>
      76:	00 00       	nop
      78:	18 c4       	rjmp	.+2096   	; 0x8aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	16 c4       	rjmp	.+2092   	; 0x8aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	14 c4       	rjmp	.+2088   	; 0x8aa <__bad_interrupt>
      82:	00 00       	nop
      84:	12 c4       	rjmp	.+2084   	; 0x8aa <__bad_interrupt>
      86:	00 00       	nop
      88:	10 c4       	rjmp	.+2080   	; 0x8aa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0e c4       	rjmp	.+2076   	; 0x8aa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c c4       	rjmp	.+2072   	; 0x8aa <__bad_interrupt>
      92:	00 00       	nop
      94:	0a c4       	rjmp	.+2068   	; 0x8aa <__bad_interrupt>
      96:	00 00       	nop
      98:	08 c4       	rjmp	.+2064   	; 0x8aa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	06 c4       	rjmp	.+2060   	; 0x8aa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	04 c4       	rjmp	.+2056   	; 0x8aa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	02 c4       	rjmp	.+2052   	; 0x8aa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	00 c4       	rjmp	.+2048   	; 0x8aa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	fe c3       	rjmp	.+2044   	; 0x8aa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fc c3       	rjmp	.+2040   	; 0x8aa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fa c3       	rjmp	.+2036   	; 0x8aa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f8 c3       	rjmp	.+2032   	; 0x8aa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f6 c3       	rjmp	.+2028   	; 0x8aa <__bad_interrupt>
      be:	00 00       	nop
      c0:	f4 c3       	rjmp	.+2024   	; 0x8aa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f2 c3       	rjmp	.+2020   	; 0x8aa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f0 c3       	rjmp	.+2016   	; 0x8aa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ee c3       	rjmp	.+2012   	; 0x8aa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ec c3       	rjmp	.+2008   	; 0x8aa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ea c3       	rjmp	.+2004   	; 0x8aa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e8 c3       	rjmp	.+2000   	; 0x8aa <__bad_interrupt>
      da:	00 00       	nop
      dc:	e6 c3       	rjmp	.+1996   	; 0x8aa <__bad_interrupt>
      de:	00 00       	nop
      e0:	e4 c3       	rjmp	.+1992   	; 0x8aa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e5 0a       	sbc	r14, r21
      e6:	5e 0b       	sbc	r21, r30
      e8:	19 0b       	sbc	r17, r25
      ea:	62 0b       	sbc	r22, r18
      ec:	43 0b       	sbc	r20, r19
      ee:	51 0b       	sbc	r21, r17
      f0:	5b 0b       	sbc	r21, r27
      f2:	0f 11       	cpse	r16, r15
      f4:	15 11       	cpse	r17, r5
      f6:	2c 11       	cpse	r18, r12
      f8:	1d 11       	cpse	r17, r13
      fa:	2c 11       	cpse	r18, r12
      fc:	2c 11       	cpse	r18, r12
      fe:	2c 11       	cpse	r18, r12
     100:	2c 11       	cpse	r18, r12
     102:	2c 11       	cpse	r18, r12
     104:	2c 11       	cpse	r18, r12
     106:	2c 11       	cpse	r18, r12
     108:	2c 11       	cpse	r18, r12
     10a:	2c 11       	cpse	r18, r12
     10c:	2c 11       	cpse	r18, r12
     10e:	2c 11       	cpse	r18, r12
     110:	2c 11       	cpse	r18, r12
     112:	2c 11       	cpse	r18, r12
     114:	2c 11       	cpse	r18, r12
     116:	2c 11       	cpse	r18, r12
     118:	2c 11       	cpse	r18, r12
     11a:	2c 11       	cpse	r18, r12
     11c:	2c 11       	cpse	r18, r12
     11e:	2c 11       	cpse	r18, r12
     120:	2c 11       	cpse	r18, r12
     122:	2c 11       	cpse	r18, r12
     124:	2c 11       	cpse	r18, r12
     126:	2c 11       	cpse	r18, r12
     128:	2c 11       	cpse	r18, r12
     12a:	2c 11       	cpse	r18, r12
     12c:	2c 11       	cpse	r18, r12
     12e:	0a 11       	cpse	r16, r10
     130:	2c 11       	cpse	r18, r12
     132:	2c 11       	cpse	r18, r12
     134:	2c 11       	cpse	r18, r12
     136:	2c 11       	cpse	r18, r12
     138:	2c 11       	cpse	r18, r12
     13a:	2c 11       	cpse	r18, r12
     13c:	2c 11       	cpse	r18, r12
     13e:	2c 11       	cpse	r18, r12
     140:	00 11       	cpse	r16, r0
     142:	2c 11       	cpse	r18, r12
     144:	2c 11       	cpse	r18, r12
     146:	2c 11       	cpse	r18, r12
     148:	2c 11       	cpse	r18, r12
     14a:	2c 11       	cpse	r18, r12
     14c:	2c 11       	cpse	r18, r12
     14e:	2c 11       	cpse	r18, r12
     150:	2c 11       	cpse	r18, r12
     152:	2c 11       	cpse	r18, r12
     154:	2c 11       	cpse	r18, r12
     156:	22 11       	cpse	r18, r2
     158:	27 11       	cpse	r18, r7
     15a:	07 63       	ori	r16, 0x37	; 55
     15c:	42 36       	cpi	r20, 0x62	; 98
     15e:	b7 9b       	sbis	0x16, 7	; 22
     160:	d8 a7       	std	Y+40, r29	; 0x28
     162:	1a 39       	cpi	r17, 0x9A	; 154
     164:	68 56       	subi	r22, 0x68	; 104
     166:	18 ae       	std	Y+56, r1	; 0x38
     168:	ba ab       	std	Y+50, r27	; 0x32
     16a:	55 8c       	ldd	r5, Z+29	; 0x1d
     16c:	1d 3c       	cpi	r17, 0xCD	; 205
     16e:	b7 cc       	rjmp	.-1682   	; 0xfffffade <__eeprom_end+0xff7efade>
     170:	57 63       	ori	r21, 0x37	; 55
     172:	bd 6d       	ori	r27, 0xDD	; 221
     174:	ed fd       	.word	0xfded	; ????
     176:	75 3e       	cpi	r23, 0xE5	; 229
     178:	f6 17       	cp	r31, r22
     17a:	72 31       	cpi	r23, 0x12	; 18
     17c:	bf 00       	.word	0x00bf	; ????
     17e:	00 00       	nop
     180:	80 3f       	cpi	r24, 0xF0	; 240
     182:	08 00       	.word	0x0008	; ????
     184:	00 00       	nop
     186:	be 92       	st	-X, r11
     188:	24 49       	sbci	r18, 0x94	; 148
     18a:	12 3e       	cpi	r17, 0xE2	; 226
     18c:	ab aa       	std	Y+51, r10	; 0x33
     18e:	aa 2a       	or	r10, r26
     190:	be cd       	rjmp	.-1156   	; 0xfffffd0e <__eeprom_end+0xff7efd0e>
     192:	cc cc       	rjmp	.-1640   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
     194:	4c 3e       	cpi	r20, 0xEC	; 236
     196:	00 00       	nop
     198:	00 80       	ld	r0, Z
     19a:	be ab       	std	Y+54, r27	; 0x36
     19c:	aa aa       	std	Y+50, r10	; 0x32
     19e:	aa 3e       	cpi	r26, 0xEA	; 234
     1a0:	00 00       	nop
     1a2:	00 00       	nop
     1a4:	bf 00       	.word	0x00bf	; ????
     1a6:	00 00       	nop
     1a8:	80 3f       	cpi	r24, 0xF0	; 240
     1aa:	00 00       	nop
     1ac:	00 00       	nop
     1ae:	00 08       	sbc	r0, r0
     1b0:	41 78       	andi	r20, 0x81	; 129
     1b2:	d3 bb       	out	0x13, r29	; 19
     1b4:	43 87       	std	Z+11, r20	; 0x0b
     1b6:	d1 13       	cpse	r29, r17
     1b8:	3d 19       	sub	r19, r13
     1ba:	0e 3c       	cpi	r16, 0xCE	; 206
     1bc:	c3 bd       	out	0x23, r28	; 35
     1be:	42 82       	std	Z+2, r4	; 0x02
     1c0:	ad 2b       	or	r26, r29
     1c2:	3e 68       	ori	r19, 0x8E	; 142
     1c4:	ec 82       	std	Y+4, r14	; 0x04
     1c6:	76 be       	out	0x36, r7	; 54
     1c8:	d9 8f       	std	Y+25, r29	; 0x19
     1ca:	e1 a9       	ldd	r30, Z+49	; 0x31
     1cc:	3e 4c       	sbci	r19, 0xCE	; 206
     1ce:	80 ef       	ldi	r24, 0xF0	; 240
     1d0:	ff be       	out	0x3f, r15	; 63
     1d2:	01 c4       	rjmp	.+2050   	; 0x9d6 <__vector_2+0x12>
     1d4:	ff 7f       	andi	r31, 0xFF	; 255
     1d6:	3f 00       	.word	0x003f	; ????
     1d8:	00 00       	nop
	...

000001dc <__trampolines_end>:
     1dc:	22 00       	.word	0x0022	; ????
     1de:	25 00       	.word	0x0025	; ????
     1e0:	28 00       	.word	0x0028	; ????
     1e2:	2b 00       	.word	0x002b	; ????
     1e4:	2e 00       	.word	0x002e	; ????
     1e6:	31 00       	.word	0x0031	; ????
     1e8:	34 00       	.word	0x0034	; ????
     1ea:	02 01       	movw	r0, r4

000001ec <u8g_avr_ddr_P>:
     1ec:	21 00 24 00 27 00 2a 00 2d 00 30 00 33 00 01 01     !.$.'.*.-.0.3...

000001fc <u8g_dev_ks0108_128x64_init_seq>:
     1fc:	ff d0 ff e0 ff c1 ff d1 3f c0 ff 14 ff d2 3f c0     ........?.....?.
     20c:	ff 14 ff d0 ff fe                                   ......

00000212 <u8g_font_5x7>:
     212:	01 05 07 00 ff 06 01 15 02 27 20 ff ff 06 ff 06     .........' .....
     222:	ff 08 00 50 22 16 56 80 80 80 80 00 80 15 33 53     ...P".V.......3S
     232:	a0 a0 a0 02 55 55 50 f8 50 f8 50 02 55 55 70 a0     ....UUP.P.P.UUp.
     242:	70 28 70 02 46 56 80 90 20 40 90 10 02 45 55 40     p(p.FV.. @...EU@
     252:	a0 40 a0 50 25 13 53 80 80 80 12 26 56 40 80 80     .@.P%.S....&V@..
     262:	80 80 40 12 26 56 80 40 40 40 40 80 12 35 55 a0     ..@.&V.@@@@..5U.
     272:	40 e0 40 a0 02 55 55 20 20 f8 20 20 11 33 53 60     @.@..UU  .  .3S`
     282:	40 80 04 41 51 f0 12 22 52 c0 c0 03 44 54 10 20     @..AQ.."R...DT. 
     292:	40 80 12 36 56 40 a0 a0 a0 a0 40 12 36 56 40 c0     @..6V@....@.6V@.
     2a2:	40 40 40 e0 02 46 56 60 90 10 20 40 f0 02 46 56     @@@..FV`.. @..FV
     2b2:	f0 10 60 10 90 60 02 46 56 20 60 a0 f0 20 20 02     ..`..`.FV `..  .
     2c2:	46 56 f0 80 e0 10 90 60 02 46 56 60 80 e0 90 90     FV.....`.FV`....
     2d2:	60 02 46 56 f0 10 20 20 40 40 02 46 56 60 90 60     `.FV..  @@.FV`.`
     2e2:	90 90 60 02 46 56 60 90 90 70 10 60 12 25 55 c0     ..`.FV`..p.`.%U.
     2f2:	c0 00 c0 c0 01 36 56 60 60 00 60 40 80 12 35 55     .....6V``.`@..5U
     302:	20 40 80 40 20 03 43 53 f0 00 f0 12 35 55 80 40      @.@ .CS....5U.@
     312:	20 40 80 12 36 56 40 a0 20 40 00 40 02 46 56 60      @..6V@. @.@.FV`
     322:	90 b0 b0 80 60 02 46 56 60 90 90 f0 90 90 02 46     ....`.FV`......F
     332:	56 e0 90 e0 90 90 e0 02 46 56 60 90 80 80 90 60     V.......FV`....`
     342:	02 46 56 e0 90 90 90 90 e0 02 46 56 f0 80 e0 80     .FV.......FV....
     352:	80 f0 02 46 56 f0 80 e0 80 80 80 02 46 56 60 90     ...FV.......FV`.
     362:	80 b0 90 70 02 46 56 90 90 f0 90 90 90 12 36 56     ...p.FV.......6V
     372:	e0 40 40 40 40 e0 02 46 56 10 10 10 10 90 60 02     .@@@@..FV.....`.
     382:	46 56 90 a0 c0 c0 a0 90 02 46 56 80 80 80 80 80     FV.......FV.....
     392:	f0 02 46 56 90 f0 f0 90 90 90 02 46 56 90 d0 d0     ..FV.......FV...
     3a2:	b0 b0 90 02 46 56 60 90 90 90 90 60 02 46 56 e0     ....FV`....`.FV.
     3b2:	90 90 e0 80 80 01 47 57 60 90 90 90 d0 60 10 02     ......GW`....`..
     3c2:	46 56 e0 90 90 e0 a0 90 02 46 56 60 90 40 20 90     FV.......FV`.@ .
     3d2:	60 12 36 56 e0 40 40 40 40 40 02 46 56 90 90 90     `.6V.@@@@@.FV...
     3e2:	90 90 60 02 46 56 90 90 90 90 60 60 02 46 56 90     ..`.FV....``.FV.
     3f2:	90 90 f0 f0 90 02 46 56 90 90 60 60 90 90 12 36     ......FV..``...6
     402:	56 a0 a0 a0 40 40 40 02 46 56 f0 10 20 40 80 f0     V...@@@.FV.. @..
     412:	12 36 56 e0 80 80 80 80 e0 03 44 54 80 40 20 10     .6V.......DT.@ .
     422:	12 36 56 e0 20 20 20 20 e0 16 32 52 40 a0 02 41     .6V.    ..2R@..A
     432:	51 f0 16 22 52 80 40 02 44 54 70 90 b0 50 02 46     Q.."R.@.DTp..P.F
     442:	56 80 80 e0 90 90 e0 02 34 54 60 80 80 60 02 46     V.......4T`..`.F
     452:	56 10 10 70 90 90 70 02 44 54 60 b0 c0 60 02 46     V..p..p.DT`..`.F
     462:	56 20 50 40 e0 40 40 01 45 55 70 90 60 80 70 02     V P@.@@.EUp.`.p.
     472:	46 56 80 80 e0 90 90 90 12 36 56 40 00 c0 40 40     FV.......6V@..@@
     482:	e0 11 37 57 20 00 20 20 20 a0 40 02 46 56 80 80     ..7W .   .@.FV..
     492:	a0 c0 a0 90 12 36 56 c0 40 40 40 40 e0 02 44 54     .....6V.@@@@..DT
     4a2:	a0 f0 90 90 02 44 54 e0 90 90 90 02 44 54 60 90     .....DT.....DT`.
     4b2:	90 60 01 45 55 e0 90 90 e0 80 01 45 55 70 90 90     .`.EU......EUp..
     4c2:	70 10 02 44 54 e0 90 80 80 02 44 54 70 c0 30 e0     p..DT.....DTp.0.
     4d2:	02 46 56 40 40 e0 40 40 30 02 44 54 90 90 90 70     .FV@@.@@0.DT...p
     4e2:	12 34 54 a0 a0 a0 40 02 44 54 90 90 f0 f0 02 44     .4T...@.DT.....D
     4f2:	54 90 60 60 90 01 45 55 90 90 50 20 40 02 44 54     T.``..EU..P @.DT
     502:	f0 20 40 f0 12 36 56 20 40 c0 40 40 20 22 16 56     . @..6V @.@@ ".V
     512:	80 80 80 80 80 80 12 36 56 80 40 60 40 40 80 06     .......6V.@`@@..
     522:	42 52 50 a0 ff ff ff ff ff ff ff ff ff ff ff ff     BRP.............
     532:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     542:	ff ff ff ff ff 08 00 50 22 16 56 80 00 80 80 80     .......P".V.....
     552:	80 01 46 56 20 70 a0 a0 70 20 02 45 55 30 40 e0     ..FV p..p .EU0@.
     562:	40 b0 02 55 55 88 70 50 70 88 12 36 56 a0 a0 40     @..UU.pPp..6V..@
     572:	e0 40 40 22 15 55 80 80 00 80 80 11 37 57 60 80     .@@".U......7W`.
     582:	c0 a0 60 20 c0 17 31 51 a0 01 57 57 70 88 a8 c8     ..` ..1Q..WWp...
     592:	a8 88 70 05 33 53 60 a0 60 03 53 53 48 90 48 03     ..p.3S`.`.SSH.H.
     5a2:	42 52 f0 10 14 31 51 e0 01 57 57 70 88 e8 c8 c8     BR...1Q..WWp....
     5b2:	88 70 07 41 51 f0 15 33 53 40 a0 40 02 56 56 20     .p.AQ..3S@.@.VV 
     5c2:	20 f8 20 20 f8 14 24 54 c0 40 80 c0 14 24 54 c0      .  ..$T.@...$T.
     5d2:	c0 40 c0 16 22 52 40 80 01 45 55 90 90 90 e0 80     .@.."R@..EU.....
     5e2:	02 46 56 70 d0 d0 50 50 50 14 22 52 c0 c0 11 22     .FVp..PPP."R..."
     5f2:	52 40 80 14 34 54 40 c0 40 e0 05 33 53 40 a0 40     R@..4T@.@..3S@.@
     602:	03 53 53 90 48 90 01 47 57 80 80 80 90 30 70 10     .SS.H..GW....0p.
     612:	01 47 57 80 80 80 b0 10 20 30 01 47 57 c0 c0 40     .GW..... 0.GW..@
     622:	d0 30 70 10 12 36 56 40 00 40 80 a0 40 02 46 56     .0p..6V@.@..@.FV
     632:	60 90 90 f0 90 90 02 46 56 60 90 90 f0 90 90 02     `......FV`......
     642:	46 56 60 90 90 f0 90 90 02 46 56 60 90 90 f0 90     FV`......FV`....
     652:	90 02 46 56 90 60 90 f0 90 90 02 46 56 60 60 90     ..FV.`.....FV``.
     662:	f0 90 90 02 46 56 70 a0 b0 e0 a0 b0 01 47 57 60     ....FVp......GW`
     672:	90 80 80 90 60 40 02 46 56 f0 80 e0 80 80 f0 02     ....`@.FV.......
     682:	46 56 f0 80 e0 80 80 f0 02 46 56 f0 80 e0 80 80     FV.......FV.....
     692:	f0 02 46 56 f0 80 e0 80 80 f0 12 36 56 e0 40 40     ..FV.......6V.@@
     6a2:	40 40 e0 12 36 56 e0 40 40 40 40 e0 12 36 56 e0     @@..6V.@@@@..6V.
     6b2:	40 40 40 40 e0 12 36 56 e0 40 40 40 40 e0 02 46     @@@@..6V.@@@@..F
     6c2:	56 e0 50 d0 50 50 e0 02 46 56 b0 90 d0 b0 b0 90     V.P.PP..FV......
     6d2:	02 46 56 60 90 90 90 90 60 02 46 56 60 90 90 90     .FV`....`.FV`...
     6e2:	90 60 02 46 56 60 90 90 90 90 60 02 46 56 60 90     .`.FV`....`.FV`.
     6f2:	90 90 90 60 02 46 56 90 60 90 90 90 60 02 44 54     ...`.FV.`...`.DT
     702:	90 60 60 90 02 46 56 70 b0 b0 d0 d0 e0 02 46 56     .``..FVp......FV
     712:	90 90 90 90 90 60 02 46 56 90 90 90 90 90 60 02     .....`.FV.....`.
     722:	46 56 90 90 90 90 90 60 02 46 56 90 00 90 90 90     FV.....`.FV.....
     732:	60 12 36 56 a0 a0 a0 40 40 40 02 46 56 80 e0 90     `.6V...@@@.FV...
     742:	e0 80 80 02 46 56 60 90 a0 90 90 a0 02 46 56 40     ....FV`......FV@
     752:	20 70 90 b0 50 02 46 56 20 40 70 90 b0 50 02 46      p..P.FV @p..P.F
     762:	56 20 50 70 90 b0 50 02 46 56 50 a0 70 90 b0 50     V Pp..P.FVP.p..P
     772:	02 46 56 50 00 70 90 b0 50 02 46 56 60 60 70 90     .FVP.p..P.FV``p.
     782:	b0 50 02 44 54 70 b0 a0 70 11 35 55 60 80 80 60     .P.DTp..p.5U`..`
     792:	40 02 46 56 40 20 60 b0 c0 60 02 46 56 20 40 60     @.FV@ `..`.FV @`
     7a2:	b0 c0 60 02 46 56 40 a0 60 b0 c0 60 02 46 56 a0     ..`.FV@.`..`.FV.
     7b2:	00 60 b0 c0 60 12 36 56 80 40 c0 40 40 e0 12 36     .`..`.6V.@.@@..6
     7c2:	56 40 80 c0 40 40 e0 12 36 56 40 a0 c0 40 40 e0     V@..@@..6V@..@@.
     7d2:	12 36 56 a0 00 c0 40 40 e0 02 46 56 40 30 60 90     .6V...@@..FV@0`.
     7e2:	90 60 02 46 56 50 a0 e0 90 90 90 02 46 56 40 20     .`.FVP......FV@ 
     7f2:	60 90 90 60 02 46 56 20 40 60 90 90 60 02 46 56     `..`.FV @`..`.FV
     802:	60 00 60 90 90 60 02 46 56 50 a0 60 90 90 60 02     `.`..`.FVP.`..`.
     812:	46 56 50 00 60 90 90 60 02 45 55 60 00 f0 00 60     FVP.`..`.EU`...`
     822:	02 44 54 70 b0 d0 e0 02 46 56 40 20 90 90 90 70     .DTp....FV@ ...p
     832:	02 46 56 20 40 90 90 90 70 02 46 56 60 00 90 90     .FV @...p.FV`...
     842:	90 70 02 46 56 50 00 90 90 90 70 01 47 57 20 40     .p.FVP....p.GW @
     852:	90 90 50 20 40 01 46 56 80 e0 90 90 e0 80 01 47     ..P @.FV.......G
     862:	57 50 00 90 90 50 20 40                             WP...P @

0000086a <__ctors_end>:
     86a:	11 24       	eor	r1, r1
     86c:	1f be       	out	0x3f, r1	; 63
     86e:	cf ef       	ldi	r28, 0xFF	; 255
     870:	d1 e2       	ldi	r29, 0x21	; 33
     872:	de bf       	out	0x3e, r29	; 62
     874:	cd bf       	out	0x3d, r28	; 61
     876:	00 e0       	ldi	r16, 0x00	; 0
     878:	0c bf       	out	0x3c, r16	; 60

0000087a <__do_copy_data>:
     87a:	12 e0       	ldi	r17, 0x02	; 2
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b2 e0       	ldi	r27, 0x02	; 2
     880:	e6 ef       	ldi	r30, 0xF6	; 246
     882:	fa e2       	ldi	r31, 0x2A	; 42
     884:	00 e0       	ldi	r16, 0x00	; 0
     886:	0b bf       	out	0x3b, r16	; 59
     888:	02 c0       	rjmp	.+4      	; 0x88e <__do_copy_data+0x14>
     88a:	07 90       	elpm	r0, Z+
     88c:	0d 92       	st	X+, r0
     88e:	aa 33       	cpi	r26, 0x3A	; 58
     890:	b1 07       	cpc	r27, r17
     892:	d9 f7       	brne	.-10     	; 0x88a <__do_copy_data+0x10>

00000894 <__do_clear_bss>:
     894:	25 e0       	ldi	r18, 0x05	; 5
     896:	aa e3       	ldi	r26, 0x3A	; 58
     898:	b2 e0       	ldi	r27, 0x02	; 2
     89a:	01 c0       	rjmp	.+2      	; 0x89e <.do_clear_bss_start>

0000089c <.do_clear_bss_loop>:
     89c:	1d 92       	st	X+, r1

0000089e <.do_clear_bss_start>:
     89e:	a9 34       	cpi	r26, 0x49	; 73
     8a0:	b2 07       	cpc	r27, r18
     8a2:	e1 f7       	brne	.-8      	; 0x89c <.do_clear_bss_loop>
     8a4:	e0 d3       	rcall	.+1984   	; 0x1066 <main>
     8a6:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <_exit>

000008aa <__bad_interrupt>:
     8aa:	aa cb       	rjmp	.-2220   	; 0x0 <__vectors>

000008ac <adc_init>:
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	// In ADCSRA, enable ADC and pre-scalar = 64 (ADEN = 1, ADPS2 = 1, ADPS1 = 1, ADPS0 = 0)
	//				and clear ADC start conversion bit, auto trigger enable bit, interrupt flag bit and interrupt enable bit
	ADCSRA_reg	|= ( (1 << ADEN_bit) | (1 << ADPS2_bit) | (1 << ADPS1_bit) );
     8ac:	ea e7       	ldi	r30, 0x7A	; 122
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	86 68       	ori	r24, 0x86	; 134
     8b4:	80 83       	st	Z, r24
	ADCSRA_reg	&= ~( (1 << ADSC_bit) | (1 << ADATE_bit) | (1 << ADIF_bit) | (1 << ADIE_bit) | (1 << ADPS0_bit) );
     8b6:	80 81       	ld	r24, Z
     8b8:	86 78       	andi	r24, 0x86	; 134
     8ba:	80 83       	st	Z, r24
	
	// In ADCSRB, disable Analog Comparator Multiplexer, MUX5 bit and ADC Auto Trigger Source bits
	ADCSRB_reg	&= ~( (1 << ACME_bit) | (1 << MUX5_bit) | (1 << ADTS2_bit) | (1 << ADTS1_bit) | (1 << ADTS0_bit) );
     8bc:	eb e7       	ldi	r30, 0x7B	; 123
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	80 7b       	andi	r24, 0xB0	; 176
     8c4:	80 83       	st	Z, r24
	
	// In ADMUX, set the Reference Selection bits to use the AVCC as reference, and disable the channel selection bits MUX[4:0]
	ADMUX_reg	&= ~( (1 << REFS1_bit) | (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
     8c6:	ec e7       	ldi	r30, 0x7C	; 124
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	80 76       	andi	r24, 0x60	; 96
     8ce:	80 83       	st	Z, r24
	ADMUX_reg	|= (1 << REFS0_bit);
     8d0:	80 81       	ld	r24, Z
     8d2:	80 64       	ori	r24, 0x40	; 64
     8d4:	80 83       	st	Z, r24
	
	// In ADMUX, enable the ADLAR bit for 8-bit ADC result
	ADMUX_reg	|= (1 << ADLAR_bit);
     8d6:	80 81       	ld	r24, Z
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	80 83       	st	Z, r24
	
	// In ACSR, disable the Analog Comparator by writing 1 to ACD_bit
	ACSR_reg	|= ( 1 << ACD_bit );
     8dc:	80 b7       	in	r24, 0x30	; 48
     8de:	80 68       	ori	r24, 0x80	; 128
     8e0:	80 bf       	out	0x30, r24	; 48
     8e2:	08 95       	ret

000008e4 <select_adc_channel>:
void select_adc_channel( unsigned char channel_num )
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	// set the MUX[5:0] bits to select the ADC channel number
	if ( channel_num > 7 )
     8e4:	88 30       	cpi	r24, 0x08	; 8
     8e6:	28 f0       	brcs	.+10     	; 0x8f2 <select_adc_channel+0xe>
	{
		ADCSRB_reg |= ( 1 << MUX5_bit );					// set the MUX5 bit for selecting channel if its greater than 7
     8e8:	eb e7       	ldi	r30, 0x7B	; 123
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	90 81       	ld	r25, Z
     8ee:	98 60       	ori	r25, 0x08	; 8
     8f0:	90 83       	st	Z, r25
	}
	
	channel_num	= channel_num & 0x07;						// retain the last 3 bits from the variable for MUX[2:0] bits
     8f2:	87 70       	andi	r24, 0x07	; 7
	
	//ADMUX_reg	= ( ( ADMUX_reg & 0xF8 ) | channel_num );
	ADMUX_reg	= ( ADMUX_reg | channel_num );
     8f4:	ec e7       	ldi	r30, 0x7C	; 124
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	90 81       	ld	r25, Z
     8fa:	89 2b       	or	r24, r25
     8fc:	80 83       	st	Z, r24
     8fe:	08 95       	ret

00000900 <start_adc>:
void start_adc(void)
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	// set the ADSC bit in ADCSRA register
	ADCSRA_reg		|= ( 1 << ADSC_bit );
     900:	ea e7       	ldi	r30, 0x7A	; 122
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	80 64       	ori	r24, 0x40	; 64
     908:	80 83       	st	Z, r24
     90a:	08 95       	ret

0000090c <check_adc_conversion_complete>:
	/*
	<< TODO >> :
		1. Write an if-else statement with a condition which checks whether the ADC conversion for the selected channel is complete or not.
		2. If the ADC has completed its conversion for the selected channel return true, else return false
	*/
	if ( ( ADCSRA_reg & ( 1 << ADIF_bit ) ) == 0x10 )
     90c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     910:	84 ff       	sbrs	r24, 4
     912:	02 c0       	rjmp	.+4      	; 0x918 <check_adc_conversion_complete+0xc>
	{
		return true;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 95       	ret
	}
	else
	{
		return false;
     918:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     91a:	08 95       	ret

0000091c <read_adc_converted_data>:
	
	// read the appropriate ADC data register/s
	
	unsigned char adc_data_high_byte;
	
	adc_data_high_byte	= ADCH_reg;
     91c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	adc_8bit_data		= adc_data_high_byte;
	
	return adc_8bit_data;
}
     920:	08 95       	ret

00000922 <reset_adc_config_registers>:
 */
void reset_adc_config_registers(void)
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	ADCSRA_reg		|= ( 1 << ADIF_bit );					// clear ADIF bit by writing 1 to it
     922:	ea e7       	ldi	r30, 0x7A	; 122
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	80 61       	ori	r24, 0x10	; 16
     92a:	80 83       	st	Z, r24
	
	ADCSRB_reg		&= ~( 1 << MUX5_bit );					// clear the MUX5 bit
     92c:	eb e7       	ldi	r30, 0x7B	; 123
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	80 83       	st	Z, r24
	
	// clear the MUX[4:0] bits
	ADMUX_reg		&= ~( (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
     936:	ec e7       	ldi	r30, 0x7C	; 124
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	80 7e       	andi	r24, 0xE0	; 224
     93e:	80 83       	st	Z, r24
     940:	08 95       	ret

00000942 <convert_analog_channel_data>:
 * @param[in]  sensor_channel_number   ADC channel number of sensor
 *
 * @return     8-bit digital data from the input sensor ADC channel
 */
unsigned char convert_analog_channel_data( unsigned char sensor_channel_number )
{
     942:	cf 93       	push	r28
	
	unsigned char adc_8bit_data;
	
	select_adc_channel( sensor_channel_number );	
     944:	cf df       	rcall	.-98     	; 0x8e4 <select_adc_channel>
	start_adc();
     946:	dc df       	rcall	.-72     	; 0x900 <start_adc>

	while( !( check_adc_conversion_complete() ) );	// wait for ADC conversion to complete by polling ADIF bit in ADCSRA register
     948:	e1 df       	rcall	.-62     	; 0x90c <check_adc_conversion_complete>
     94a:	88 23       	and	r24, r24
     94c:	e9 f3       	breq	.-6      	; 0x948 <convert_analog_channel_data+0x6>
	adc_8bit_data = read_adc_converted_data();
     94e:	e6 df       	rcall	.-52     	; 0x91c <read_adc_converted_data>
     950:	c8 2f       	mov	r28, r24
     952:	e7 df       	rcall	.-50     	; 0x922 <reset_adc_config_registers>
	reset_adc_config_registers();
     954:	8c 2f       	mov	r24, r28
     956:	cf 91       	pop	r28
	
	return adc_8bit_data;
}
     958:	08 95       	ret

0000095a <dso_switches_input_channel_config>:
     95a:	8a b1       	in	r24, 0x0a	; 10
     95c:	81 7f       	andi	r24, 0xF1	; 241
{
	// << NOTE >> : Use Masking and Shift Operators here
	// << TODO >> : Complete the function as expected in the comment above.
	
	// Make **ONLY** three switches (DIV+, DIV- and HOLD) connected to div_hold_switch_port (PORTD) as input
	div_hold_switch_ddr_reg &= ~((1 << div_add_sw_pin) | (1 << div_sub_sw_pin) | (1 << hold_sw_pin));
     95e:	8a b9       	out	0x0a, r24	; 10
	
	// Activate pull-up for **ONLY** for three switches (DIV+, DIV- and HOLD) connected to div_hold_switch_port (PORTD)
	div_hold_switch_port_reg |= ((1 << div_add_sw_pin) | (1 << div_sub_sw_pin) | (1 << hold_sw_pin));
     960:	8b b1       	in	r24, 0x0b	; 11
     962:	8e 60       	ori	r24, 0x0E	; 14
     964:	8b b9       	out	0x0b, r24	; 11

	// Make **ONLY** two switches (UP and DOWN) connected to up_down_switch_port (PORTE) as input
	up_down_switch_ddr_reg &= ~((1 << up_sw_pin) | (1 << down_sw_pin));
     966:	8d b1       	in	r24, 0x0d	; 13
     968:	8f 7c       	andi	r24, 0xCF	; 207
     96a:	8d b9       	out	0x0d, r24	; 13

	// Activate pull-up for **ONLY** for two switches (UP and DOWN) connected to up_down_switch_port (PORTE)
	up_down_switch_port_reg |= ((1 << up_sw_pin) | (1 << down_sw_pin));
     96c:	8e b1       	in	r24, 0x0e	; 14
     96e:	80 63       	ori	r24, 0x30	; 48
     970:	8e b9       	out	0x0e, r24	; 14

	// Make **ONLY** the dso_input_channel pin connected to dso_input_channel_port (PORTK) as input
	dso_input_channel_ddr_reg &= ~(1 << dso_input_channel_pin);
     972:	e7 e0       	ldi	r30, 0x07	; 7
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	80 81       	ld	r24, Z
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	80 83       	st	Z, r24

	// Deactivate pull-up for **ONLY** dso_input_channel pin connected to dso_input_channel_port (PORTK)
	dso_input_channel_port_reg &= ~(1 << dso_input_channel_pin);
     97c:	e8 e0       	ldi	r30, 0x08	; 8
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	80 81       	ld	r24, Z
     982:	8e 7f       	andi	r24, 0xFE	; 254
     984:	80 83       	st	Z, r24
     986:	08 95       	ret

00000988 <dso_switches_interrupt_config>:
{
	// << NOTE >> : Use Masking and Shift Operators here
	// << TODO >> : Complete the function as expected in the comment above

	// All interrupts have to be disabled before configuring interrupts
	cli();	// Disable interrupts globally
     988:	f8 94       	cli

	// Configure falling edge detection on div_add_sw_pin_int (INT1) and div_sub_sw_pin_int (INT2)
	EICRA_reg |= ((1 << div_add_sw_ISC_bit1) | (1 << div_sub_sw_ISC_bit1));
     98a:	e9 e6       	ldi	r30, 0x69	; 105
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	88 62       	ori	r24, 0x28	; 40
     992:	80 83       	st	Z, r24
	EICRA_reg &= ~((1 << div_add_sw_ISC_bit0) | (1 << div_sub_sw_ISC_bit0));
     994:	80 81       	ld	r24, Z
     996:	8b 7e       	andi	r24, 0xEB	; 235
     998:	80 83       	st	Z, r24

	// Configure low level detection on hold_sw_pin_int (INT3)
	EICRA_reg &= ~((1 << hold_sw_ISC_bit1) | (1 << hold_sw_ISC_bit0));
     99a:	80 81       	ld	r24, Z
     99c:	8f 73       	andi	r24, 0x3F	; 63
     99e:	80 83       	st	Z, r24

	// Configure falling edge detection on up_sw_pin_int (INT4) and down_sw_pin_int (INT5)
	EICRB_reg |= ((1 << up_sw_ISC_bit1) | (1 << down_sw_ISC_bit1));
     9a0:	ea e6       	ldi	r30, 0x6A	; 106
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	8a 60       	ori	r24, 0x0A	; 10
     9a8:	80 83       	st	Z, r24
	EICRB_reg &= ~((1 << up_sw_ISC_bit0) | (1 << down_sw_ISC_bit0));
     9aa:	80 81       	ld	r24, Z
     9ac:	8a 7f       	andi	r24, 0xFA	; 250
     9ae:	80 83       	st	Z, r24

	// Enable INT1, INT2, INT3, INT4 and INT5 interrupts
	EIMSK_reg |= ((1 << down_sw_pin_int) | (1 << up_sw_pin_int) | (1 << hold_sw_pin_int) | (1 << div_sub_sw_pin_int) | (1 << div_add_sw_pin_int));
     9b0:	8d b3       	in	r24, 0x1d	; 29
     9b2:	8e 63       	ori	r24, 0x3E	; 62
     9b4:	8d bb       	out	0x1d, r24	; 29

	sei();	// Enable interrupts gloabally
     9b6:	78 94       	sei
     9b8:	08 95       	ret

000009ba <dso_init>:
 */
void dso_init(void)
{
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	dso_switches_input_channel_config();
     9ba:	cf df       	rcall	.-98     	; 0x95a <dso_switches_input_channel_config>
	dso_switches_interrupt_config();
     9bc:	e5 df       	rcall	.-54     	; 0x988 <dso_switches_interrupt_config>
	adc_init();
     9be:	76 df       	rcall	.-276    	; 0x8ac <adc_init>
     9c0:	5c c3       	rjmp	.+1720   	; 0x107a <glcd_setup>

	// maps the GLCD connections with Arduino Mega pins to the ATmega2560 pins
	// the function is defined in "u8glib.c" file
	glcd_setup();
     9c2:	08 95       	ret

000009c4 <__vector_2>:
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0

/**
 * @brief      Interrupt Service Routine for div_add_sw_pin_int (INT1)
 */
ISR(div_add_sw_pin_int_vect)  
{
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	0b b6       	in	r0, 0x3b	; 59
     9d0:	0f 92       	push	r0
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
	ms_per_div = ms_per_div + 0.5; // increment ms_per_div by 0.5, each time DIV+ is pressed
     9ea:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <ms_per_div>
     9ee:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <ms_per_div+0x1>
     9f2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ms_per_div+0x2>
     9f6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <ms_per_div+0x3>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	5f e3       	ldi	r21, 0x3F	; 63
     a02:	0e 94 c2 11 	call	0x2384	; 0x2384 <__addsf3>
     a06:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <ms_per_div>
     a0a:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <ms_per_div+0x1>
     a0e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <ms_per_div+0x2>
     a12:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <ms_per_div+0x3>
	if(ms_per_div > 2.0) ms_per_div=0.5; // reset condition for ms_per_div > 2.0
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	50 e4       	ldi	r21, 0x40	; 64
     a1e:	0e 94 75 13 	call	0x26ea	; 0x26ea <__gesf2>
     a22:	18 16       	cp	r1, r24
     a24:	64 f4       	brge	.+24     	; 0xa3e <__vector_2+0x7a>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	bf e3       	ldi	r27, 0x3F	; 63
     a2e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ms_per_div>
     a32:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <ms_per_div+0x1>
     a36:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <ms_per_div+0x2>
     a3a:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <ms_per_div+0x3>
}
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0b be       	out	0x3b, r0	; 59
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_3>:

/**
 * @brief      Interrupt Service Routine for div_sub_sw_pin_int (INT2)
 */
ISR(div_sub_sw_pin_int_vect)
{
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	0b b6       	in	r0, 0x3b	; 59
     a70:	0f 92       	push	r0
     a72:	2f 93       	push	r18
     a74:	3f 93       	push	r19
     a76:	4f 93       	push	r20
     a78:	5f 93       	push	r21
     a7a:	6f 93       	push	r22
     a7c:	7f 93       	push	r23
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
	ms_per_div -= 0.5; // Decrement ms_per_div by 0.5, each time DIV- is pressed
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <ms_per_div>
     a96:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <ms_per_div+0x1>
     a9a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ms_per_div+0x2>
     a9e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <ms_per_div+0x3>
     aa2:	0e 94 c1 11 	call	0x2382	; 0x2382 <__subsf3>
     aa6:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <ms_per_div>
     aaa:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <ms_per_div+0x1>
     aae:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <ms_per_div+0x2>
     ab2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <ms_per_div+0x3>
	if(ms_per_div <= 0) ms_per_div = 0.5;  // reset condition for ms_per_div < 0
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	a9 01       	movw	r20, r18
     abc:	0e 94 26 12 	call	0x244c	; 0x244c <__cmpsf2>
     ac0:	18 16       	cp	r1, r24
     ac2:	64 f0       	brlt	.+24     	; 0xadc <__vector_3+0x78>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	bf e3       	ldi	r27, 0x3F	; 63
     acc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ms_per_div>
     ad0:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <ms_per_div+0x1>
     ad4:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <ms_per_div+0x2>
     ad8:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <ms_per_div+0x3>
}
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	bf 91       	pop	r27
     ae2:	af 91       	pop	r26
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	7f 91       	pop	r23
     aea:	6f 91       	pop	r22
     aec:	5f 91       	pop	r21
     aee:	4f 91       	pop	r20
     af0:	3f 91       	pop	r19
     af2:	2f 91       	pop	r18
     af4:	0f 90       	pop	r0
     af6:	0b be       	out	0x3b, r0	; 59
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <__vector_4>:

/**
 * @brief      Interrupt Service Routine for hold_sw_pin_int (INT3)
 */
ISR(hold_sw_pin_int_vect)
{
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
	hold_flag = 1; // setting the hold flag when hold switch is pressed
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <hold_flag+0x1>
     b18:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <hold_flag>
	while (div_hold_switch_pin_reg & (1 << hold_sw_pin) == 0); // wait till the switch being released 
     b1c:	89 b1       	in	r24, 0x09	; 9
	hold_flag = 0; // resetting the hold flag 
     b1e:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <hold_flag+0x1>
     b22:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <hold_flag>
}
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <__vector_5>:

/**
 * @brief      Interrupt Service Routine for up_sw_pin_int (INT4)
 */
ISR(up_sw_pin_int_vect)
{
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2f 93       	push	r18
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
	vert_disp--; // decreasing vert_disp by 1 step on every press of UP switch
     b44:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__data_end>
     b48:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <__data_end+0x1>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <__data_end+0x1>
     b52:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <__data_end>
	if(vert_disp < -31) vert_disp =0;  // resetting the vert_disp to 0 when waveform moves out of the display 
     b56:	81 3e       	cpi	r24, 0xE1	; 225
     b58:	9f 4f       	sbci	r25, 0xFF	; 255
     b5a:	24 f4       	brge	.+8      	; 0xb64 <__vector_5+0x30>
     b5c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <__data_end+0x1>
     b60:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <__data_end>
}
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	2f 91       	pop	r18
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <__vector_6>:

/**
 * @brief      Interrupt Service Routine for down_sw_pin_int (INT5)
 */
ISR(down_sw_pin_int_vect)
{
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
	vert_disp++;// increasing vert_disp by 1 step on every press of DOWN switch
     b82:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__data_end>
     b86:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <__data_end+0x1>
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <__data_end+0x1>
     b90:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <__data_end>
	if(vert_disp > 31) vert_disp =0;  // resetting the vert_disp to 0 when waveform moves out of the display  
     b94:	80 97       	sbiw	r24, 0x20	; 32
     b96:	24 f0       	brlt	.+8      	; 0xba0 <__vector_6+0x2c>
     b98:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <__data_end+0x1>
     b9c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <__data_end>
}
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <dso_start_screen>:
/**
 * @brief      Display the Start Screen of DSO
 */
void dso_start_screen(void)
{
	setFont(u8g_font_5x7);
     bae:	82 e1       	ldi	r24, 0x12	; 18
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	bc d3       	rcall	.+1912   	; 0x132c <setFont>
	firstPage();
     bb4:	c0 d3       	rcall	.+1920   	; 0x1336 <firstPage>
     bb6:	2f e3       	ldi	r18, 0x3F	; 63
	// << NOTE >> : You can add your creativity over here!
	do
	{	
		drawFrame(0,0,128,63);
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	94 d3       	rcall	.+1832   	; 0x12e8 <drawFrame>
     bc0:	46 e1       	ldi	r20, 0x16	; 22
		drawStr( 32, 32, "DSO START" );
     bc2:	52 e0       	ldi	r21, 0x02	; 2
     bc4:	60 e2       	ldi	r22, 0x20	; 32
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	aa d3       	rcall	.+1876   	; 0x131e <drawStr>
		
		
	}
	while( nextPage() ); 
     bca:	b9 d3       	rcall	.+1906   	; 0x133e <nextPage>
     bcc:	81 11       	cpse	r24, r1
     bce:	f3 cf       	rjmp	.-26     	; 0xbb6 <dso_start_screen+0x8>
     bd0:	08 95       	ret

00000bd2 <sample_input_wave>:

}
     bd2:	cf 92       	push	r12

/**
 * @brief      Sample the waveform from the DSO input channel and store the data in a buffer array.
 */
void sample_input_wave(void)
{
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
	// << TODO >> : Complete the logic in function as expected in the comment above.
	for (int i = 0; i < 192; i++)
     bde:	c0 e0       	ldi	r28, 0x00	; 0
     be0:	d0 e0       	ldi	r29, 0x00	; 0
     be2:	56 c0       	rjmp	.+172    	; 0xc90 <sample_input_wave+0xbe>
	{
		buffer_input_data[i] = convert_analog_channel_data(dso_input_channel_pin);// storing the data from input waveform into buffer
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	ad de       	rcall	.-678    	; 0x942 <convert_analog_channel_data>
     be8:	fe 01       	movw	r30, r28
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	e0 57       	subi	r30, 0x70	; 112
     bf0:	fc 4f       	sbci	r31, 0xFC	; 252
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
		  if(ms_per_div == 0.5) _delay_us(60);
     bf8:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <ms_per_div>
     bfc:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <ms_per_div+0x1>
     c00:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <ms_per_div+0x2>
     c04:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <ms_per_div+0x3>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	5f e3       	ldi	r21, 0x3F	; 63
     c10:	c7 01       	movw	r24, r14
     c12:	b6 01       	movw	r22, r12
     c14:	0e 94 26 12 	call	0x244c	; 0x244c <__cmpsf2>
     c18:	81 11       	cpse	r24, r1
     c1a:	07 c0       	rjmp	.+14     	; 0xc2a <sample_input_wave+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c1c:	8f ee       	ldi	r24, 0xEF	; 239
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <sample_input_wave+0x4e>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <sample_input_wave+0x54>
     c26:	00 00       	nop
     c28:	32 c0       	rjmp	.+100    	; 0xc8e <sample_input_wave+0xbc>
		  else if(ms_per_div == 1.0) _delay_us(110);
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e8       	ldi	r20, 0x80	; 128
     c30:	5f e3       	ldi	r21, 0x3F	; 63
     c32:	c7 01       	movw	r24, r14
     c34:	b6 01       	movw	r22, r12
     c36:	0e 94 26 12 	call	0x244c	; 0x244c <__cmpsf2>
     c3a:	81 11       	cpse	r24, r1
     c3c:	07 c0       	rjmp	.+14     	; 0xc4c <sample_input_wave+0x7a>
     c3e:	87 eb       	ldi	r24, 0xB7	; 183
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <sample_input_wave+0x70>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <sample_input_wave+0x76>
     c48:	00 00       	nop
     c4a:	21 c0       	rjmp	.+66     	; 0xc8e <sample_input_wave+0xbc>
		  else if(ms_per_div == 1.5) _delay_us(160);
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 ec       	ldi	r20, 0xC0	; 192
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	c7 01       	movw	r24, r14
     c56:	b6 01       	movw	r22, r12
     c58:	0e 94 26 12 	call	0x244c	; 0x244c <__cmpsf2>
     c5c:	81 11       	cpse	r24, r1
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <sample_input_wave+0x9c>
     c60:	8f e7       	ldi	r24, 0x7F	; 127
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <sample_input_wave+0x92>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <sample_input_wave+0x98>
     c6a:	00 00       	nop
     c6c:	10 c0       	rjmp	.+32     	; 0xc8e <sample_input_wave+0xbc>
		  else if(ms_per_div == 2) _delay_us(210);      
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e4       	ldi	r21, 0x40	; 64
     c76:	c7 01       	movw	r24, r14
     c78:	b6 01       	movw	r22, r12
     c7a:	0e 94 26 12 	call	0x244c	; 0x244c <__cmpsf2>
     c7e:	81 11       	cpse	r24, r1
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <sample_input_wave+0xbc>
     c82:	87 e4       	ldi	r24, 0x47	; 71
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <sample_input_wave+0xb4>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <sample_input_wave+0xba>
     c8c:	00 00       	nop
 * @brief      Sample the waveform from the DSO input channel and store the data in a buffer array.
 */
void sample_input_wave(void)
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	for (int i = 0; i < 192; i++)
     c8e:	21 96       	adiw	r28, 0x01	; 1
     c90:	c0 3c       	cpi	r28, 0xC0	; 192
     c92:	d1 05       	cpc	r29, r1
     c94:	0c f4       	brge	.+2      	; 0xc98 <sample_input_wave+0xc6>
     c96:	a6 cf       	rjmp	.-180    	; 0xbe4 <sample_input_wave+0x12>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//i was using above commented code to determine the sampling frequency, but at 0.5 ms_per_div number peaks is more than the number peaks shown in the sample video even i added 0 delay
// at 0.5 ms_per_div still the issue remains the same. 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	08 95       	ret

00000ca6 <calc_vpp_vmid>:
 * @brief      From the buffer data of input waveform, calculate the values in buffer array which is max. (V_max), min. (V_min),
 * 			   half (V_mid) of the amplitude and the peak-to-peak voltage (V_pp) in Volts of the given waveform
 */
void calc_vpp_vmid(void)
{
	V_max = 0, V_min=0;
     ca6:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <V_max+0x1>
     caa:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <V_max>
     cae:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <V_min+0x1>
     cb2:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <V_min>
	for(int x=0; x<192; x++){
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	1f c0       	rjmp	.+62     	; 0xcfa <calc_vpp_vmid+0x54>
		if(buffer_input_data[x] <= V_min) V_min = buffer_input_data[x];
     cbc:	fc 01       	movw	r30, r24
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	e0 57       	subi	r30, 0x70	; 112
     cc4:	fc 4f       	sbci	r31, 0xFC	; 252
     cc6:	20 81       	ld	r18, Z
     cc8:	31 81       	ldd	r19, Z+1	; 0x01
     cca:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <V_min>
     cce:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <V_min+0x1>
     cd2:	42 17       	cp	r20, r18
     cd4:	53 07       	cpc	r21, r19
     cd6:	2c f0       	brlt	.+10     	; 0xce2 <calc_vpp_vmid+0x3c>
     cd8:	30 93 c5 02 	sts	0x02C5, r19	; 0x8002c5 <V_min+0x1>
     cdc:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <V_min>
     ce0:	0b c0       	rjmp	.+22     	; 0xcf8 <calc_vpp_vmid+0x52>
		else if(buffer_input_data[x] >= V_max) V_max = buffer_input_data[x];
     ce2:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <V_max>
     ce6:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <V_max+0x1>
     cea:	24 17       	cp	r18, r20
     cec:	35 07       	cpc	r19, r21
     cee:	24 f0       	brlt	.+8      	; 0xcf8 <calc_vpp_vmid+0x52>
     cf0:	30 93 8b 03 	sts	0x038B, r19	; 0x80038b <V_max+0x1>
     cf4:	20 93 8a 03 	sts	0x038A, r18	; 0x80038a <V_max>
 * 			   half (V_mid) of the amplitude and the peak-to-peak voltage (V_pp) in Volts of the given waveform
 */
void calc_vpp_vmid(void)
{
	V_max = 0, V_min=0;
	for(int x=0; x<192; x++){
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	80 3c       	cpi	r24, 0xC0	; 192
     cfc:	91 05       	cpc	r25, r1
     cfe:	f4 f2       	brlt	.-68     	; 0xcbc <calc_vpp_vmid+0x16>
		if(buffer_input_data[x] <= V_min) V_min = buffer_input_data[x];
		else if(buffer_input_data[x] >= V_max) V_max = buffer_input_data[x];
	}
	V_mid = ((V_max+V_min)/2);// calculating V_mid : value in buffer array that is half of the amplitude
     d00:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <V_max>
     d04:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <V_max+0x1>
     d08:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <V_min>
     d0c:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <V_min+0x1>
     d10:	cb 01       	movw	r24, r22
     d12:	82 0f       	add	r24, r18
     d14:	93 1f       	adc	r25, r19
     d16:	99 23       	and	r25, r25
     d18:	0c f4       	brge	.+2      	; 0xd1c <calc_vpp_vmid+0x76>
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	95 95       	asr	r25
     d1e:	87 95       	ror	r24
     d20:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <V_mid+0x1>
     d24:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <V_mid>
	V_pp = (V_max-V_min)*5.0/255.0;	// calculating V_pp : value in Volts for the peak-to-peak amplitude of the input waveform
     d28:	62 1b       	sub	r22, r18
     d2a:	73 0b       	sbc	r23, r19
     d2c:	07 2e       	mov	r0, r23
     d2e:	00 0c       	add	r0, r0
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 94 c5 12 	call	0x258a	; 0x258a <__floatsisf>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 ea       	ldi	r20, 0xA0	; 160
     d3e:	50 e4       	ldi	r21, 0x40	; 64
     d40:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	53 e4       	ldi	r21, 0x43	; 67
     d4c:	0e 94 2a 12 	call	0x2454	; 0x2454 <__divsf3>
     d50:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <V_pp>
     d54:	70 93 87 03 	sts	0x0387, r23	; 0x800387 <V_pp+0x1>
     d58:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <V_pp+0x2>
     d5c:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <V_pp+0x3>
     d60:	08 95       	ret

00000d62 <calc_start_end_wave_idx>:
 *          |		|______|		|
 */
void calc_start_end_wave_idx(void)
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	  for(int i=0;i<192;i++)
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	21 c0       	rjmp	.+66     	; 0xdaa <calc_start_end_wave_idx+0x48>
	  {
		  if(buffer_input_data[i]<V_mid&&buffer_input_data[i+1]>=V_mid)
     d68:	fc 01       	movw	r30, r24
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e0 57       	subi	r30, 0x70	; 112
     d70:	fc 4f       	sbci	r31, 0xFC	; 252
     d72:	40 81       	ld	r20, Z
     d74:	51 81       	ldd	r21, Z+1	; 0x01
     d76:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <V_mid>
     d7a:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <V_mid+0x1>
     d7e:	42 17       	cp	r20, r18
     d80:	53 07       	cpc	r21, r19
     d82:	94 f4       	brge	.+36     	; 0xda8 <calc_start_end_wave_idx+0x46>
     d84:	ac 01       	movw	r20, r24
     d86:	4f 5f       	subi	r20, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	fa 01       	movw	r30, r20
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	e0 57       	subi	r30, 0x70	; 112
     d92:	fc 4f       	sbci	r31, 0xFC	; 252
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	62 17       	cp	r22, r18
     d9a:	73 07       	cpc	r23, r19
     d9c:	2c f0       	brlt	.+10     	; 0xda8 <calc_start_end_wave_idx+0x46>
		  {
			  start_wave_idx=i+1;  // storing X coordinate of the point as start_wave_idx where waveform cuts the center horizontal line(V_mid) for the first time while moving up 
     d9e:	50 93 bf 02 	sts	0x02BF, r21	; 0x8002bf <start_wave_idx+0x1>
     da2:	40 93 be 02 	sts	0x02BE, r20	; 0x8002be <start_wave_idx>
			  break;
     da6:	04 c0       	rjmp	.+8      	; 0xdb0 <calc_start_end_wave_idx+0x4e>
 *          |		|______|		|
 */
void calc_start_end_wave_idx(void)
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	  for(int i=0;i<192;i++)
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	80 3c       	cpi	r24, 0xC0	; 192
     dac:	91 05       	cpc	r25, r1
     dae:	e4 f2       	brlt	.-72     	; 0xd68 <calc_start_end_wave_idx+0x6>
		  {
			  start_wave_idx=i+1;  // storing X coordinate of the point as start_wave_idx where waveform cuts the center horizontal line(V_mid) for the first time while moving up 
			  break;
		  }
	  }
	  for(int i=start_wave_idx+1;i<192;i++)
     db0:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <start_wave_idx>
     db4:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <start_wave_idx+0x1>
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	1f c0       	rjmp	.+62     	; 0xdfa <calc_start_end_wave_idx+0x98>
	  {
		  if(buffer_input_data[i]<V_mid&&buffer_input_data[i+1]>=V_mid)
     dbc:	fc 01       	movw	r30, r24
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	e0 57       	subi	r30, 0x70	; 112
     dc4:	fc 4f       	sbci	r31, 0xFC	; 252
     dc6:	40 81       	ld	r20, Z
     dc8:	51 81       	ldd	r21, Z+1	; 0x01
     dca:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <V_mid>
     dce:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <V_mid+0x1>
     dd2:	42 17       	cp	r20, r18
     dd4:	53 07       	cpc	r21, r19
     dd6:	84 f4       	brge	.+32     	; 0xdf8 <calc_start_end_wave_idx+0x96>
     dd8:	fc 01       	movw	r30, r24
     dda:	31 96       	adiw	r30, 0x01	; 1
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	e0 57       	subi	r30, 0x70	; 112
     de2:	fc 4f       	sbci	r31, 0xFC	; 252
     de4:	40 81       	ld	r20, Z
     de6:	51 81       	ldd	r21, Z+1	; 0x01
     de8:	42 17       	cp	r20, r18
     dea:	53 07       	cpc	r21, r19
     dec:	2c f0       	brlt	.+10     	; 0xdf8 <calc_start_end_wave_idx+0x96>
		  {
			  end_wave_idx=i;// storing X coordinate of the point as end_wave_idx where waveform cuts the center horizontal line(V_mid) for the second time while moving up
     dee:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <end_wave_idx+0x1>
     df2:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <end_wave_idx>
			  break;
     df6:	08 95       	ret
		  {
			  start_wave_idx=i+1;  // storing X coordinate of the point as start_wave_idx where waveform cuts the center horizontal line(V_mid) for the first time while moving up 
			  break;
		  }
	  }
	  for(int i=start_wave_idx+1;i<192;i++)
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	80 3c       	cpi	r24, 0xC0	; 192
     dfc:	91 05       	cpc	r25, r1
     dfe:	f4 f2       	brlt	.-68     	; 0xdbc <calc_start_end_wave_idx+0x5a>
     e00:	08 95       	ret

00000e02 <calc_frequency>:

/**
 * @brief      Find the frequency of input waveform
 */
void calc_frequency(void)
{
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
	// << TODO >> : Complete the logic in function as expected in the comment above.
	float t = end_wave_idx-start_wave_idx;
     e0a:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <end_wave_idx>
     e0e:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <end_wave_idx+0x1>
     e12:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <start_wave_idx>
     e16:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <start_wave_idx+0x1>
     e1a:	68 1b       	sub	r22, r24
     e1c:	79 0b       	sbc	r23, r25
     e1e:	07 2e       	mov	r0, r23
     e20:	00 0c       	add	r0, r0
     e22:	88 0b       	sbc	r24, r24
     e24:	99 0b       	sbc	r25, r25
     e26:	0e 94 c5 12 	call	0x258a	; 0x258a <__floatsisf>
     e2a:	6b 01       	movw	r12, r22
     e2c:	7c 01       	movw	r14, r24
	if(t>0) freq=8/(t*(ms_per_div));  // as i'm not using the above mentioned optional feature so i multiplied the Time Period with 0.5 instead of ms_per_div
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	a9 01       	movw	r20, r18
     e34:	0e 94 75 13 	call	0x26ea	; 0x26ea <__gesf2>
     e38:	18 16       	cp	r1, r24
     e3a:	ec f4       	brge	.+58     	; 0xe76 <calc_frequency+0x74>
     e3c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <ms_per_div>
     e40:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <ms_per_div+0x1>
     e44:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <ms_per_div+0x2>
     e48:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <ms_per_div+0x3>
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
     e54:	9b 01       	movw	r18, r22
     e56:	ac 01       	movw	r20, r24
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	91 e4       	ldi	r25, 0x41	; 65
     e60:	0e 94 2a 12 	call	0x2454	; 0x2454 <__divsf3>
     e64:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <freq>
     e68:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <freq+0x1>
     e6c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <freq+0x2>
     e70:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <freq+0x3>
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <calc_frequency+0x84>
	else freq=0;
     e76:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <freq>
     e7a:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <freq+0x1>
     e7e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <freq+0x2>
     e82:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <freq+0x3>
}
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	08 95       	ret

00000e90 <measure_parameters>:
void measure_parameters(void)
{
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	// calculate the V_pp (peak-to-peak) voltage in Volts and the V_mid (value from buffer array which is half the amplitude)
	calc_vpp_vmid();
     e90:	0a df       	rcall	.-492    	; 0xca6 <calc_vpp_vmid>

	// calculate the index values from buffer array where the "first" wave in given waveform starts (start_wave_idx) and ends (end_wave_idx) its cycle
	calc_start_end_wave_idx();
     e92:	67 df       	rcall	.-306    	; 0xd62 <calc_start_end_wave_idx>

	// calculate the frequency of input waveform in kHz unit
	calc_frequency();
     e94:	b6 cf       	rjmp	.-148    	; 0xe02 <calc_frequency>
     e96:	08 95       	ret

00000e98 <translate_wave_to_pixels>:
     e98:	20 e0       	ldi	r18, 0x00	; 0
 * 				waveform is symmetric about the center horizontal line
 */
void translate_wave_to_pixels(void)
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	  for(int i=0; i<96; i++){
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	1f c0       	rjmp	.+62     	; 0xedc <translate_wave_to_pixels+0x44>
		  pixel_loc[i] = (32+(V_mid-buffer_input_data[i])/4);// mapping the stored waveform (0, 255) in pixels (0, 63) and making it symmetrical about central horizontal line 
     e9e:	f9 01       	movw	r30, r18
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	e0 57       	subi	r30, 0x70	; 112
     ea6:	fc 4f       	sbci	r31, 0xFC	; 252
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	40 91 8e 03 	lds	r20, 0x038E	; 0x80038e <V_mid>
     eb0:	50 91 8f 03 	lds	r21, 0x038F	; 0x80038f <V_mid+0x1>
     eb4:	48 1b       	sub	r20, r24
     eb6:	59 0b       	sbc	r21, r25
     eb8:	ca 01       	movw	r24, r20
     eba:	99 23       	and	r25, r25
     ebc:	0c f4       	brge	.+2      	; 0xec0 <translate_wave_to_pixels+0x28>
     ebe:	03 96       	adiw	r24, 0x03	; 3
     ec0:	95 95       	asr	r25
     ec2:	87 95       	ror	r24
     ec4:	95 95       	asr	r25
     ec6:	87 95       	ror	r24
     ec8:	80 96       	adiw	r24, 0x20	; 32
     eca:	f9 01       	movw	r30, r18
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	ea 53       	subi	r30, 0x3A	; 58
     ed2:	fd 4f       	sbci	r31, 0xFD	; 253
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
 * 				waveform is symmetric about the center horizontal line
 */
void translate_wave_to_pixels(void)
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	  for(int i=0; i<96; i++){
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	20 36       	cpi	r18, 0x60	; 96
     ede:	31 05       	cpc	r19, r1
     ee0:	f4 f2       	brlt	.-68     	; 0xe9e <translate_wave_to_pixels+0x6>
		  pixel_loc[i] = (32+(V_mid-buffer_input_data[i])/4);// mapping the stored waveform (0, 255) in pixels (0, 63) and making it symmetrical about central horizontal line 
	  }
}
     ee2:	08 95       	ret

00000ee4 <draw_ref_frame>:
/**
 * @brief      Draw the reference frame in "Display Waveform" Area for easy view of the input waveform
 * 			   with equal divisions for Time in msec (on X-axis) and Voltage level in Volts (on Y-axis)
 */
void draw_ref_frame(void)
{
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	// drawing outer boundary or rectangle in the "Display Waveform" Area of 96 (columns) x 64 (rows)
	drawFrame(0, 0, 95, 63);
     eec:	2f e3       	ldi	r18, 0x3F	; 63
     eee:	4f e5       	ldi	r20, 0x5F	; 95
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	f9 d1       	rcall	.+1010   	; 0x12e8 <drawFrame>

	// drawing the center horizontal and vertical line for reference and symmetricity
	drawLine(48, 0, 48, 63);
     ef6:	2f e3       	ldi	r18, 0x3F	; 63
     ef8:	40 e3       	ldi	r20, 0x30	; 48
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	ff d1       	rcall	.+1022   	; 0x12fe <drawLine>
	drawLine(0, 32, 95, 32);
     f00:	20 e2       	ldi	r18, 0x20	; 32
     f02:	4f e5       	ldi	r20, 0x5F	; 95
     f04:	60 e2       	ldi	r22, 0x20	; 32
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	fa d1       	rcall	.+1012   	; 0x12fe <drawLine>

	// drawing short vertical lines or markings on center horizontal line with equal divisions for Time in msec
	for (int x = 0; x < 97; x += 8)
     f0a:	c0 e0       	ldi	r28, 0x00	; 0
     f0c:	d0 e0       	ldi	r29, 0x00	; 0
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <draw_ref_frame+0x38>
		drawLine(x, 31, x, 33);
     f10:	21 e2       	ldi	r18, 0x21	; 33
     f12:	4c 2f       	mov	r20, r28
     f14:	6f e1       	ldi	r22, 0x1F	; 31
     f16:	8c 2f       	mov	r24, r28
     f18:	f2 d1       	rcall	.+996    	; 0x12fe <drawLine>
	// drawing the center horizontal and vertical line for reference and symmetricity
	drawLine(48, 0, 48, 63);
	drawLine(0, 32, 95, 32);

	// drawing short vertical lines or markings on center horizontal line with equal divisions for Time in msec
	for (int x = 0; x < 97; x += 8)
     f1a:	28 96       	adiw	r28, 0x08	; 8
     f1c:	c1 36       	cpi	r28, 0x61	; 97
     f1e:	d1 05       	cpc	r29, r1
     f20:	bc f3       	brlt	.-18     	; 0xf10 <draw_ref_frame+0x2c>
     f22:	c0 e0       	ldi	r28, 0x00	; 0
     f24:	d0 e0       	ldi	r29, 0x00	; 0
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <draw_ref_frame+0x50>
		drawLine(x, 31, x, 33);
	
	// drawing short horizontal lines or markings on center vertical line with equal divisions for Voltage level in Volts
	for (int y = 0 ; y < 64; y += 8)
		drawLine(47, y, 49, y);
     f28:	2c 2f       	mov	r18, r28
     f2a:	41 e3       	ldi	r20, 0x31	; 49
     f2c:	6c 2f       	mov	r22, r28
     f2e:	8f e2       	ldi	r24, 0x2F	; 47
     f30:	e6 d1       	rcall	.+972    	; 0x12fe <drawLine>
	// drawing short vertical lines or markings on center horizontal line with equal divisions for Time in msec
	for (int x = 0; x < 97; x += 8)
		drawLine(x, 31, x, 33);
	
	// drawing short horizontal lines or markings on center vertical line with equal divisions for Voltage level in Volts
	for (int y = 0 ; y < 64; y += 8)
     f32:	28 96       	adiw	r28, 0x08	; 8
     f34:	c0 34       	cpi	r28, 0x40	; 64
     f36:	d1 05       	cpc	r29, r1
     f38:	bc f3       	brlt	.-18     	; 0xf28 <draw_ref_frame+0x44>
     f3a:	08 e0       	ldi	r16, 0x08	; 8
     f3c:	10 e0       	ldi	r17, 0x00	; 0
	
	// plot small dots in all four quadrants for symmetricity in viewing the input waveform
	for (int x = 8; x < 96; x += 8)
	{
		for (int y=8; y < 64; y += 8)
			drawPixel(x,y);
     f3e:	0c c0       	rjmp	.+24     	; 0xf58 <draw_ref_frame+0x74>
     f40:	6c 2f       	mov	r22, r28
     f42:	80 2f       	mov	r24, r16
     f44:	e6 d1       	rcall	.+972    	; 0x1312 <drawPixel>
		drawLine(47, y, 49, y);
	
	// plot small dots in all four quadrants for symmetricity in viewing the input waveform
	for (int x = 8; x < 96; x += 8)
	{
		for (int y=8; y < 64; y += 8)
     f46:	28 96       	adiw	r28, 0x08	; 8
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <draw_ref_frame+0x6a>
     f4a:	c8 e0       	ldi	r28, 0x08	; 8
     f4c:	d0 e0       	ldi	r29, 0x00	; 0
     f4e:	c0 34       	cpi	r28, 0x40	; 64
     f50:	d1 05       	cpc	r29, r1
     f52:	b4 f3       	brlt	.-20     	; 0xf40 <draw_ref_frame+0x5c>
	// drawing short horizontal lines or markings on center vertical line with equal divisions for Voltage level in Volts
	for (int y = 0 ; y < 64; y += 8)
		drawLine(47, y, 49, y);
	
	// plot small dots in all four quadrants for symmetricity in viewing the input waveform
	for (int x = 8; x < 96; x += 8)
     f54:	08 5f       	subi	r16, 0xF8	; 248
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	00 36       	cpi	r16, 0x60	; 96
     f5a:	11 05       	cpc	r17, r1
     f5c:	b4 f3       	brlt	.-20     	; 0xf4a <draw_ref_frame+0x66>
	{
		for (int y=8; y < 64; y += 8)
			drawPixel(x,y);
	}
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <draw_waveform>:
/**
 * @brief      Draw the input waveform data points translated to pixel locations in "Display Waveform" area
 * 			   Make use of "drawLine" function from u8g library to connect the pixel dots or data points so the input waveform is visualized
 */
void draw_waveform(void)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
	for(int x = 0;x < 96;x++) drawLine(x,(vert_disp+pixel_loc[x]),x,(vert_disp+pixel_loc[x+1]));
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	15 c0       	rjmp	.+42     	; 0xf9c <draw_waveform+0x34>
     f72:	ec 01       	movw	r28, r24
     f74:	21 96       	adiw	r28, 0x01	; 1
     f76:	fe 01       	movw	r30, r28
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ea 53       	subi	r30, 0x3A	; 58
     f7e:	fd 4f       	sbci	r31, 0xFD	; 253
     f80:	20 81       	ld	r18, Z
     f82:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <__data_end>
     f86:	fc 01       	movw	r30, r24
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	ea 53       	subi	r30, 0x3A	; 58
     f8e:	fd 4f       	sbci	r31, 0xFD	; 253
     f90:	90 81       	ld	r25, Z
     f92:	26 0f       	add	r18, r22
     f94:	69 0f       	add	r22, r25
     f96:	48 2f       	mov	r20, r24
     f98:	b2 d1       	rcall	.+868    	; 0x12fe <drawLine>
     f9a:	ce 01       	movw	r24, r28
     f9c:	80 36       	cpi	r24, 0x60	; 96
     f9e:	91 05       	cpc	r25, r1
     fa0:	44 f3       	brlt	.-48     	; 0xf72 <draw_waveform+0xa>
// pixel_loc stores the y coordinates of every point of the waveform, looping from 0 to 96(x coordinate) and joining these points with drawline function   
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <display_wave_info_text_data>:
 */
void display_wave_info_text_data(void)
{
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	drawStr(96, 7, "ms/div");
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	52 e0       	ldi	r21, 0x02	; 2
     fac:	67 e0       	ldi	r22, 0x07	; 7
     fae:	80 e6       	ldi	r24, 0x60	; 96
     fb0:	b6 d1       	rcall	.+876    	; 0x131e <drawStr>
	setPrintPos(96, 14);
     fb2:	6e e0       	ldi	r22, 0x0E	; 14
     fb4:	80 e6       	ldi	r24, 0x60	; 96
     fb6:	ca d0       	rcall	.+404    	; 0x114c <setPrintPos>
	print_float(ms_per_div, 3);
     fb8:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <ms_per_div>
     fbc:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <ms_per_div+0x1>
     fc0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ms_per_div+0x2>
     fc4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <ms_per_div+0x3>
     fc8:	43 e0       	ldi	r20, 0x03	; 3
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	69 d1       	rcall	.+722    	; 0x12a0 <print_float>

	drawStr(96, 23, "V/div");
     fce:	47 e2       	ldi	r20, 0x27	; 39
     fd0:	52 e0       	ldi	r21, 0x02	; 2
     fd2:	67 e1       	ldi	r22, 0x17	; 23
     fd4:	80 e6       	ldi	r24, 0x60	; 96
	setPrintPos(96, 30);
     fd6:	a3 d1       	rcall	.+838    	; 0x131e <drawStr>
     fd8:	6e e1       	ldi	r22, 0x1E	; 30
     fda:	80 e6       	ldi	r24, 0x60	; 96
     fdc:	b7 d0       	rcall	.+366    	; 0x114c <setPrintPos>
	print_float(volts_per_div, 3);
     fde:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     fe2:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     fe6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     fea:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     fee:	43 e0       	ldi	r20, 0x03	; 3
     ff0:	50 e0       	ldi	r21, 0x00	; 0
	
	drawStr(96, 40, "Vpp");
     ff2:	56 d1       	rcall	.+684    	; 0x12a0 <print_float>
     ff4:	4d e2       	ldi	r20, 0x2D	; 45
     ff6:	52 e0       	ldi	r21, 0x02	; 2
     ff8:	68 e2       	ldi	r22, 0x28	; 40
     ffa:	80 e6       	ldi	r24, 0x60	; 96
	setPrintPos(96, 47);
     ffc:	90 d1       	rcall	.+800    	; 0x131e <drawStr>
     ffe:	6f e2       	ldi	r22, 0x2F	; 47
    1000:	80 e6       	ldi	r24, 0x60	; 96
    1002:	a4 d0       	rcall	.+328    	; 0x114c <setPrintPos>
	print_float(V_pp, 3);
    1004:	60 91 86 03 	lds	r22, 0x0386	; 0x800386 <V_pp>
    1008:	70 91 87 03 	lds	r23, 0x0387	; 0x800387 <V_pp+0x1>
    100c:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <V_pp+0x2>
    1010:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <V_pp+0x3>
    1014:	43 e0       	ldi	r20, 0x03	; 3
    1016:	50 e0       	ldi	r21, 0x00	; 0
	drawStr(123, 47, "V");
    1018:	43 d1       	rcall	.+646    	; 0x12a0 <print_float>
    101a:	41 e3       	ldi	r20, 0x31	; 49
    101c:	52 e0       	ldi	r21, 0x02	; 2
    101e:	6f e2       	ldi	r22, 0x2F	; 47
	
	drawStr(96, 55, "f(kHz)");
    1020:	8b e7       	ldi	r24, 0x7B	; 123
    1022:	7d d1       	rcall	.+762    	; 0x131e <drawStr>
    1024:	43 e3       	ldi	r20, 0x33	; 51
    1026:	52 e0       	ldi	r21, 0x02	; 2
    1028:	67 e3       	ldi	r22, 0x37	; 55
    102a:	80 e6       	ldi	r24, 0x60	; 96
	setPrintPos(96, 62);
    102c:	78 d1       	rcall	.+752    	; 0x131e <drawStr>
    102e:	6e e3       	ldi	r22, 0x3E	; 62
    1030:	80 e6       	ldi	r24, 0x60	; 96
	print_float(freq, 3);
    1032:	8c d0       	rcall	.+280    	; 0x114c <setPrintPos>
    1034:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <freq>
    1038:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <freq+0x1>
    103c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <freq+0x2>
    1040:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <freq+0x3>
    1044:	43 e0       	ldi	r20, 0x03	; 3
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	2b c1       	rjmp	.+598    	; 0x12a0 <print_float>
    104a:	08 95       	ret

0000104c <dso_display_waveform_data>:
void dso_display_waveform_data(void)
{
	// << NOTE >> : You are not allowed to modify or change the "do-while" loop
	// << TODO >> : You can although add a condition to hold the running wave on press of HOLD switch
	
	firstPage();
    104c:	74 d1       	rcall	.+744    	; 0x1336 <firstPage>
	do
	{
		// display the reference frame
		draw_ref_frame();
    104e:	4a df       	rcall	.-364    	; 0xee4 <draw_ref_frame>

		// display the waveform as close and identical as possible with the input waveform by Function Generator
		draw_waveform();
    1050:	8b df       	rcall	.-234    	; 0xf68 <draw_waveform>

		// display the waveform info text and data of measured parameters
		display_wave_info_text_data();
    1052:	aa df       	rcall	.-172    	; 0xfa8 <display_wave_info_text_data>
    1054:	74 d1       	rcall	.+744    	; 0x133e <nextPage>
	}
	while( nextPage() );
    1056:	81 11       	cpse	r24, r1
    1058:	fa cf       	rjmp	.-12     	; 0x104e <dso_display_waveform_data+0x2>
    105a:	08 95       	ret

0000105c <start_dso_operation>:
    105c:	ba dd       	rcall	.-1164   	; 0xbd2 <sample_input_wave>
}
    105e:	18 df       	rcall	.-464    	; 0xe90 <measure_parameters>

	// measure various parameters of the given waveform
	measure_parameters();

	// convert the waveform data points to pixel coordinates of the GLCD
	translate_wave_to_pixels();
    1060:	1b df       	rcall	.-458    	; 0xe98 <translate_wave_to_pixels>
    1062:	f4 cf       	rjmp	.-24     	; 0x104c <dso_display_waveform_data>

	// display the waveform and data of measured parameters
	dso_display_waveform_data();
    1064:	08 95       	ret

00001066 <main>:
    1066:	a9 dc       	rcall	.-1710   	; 0x9ba <dso_init>
    1068:	a2 dd       	rcall	.-1212   	; 0xbae <dso_start_screen>
	dso_init();
	dso_start_screen();

	while(1)
	{
		start_dso_operation();
    106a:	f8 df       	rcall	.-16     	; 0x105c <start_dso_operation>
    106c:	fe cf       	rjmp	.-4      	; 0x106a <main+0x4>

0000106e <sys_init>:
    106e:	e1 e6       	ldi	r30, 0x61	; 97
u8g_uint_t print_int(int num)
{
  char data[128];
  sprintf(data,"%d",num);
  return u8g_DrawStr(&u8g,tx,ty,data);
}
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	80 83       	st	Z, r24
    1076:	10 82       	st	Z, r1
    1078:	08 95       	ret

0000107a <glcd_setup>:
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec df       	rcall	.-40     	; 0x106e <sys_init>
    1096:	65 e0       	ldi	r22, 0x05	; 5
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	38 d3       	rcall	.+1648   	; 0x170c <u8g_Pin>
    109c:	78 2e       	mov	r7, r24
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	34 d3       	rcall	.+1640   	; 0x170c <u8g_Pin>
    10a4:	98 2e       	mov	r9, r24
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	30 d3       	rcall	.+1632   	; 0x170c <u8g_Pin>
    10ac:	b8 2e       	mov	r11, r24
    10ae:	64 e0       	ldi	r22, 0x04	; 4
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	2c d3       	rcall	.+1624   	; 0x170c <u8g_Pin>
    10b4:	d8 2e       	mov	r13, r24
    10b6:	63 e0       	ldi	r22, 0x03	; 3
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	28 d3       	rcall	.+1616   	; 0x170c <u8g_Pin>
    10bc:	f8 2e       	mov	r15, r24
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	24 d3       	rcall	.+1608   	; 0x170c <u8g_Pin>
    10c4:	18 2f       	mov	r17, r24
    10c6:	67 e0       	ldi	r22, 0x07	; 7
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	20 d3       	rcall	.+1600   	; 0x170c <u8g_Pin>
    10cc:	d8 2f       	mov	r29, r24
    10ce:	66 e0       	ldi	r22, 0x06	; 6
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	1c d3       	rcall	.+1592   	; 0x170c <u8g_Pin>
    10d4:	88 2e       	mov	r8, r24
    10d6:	65 e0       	ldi	r22, 0x05	; 5
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	18 d3       	rcall	.+1584   	; 0x170c <u8g_Pin>
    10dc:	a8 2e       	mov	r10, r24
    10de:	64 e0       	ldi	r22, 0x04	; 4
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	14 d3       	rcall	.+1576   	; 0x170c <u8g_Pin>
    10e4:	c8 2e       	mov	r12, r24
    10e6:	63 e0       	ldi	r22, 0x03	; 3
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	10 d3       	rcall	.+1568   	; 0x170c <u8g_Pin>
    10ec:	e8 2e       	mov	r14, r24
    10ee:	62 e0       	ldi	r22, 0x02	; 2
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	0c d3       	rcall	.+1560   	; 0x170c <u8g_Pin>
    10f4:	08 2f       	mov	r16, r24
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	08 d3       	rcall	.+1552   	; 0x170c <u8g_Pin>
    10fc:	c8 2f       	mov	r28, r24
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	04 d3       	rcall	.+1544   	; 0x170c <u8g_Pin>
    1104:	7f 92       	push	r7
    1106:	9f 92       	push	r9
    1108:	bf 92       	push	r11
    110a:	df 92       	push	r13
    110c:	ff 92       	push	r15
    110e:	1f 93       	push	r17
    1110:	df 93       	push	r29
    1112:	2c 2f       	mov	r18, r28
    1114:	48 2f       	mov	r20, r24
    1116:	68 e0       	ldi	r22, 0x08	; 8
    1118:	72 e0       	ldi	r23, 0x02	; 2
    111a:	80 e1       	ldi	r24, 0x10	; 16
    111c:	95 e0       	ldi	r25, 0x05	; 5
    111e:	51 d7       	rcall	.+3746   	; 0x1fc2 <u8g_Init8Bit>
    1120:	8d b7       	in	r24, 0x3d	; 61
    1122:	9e b7       	in	r25, 0x3e	; 62
    1124:	07 96       	adiw	r24, 0x07	; 7
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	9e bf       	out	0x3e, r25	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	8d bf       	out	0x3d, r24	; 61
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	bf 90       	pop	r11
    1142:	af 90       	pop	r10
    1144:	9f 90       	pop	r9
    1146:	8f 90       	pop	r8
    1148:	7f 90       	pop	r7
    114a:	08 95       	ret

0000114c <setPrintPos>:
    114c:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <tx>
    1150:	60 93 48 05 	sts	0x0548, r22	; 0x800548 <ty>
    1154:	08 95       	ret

00001156 <reverse>:
    1156:	61 50       	subi	r22, 0x01	; 1
    1158:	71 09       	sbc	r23, r1
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	0e c0       	rjmp	.+28     	; 0x117c <reverse+0x26>
    1160:	dc 01       	movw	r26, r24
    1162:	a2 0f       	add	r26, r18
    1164:	b3 1f       	adc	r27, r19
    1166:	4c 91       	ld	r20, X
    1168:	fc 01       	movw	r30, r24
    116a:	e6 0f       	add	r30, r22
    116c:	f7 1f       	adc	r31, r23
    116e:	50 81       	ld	r21, Z
    1170:	5c 93       	st	X, r21
    1172:	40 83       	st	Z, r20
    1174:	2f 5f       	subi	r18, 0xFF	; 255
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	61 50       	subi	r22, 0x01	; 1
    117a:	71 09       	sbc	r23, r1
    117c:	26 17       	cp	r18, r22
    117e:	37 07       	cpc	r19, r23
    1180:	7c f3       	brlt	.-34     	; 0x1160 <reverse+0xa>
    1182:	08 95       	ret

00001184 <intToStr>:
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	8b 01       	movw	r16, r22
    118e:	9a 01       	movw	r18, r20
    1190:	c0 e0       	ldi	r28, 0x00	; 0
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	0c c0       	rjmp	.+24     	; 0x11ae <intToStr+0x2a>
    1196:	f8 01       	movw	r30, r16
    1198:	ec 0f       	add	r30, r28
    119a:	fd 1f       	adc	r31, r29
    119c:	6a e0       	ldi	r22, 0x0A	; 10
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__divmodhi4>
    11a4:	80 5d       	subi	r24, 0xD0	; 208
    11a6:	80 83       	st	Z, r24
    11a8:	86 2f       	mov	r24, r22
    11aa:	97 2f       	mov	r25, r23
    11ac:	21 96       	adiw	r28, 0x01	; 1
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	91 f7       	brne	.-28     	; 0x1196 <intToStr+0x12>
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <intToStr+0x3c>
    11b4:	f8 01       	movw	r30, r16
    11b6:	ec 0f       	add	r30, r28
    11b8:	fd 1f       	adc	r31, r29
    11ba:	80 e3       	ldi	r24, 0x30	; 48
    11bc:	80 83       	st	Z, r24
    11be:	21 96       	adiw	r28, 0x01	; 1
    11c0:	c2 17       	cp	r28, r18
    11c2:	d3 07       	cpc	r29, r19
    11c4:	bc f3       	brlt	.-18     	; 0x11b4 <intToStr+0x30>
    11c6:	be 01       	movw	r22, r28
    11c8:	c8 01       	movw	r24, r16
    11ca:	c5 df       	rcall	.-118    	; 0x1156 <reverse>
    11cc:	f8 01       	movw	r30, r16
    11ce:	ec 0f       	add	r30, r28
    11d0:	fd 1f       	adc	r31, r29
    11d2:	10 82       	st	Z, r1
    11d4:	ce 01       	movw	r24, r28
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <ftoa>:
    11e0:	4f 92       	push	r4
    11e2:	5f 92       	push	r5
    11e4:	6f 92       	push	r6
    11e6:	7f 92       	push	r7
    11e8:	8f 92       	push	r8
    11ea:	9f 92       	push	r9
    11ec:	af 92       	push	r10
    11ee:	bf 92       	push	r11
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	2b 01       	movw	r4, r22
    11fe:	3c 01       	movw	r6, r24
    1200:	7a 01       	movw	r14, r20
    1202:	89 01       	movw	r16, r18
    1204:	0e 94 92 12 	call	0x2524	; 0x2524 <__fixsfsi>
    1208:	4b 01       	movw	r8, r22
    120a:	5c 01       	movw	r10, r24
    120c:	07 2e       	mov	r0, r23
    120e:	00 0c       	add	r0, r0
    1210:	88 0b       	sbc	r24, r24
    1212:	99 0b       	sbc	r25, r25
    1214:	0e 94 c5 12 	call	0x258a	; 0x258a <__floatsisf>
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	c3 01       	movw	r24, r6
    121e:	b2 01       	movw	r22, r4
    1220:	0e 94 c1 11 	call	0x2382	; 0x2382 <__subsf3>
    1224:	2b 01       	movw	r4, r22
    1226:	3c 01       	movw	r6, r24
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	b7 01       	movw	r22, r14
    122e:	c4 01       	movw	r24, r8
    1230:	a9 df       	rcall	.-174    	; 0x1184 <intToStr>
    1232:	ec 01       	movw	r28, r24
    1234:	01 15       	cp	r16, r1
    1236:	11 05       	cpc	r17, r1
    1238:	21 f1       	breq	.+72     	; 0x1282 <ftoa+0xa2>
    123a:	f7 01       	movw	r30, r14
    123c:	e8 0f       	add	r30, r24
    123e:	f9 1f       	adc	r31, r25
    1240:	8e e2       	ldi	r24, 0x2E	; 46
    1242:	80 83       	st	Z, r24
    1244:	b8 01       	movw	r22, r16
    1246:	01 2e       	mov	r0, r17
    1248:	00 0c       	add	r0, r0
    124a:	88 0b       	sbc	r24, r24
    124c:	99 0b       	sbc	r25, r25
    124e:	0e 94 c5 12 	call	0x258a	; 0x258a <__floatsisf>
    1252:	9b 01       	movw	r18, r22
    1254:	ac 01       	movw	r20, r24
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	80 e2       	ldi	r24, 0x20	; 32
    125c:	91 e4       	ldi	r25, 0x41	; 65
    125e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <pow>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	c3 01       	movw	r24, r6
    1268:	b2 01       	movw	r22, r4
    126a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
    126e:	21 96       	adiw	r28, 0x01	; 1
    1270:	ce 0d       	add	r28, r14
    1272:	df 1d       	adc	r29, r15
    1274:	0e 94 92 12 	call	0x2524	; 0x2524 <__fixsfsi>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	a8 01       	movw	r20, r16
    127e:	be 01       	movw	r22, r28
    1280:	81 df       	rcall	.-254    	; 0x1184 <intToStr>
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	9f 90       	pop	r9
    1294:	8f 90       	pop	r8
    1296:	7f 90       	pop	r7
    1298:	6f 90       	pop	r6
    129a:	5f 90       	pop	r5
    129c:	4f 90       	pop	r4
    129e:	08 95       	ret

000012a0 <print_float>:

u8g_uint_t print_float(double num, int afterpoint)
{
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	c0 58       	subi	r28, 0x80	; 128
    12aa:	d1 09       	sbc	r29, r1
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	9a 01       	movw	r18, r20
  char data[128];
  ftoa(num,data,afterpoint);
    12b8:	ae 01       	movw	r20, r28
    12ba:	4f 5f       	subi	r20, 0xFF	; 255
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	90 df       	rcall	.-224    	; 0x11e0 <ftoa>
  return u8g_DrawStr(&u8g,tx,ty,data);
    12c0:	9e 01       	movw	r18, r28
    12c2:	2f 5f       	subi	r18, 0xFF	; 255
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <ty>
    12ca:	60 91 47 05 	lds	r22, 0x0547	; 0x800547 <tx>
    12ce:	80 e1       	ldi	r24, 0x10	; 16
    12d0:	95 e0       	ldi	r25, 0x05	; 5
    12d2:	6f d4       	rcall	.+2270   	; 0x1bb2 <u8g_DrawStr>
}
    12d4:	c0 58       	subi	r28, 0x80	; 128
    12d6:	df 4f       	sbci	r29, 0xFF	; 255
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <drawFrame>:

void drawFrame(u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    12e8:	0f 93       	push	r16
	u8g_DrawFrame(&u8g,x,y,w,h);
    12ea:	02 2f       	mov	r16, r18
    12ec:	24 2f       	mov	r18, r20
    12ee:	46 2f       	mov	r20, r22
    12f0:	68 2f       	mov	r22, r24
    12f2:	80 e1       	ldi	r24, 0x10	; 16
    12f4:	95 e0       	ldi	r25, 0x05	; 5
    12f6:	0e 94 92 11 	call	0x2324	; 0x2324 <u8g_DrawFrame>
}
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <drawLine>:

void drawLine(u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
    12fe:	0f 93       	push	r16
	u8g_DrawLine(&u8g,x1,y1,x2,y2);
    1300:	02 2f       	mov	r16, r18
    1302:	24 2f       	mov	r18, r20
    1304:	46 2f       	mov	r20, r22
    1306:	68 2f       	mov	r22, r24
    1308:	80 e1       	ldi	r24, 0x10	; 16
    130a:	95 e0       	ldi	r25, 0x05	; 5
    130c:	cd d4       	rcall	.+2458   	; 0x1ca8 <u8g_DrawLine>
}
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <drawPixel>:

void drawPixel(u8g_uint_t x, u8g_uint_t y)
{
    1312:	46 2f       	mov	r20, r22
	u8g_DrawPixel(&u8g,x,y);
    1314:	68 2f       	mov	r22, r24
    1316:	80 e1       	ldi	r24, 0x10	; 16
    1318:	95 e0       	ldi	r25, 0x05	; 5
    131a:	0f c6       	rjmp	.+3102   	; 0x1f3a <u8g_DrawPixel>
    131c:	08 95       	ret

0000131e <drawStr>:
}

u8g_uint_t drawStr(u8g_uint_t x, u8g_uint_t y, const char *s)
{
    131e:	9a 01       	movw	r18, r20
	return u8g_DrawStr(&u8g,x,y, s);
    1320:	46 2f       	mov	r20, r22
    1322:	68 2f       	mov	r22, r24
    1324:	80 e1       	ldi	r24, 0x10	; 16
    1326:	95 e0       	ldi	r25, 0x05	; 5
    1328:	44 c4       	rjmp	.+2184   	; 0x1bb2 <u8g_DrawStr>
}
    132a:	08 95       	ret

0000132c <setFont>:

void setFont(const u8g_fntpgm_uint8_t  *font)
{
	u8g_SetFont(&u8g, font);
    132c:	bc 01       	movw	r22, r24
    132e:	80 e1       	ldi	r24, 0x10	; 16
    1330:	95 e0       	ldi	r25, 0x05	; 5
    1332:	a9 c4       	rjmp	.+2386   	; 0x1c86 <u8g_SetFont>
    1334:	08 95       	ret

00001336 <firstPage>:
}

void firstPage(void)
{
	u8g_FirstPage(&u8g);
    1336:	80 e1       	ldi	r24, 0x10	; 16
    1338:	95 e0       	ldi	r25, 0x05	; 5
    133a:	eb c5       	rjmp	.+3030   	; 0x1f12 <u8g_FirstPage>
    133c:	08 95       	ret

0000133e <nextPage>:
}

uint8_t nextPage(void)
{
	return u8g_NextPage(&u8g);
    133e:	80 e1       	ldi	r24, 0x10	; 16
    1340:	95 e0       	ldi	r25, 0x05	; 5
    1342:	ec c5       	rjmp	.+3032   	; 0x1f1c <u8g_NextPage>
}
    1344:	08 95       	ret

00001346 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1346:	0f 93       	push	r16
    1348:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
    134a:	04 0f       	add	r16, r20
  tmp--;
    134c:	01 50       	subi	r16, 0x01	; 1
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    134e:	96 a9       	ldd	r25, Z+54	; 0x36
    1350:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1352:	94 17       	cp	r25, r20
    1354:	30 f0       	brcs	.+12     	; 0x1362 <u8g_IsBBXIntersection+0x1c>
  {
    if ( v1 >= a0 )
    1356:	08 17       	cp	r16, r24
    1358:	50 f4       	brcc	.+20     	; 0x136e <u8g_IsBBXIntersection+0x28>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    135a:	04 17       	cp	r16, r20
    135c:	50 f4       	brcc	.+20     	; 0x1372 <u8g_IsBBXIntersection+0x2c>
      {
	return 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	0d c0       	rjmp	.+26     	; 0x137c <u8g_IsBBXIntersection+0x36>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1362:	08 17       	cp	r16, r24
    1364:	40 f0       	brcs	.+16     	; 0x1376 <u8g_IsBBXIntersection+0x30>
    {
      if ( v0 > v1 )
    1366:	04 17       	cp	r16, r20
    1368:	40 f4       	brcc	.+16     	; 0x137a <u8g_IsBBXIntersection+0x34>
      {
	return 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	07 c0       	rjmp	.+14     	; 0x137c <u8g_IsBBXIntersection+0x36>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	05 c0       	rjmp	.+10     	; 0x137c <u8g_IsBBXIntersection+0x36>
      {
	return 1;
      }
      else
      {
	return 0;
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	03 c0       	rjmp	.+6      	; 0x137c <u8g_IsBBXIntersection+0x36>
	return 0;
      }
    }
    else
    {
      return 0;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	01 c0       	rjmp	.+2      	; 0x137c <u8g_IsBBXIntersection+0x36>
      {
	return 1;
      }
      else
      {
	return 0;
    137a:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    137c:	88 23       	and	r24, r24
    137e:	c9 f0       	breq	.+50     	; 0x13b2 <u8g_IsBBXIntersection+0x6c>
    return 0; 
  
  tmp = x;
  tmp += w;
    1380:	26 0f       	add	r18, r22
  tmp--;
    1382:	21 50       	subi	r18, 0x01	; 1
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1384:	95 a9       	ldd	r25, Z+53	; 0x35
    1386:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1388:	96 17       	cp	r25, r22
    138a:	30 f0       	brcs	.+12     	; 0x1398 <u8g_IsBBXIntersection+0x52>
  {
    if ( v1 >= a0 )
    138c:	28 17       	cp	r18, r24
    138e:	50 f4       	brcc	.+20     	; 0x13a4 <u8g_IsBBXIntersection+0x5e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1390:	26 17       	cp	r18, r22
    1392:	50 f4       	brcc	.+20     	; 0x13a8 <u8g_IsBBXIntersection+0x62>
      {
	return 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <u8g_IsBBXIntersection+0x6c>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1398:	28 17       	cp	r18, r24
    139a:	40 f0       	brcs	.+16     	; 0x13ac <u8g_IsBBXIntersection+0x66>
    {
      if ( v0 > v1 )
    139c:	26 17       	cp	r18, r22
    139e:	40 f4       	brcc	.+16     	; 0x13b0 <u8g_IsBBXIntersection+0x6a>
      {
	return 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <u8g_IsBBXIntersection+0x6c>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <u8g_IsBBXIntersection+0x6c>
      {
	return 1;
      }
      else
      {
	return 0;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <u8g_IsBBXIntersection+0x6c>
	return 0;
      }
    }
    else
    {
      return 0;
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <u8g_IsBBXIntersection+0x6c>
      {
	return 1;
      }
      else
      {
	return 0;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    13b6:	db 01       	movw	r26, r22
    13b8:	14 96       	adiw	r26, 0x04	; 4
    13ba:	ed 91       	ld	r30, X+
    13bc:	fc 91       	ld	r31, X
    13be:	15 97       	sbiw	r26, 0x05	; 5
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	19 95       	eicall
    13c8:	08 95       	ret

000013ca <u8g_SetChipSelect>:
    13ca:	db 01       	movw	r26, r22
    13cc:	14 96       	adiw	r26, 0x04	; 4
    13ce:	ed 91       	ld	r30, X+
    13d0:	fc 91       	ld	r31, X
    13d2:	15 97       	sbiw	r26, 0x05	; 5
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	63 e0       	ldi	r22, 0x03	; 3
    13da:	19 95       	eicall
    13dc:	08 95       	ret

000013de <u8g_SetResetLow>:
    13de:	db 01       	movw	r26, r22
    13e0:	14 96       	adiw	r26, 0x04	; 4
    13e2:	ed 91       	ld	r30, X+
    13e4:	fc 91       	ld	r31, X
    13e6:	15 97       	sbiw	r26, 0x05	; 5
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	64 e0       	ldi	r22, 0x04	; 4
    13f0:	19 95       	eicall
    13f2:	08 95       	ret

000013f4 <u8g_SetResetHigh>:
    13f4:	db 01       	movw	r26, r22
    13f6:	14 96       	adiw	r26, 0x04	; 4
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	15 97       	sbiw	r26, 0x05	; 5
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	64 e0       	ldi	r22, 0x04	; 4
    1406:	19 95       	eicall
    1408:	08 95       	ret

0000140a <u8g_SetAddress>:
    140a:	db 01       	movw	r26, r22
    140c:	14 96       	adiw	r26, 0x04	; 4
    140e:	ed 91       	ld	r30, X+
    1410:	fc 91       	ld	r31, X
    1412:	15 97       	sbiw	r26, 0x05	; 5
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	62 e0       	ldi	r22, 0x02	; 2
    141a:	19 95       	eicall
    141c:	08 95       	ret

0000141e <u8g_WriteByte>:
    141e:	db 01       	movw	r26, r22
    1420:	14 96       	adiw	r26, 0x04	; 4
    1422:	ed 91       	ld	r30, X+
    1424:	fc 91       	ld	r31, X
    1426:	15 97       	sbiw	r26, 0x05	; 5
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	65 e0       	ldi	r22, 0x05	; 5
    142e:	19 95       	eicall
    1430:	08 95       	ret

00001432 <u8g_WriteSequence>:
    1432:	db 01       	movw	r26, r22
    1434:	14 96       	adiw	r26, 0x04	; 4
    1436:	ed 91       	ld	r30, X+
    1438:	fc 91       	ld	r31, X
    143a:	15 97       	sbiw	r26, 0x05	; 5
    143c:	66 e0       	ldi	r22, 0x06	; 6
    143e:	19 95       	eicall
    1440:	08 95       	ret

00001442 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	6c 01       	movw	r12, r24
    1454:	7b 01       	movw	r14, r22
    1456:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    1458:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    145a:	f8 01       	movw	r30, r16
    145c:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    145e:	d1 11       	cpse	r29, r1
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <u8g_WriteEscSeqP+0x34>
    {
      if ( value != 255 )
    1462:	cf 3f       	cpi	r28, 0xFF	; 255
    1464:	09 f4       	brne	.+2      	; 0x1468 <u8g_WriteEscSeqP+0x26>
    1466:	44 c0       	rjmp	.+136    	; 0x14f0 <u8g_WriteEscSeqP+0xae>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1468:	4c 2f       	mov	r20, r28
    146a:	b7 01       	movw	r22, r14
    146c:	c6 01       	movw	r24, r12
    146e:	d7 df       	rcall	.-82     	; 0x141e <u8g_WriteByte>
    1470:	81 11       	cpse	r24, r1
    1472:	45 c0       	rjmp	.+138    	; 0x14fe <u8g_WriteEscSeqP+0xbc>
    1474:	48 c0       	rjmp	.+144    	; 0x1506 <u8g_WriteEscSeqP+0xc4>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1476:	cf 3f       	cpi	r28, 0xFF	; 255
    1478:	49 f4       	brne	.+18     	; 0x148c <u8g_WriteEscSeqP+0x4a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    147a:	4c 2f       	mov	r20, r28
    147c:	b7 01       	movw	r22, r14
    147e:	c6 01       	movw	r24, r12
    1480:	ce df       	rcall	.-100    	; 0x141e <u8g_WriteByte>
    1482:	88 23       	and	r24, r24
    1484:	09 f4       	brne	.+2      	; 0x1488 <u8g_WriteEscSeqP+0x46>
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <u8g_WriteEscSeqP+0xc4>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1488:	d0 e0       	ldi	r29, 0x00	; 0
    148a:	39 c0       	rjmp	.+114    	; 0x14fe <u8g_WriteEscSeqP+0xbc>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    148c:	ce 3f       	cpi	r28, 0xFE	; 254
    148e:	09 f4       	brne	.+2      	; 0x1492 <u8g_WriteEscSeqP+0x50>
    1490:	39 c0       	rjmp	.+114    	; 0x1504 <u8g_WriteEscSeqP+0xc2>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1492:	c0 3f       	cpi	r28, 0xF0	; 240
    1494:	78 f5       	brcc	.+94     	; 0x14f4 <u8g_WriteEscSeqP+0xb2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1496:	c0 3e       	cpi	r28, 0xE0	; 224
    1498:	38 f0       	brcs	.+14     	; 0x14a8 <u8g_WriteEscSeqP+0x66>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    149a:	4c 2f       	mov	r20, r28
    149c:	4f 70       	andi	r20, 0x0F	; 15
    149e:	b7 01       	movw	r22, r14
    14a0:	c6 01       	movw	r24, r12
    14a2:	b3 df       	rcall	.-154    	; 0x140a <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    14a4:	d0 e0       	ldi	r29, 0x00	; 0
    14a6:	2b c0       	rjmp	.+86     	; 0x14fe <u8g_WriteEscSeqP+0xbc>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    14a8:	c0 3d       	cpi	r28, 0xD0	; 208
    14aa:	38 f0       	brcs	.+14     	; 0x14ba <u8g_WriteEscSeqP+0x78>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    14ac:	4c 2f       	mov	r20, r28
    14ae:	4f 70       	andi	r20, 0x0F	; 15
    14b0:	b7 01       	movw	r22, r14
    14b2:	c6 01       	movw	r24, r12
    14b4:	8a df       	rcall	.-236    	; 0x13ca <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    14b6:	d0 e0       	ldi	r29, 0x00	; 0
    14b8:	22 c0       	rjmp	.+68     	; 0x14fe <u8g_WriteEscSeqP+0xbc>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    14ba:	c0 3c       	cpi	r28, 0xC0	; 192
      {
        u8g_SetResetLow(u8g, dev);
    14bc:	80 f0       	brcs	.+32     	; 0x14de <u8g_WriteEscSeqP+0x9c>
    14be:	b7 01       	movw	r22, r14
    14c0:	c6 01       	movw	r24, r12
    14c2:	8d df       	rcall	.-230    	; 0x13de <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    14c4:	c2 95       	swap	r28
        value+=2;
    14c6:	c0 7f       	andi	r28, 0xF0	; 240
        u8g_Delay(value);
    14c8:	ce 5f       	subi	r28, 0xFE	; 254
    14ca:	d0 e0       	ldi	r29, 0x00	; 0
        u8g_SetResetHigh(u8g, dev);
    14cc:	ce 01       	movw	r24, r28
    14ce:	7b d1       	rcall	.+758    	; 0x17c6 <u8g_Delay>
    14d0:	b7 01       	movw	r22, r14
    14d2:	c6 01       	movw	r24, r12
        u8g_Delay(value);
    14d4:	8f df       	rcall	.-226    	; 0x13f4 <u8g_SetResetHigh>
    14d6:	ce 01       	movw	r24, r28
    14d8:	76 d1       	rcall	.+748    	; 0x17c6 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    14da:	d0 e0       	ldi	r29, 0x00	; 0
        value+=2;
        u8g_Delay(value);
        u8g_SetResetHigh(u8g, dev);
        u8g_Delay(value);
      }
      else if ( value >= 0xbe )
    14dc:	10 c0       	rjmp	.+32     	; 0x14fe <u8g_WriteEscSeqP+0xbc>
    14de:	ce 3b       	cpi	r28, 0xBE	; 190
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    14e0:	58 f4       	brcc	.+22     	; 0x14f8 <u8g_WriteEscSeqP+0xb6>
    14e2:	cc 23       	and	r28, r28
      {
        u8g_Delay(value);
    14e4:	5c f0       	brlt	.+22     	; 0x14fc <u8g_WriteEscSeqP+0xba>
    14e6:	8c 2f       	mov	r24, r28
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	6d d1       	rcall	.+730    	; 0x17c6 <u8g_Delay>
      }
      is_escape = 0;
    14ec:	d0 e0       	ldi	r29, 0x00	; 0
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <u8g_WriteEscSeqP+0xbc>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    14f0:	d1 e0       	ldi	r29, 0x01	; 1
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <u8g_WriteEscSeqP+0xbc>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    14f4:	d0 e0       	ldi	r29, 0x00	; 0
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <u8g_WriteEscSeqP+0xbc>
    14f8:	d0 e0       	ldi	r29, 0x00	; 0
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <u8g_WriteEscSeqP+0xbc>
    14fc:	d0 e0       	ldi	r29, 0x00	; 0
    }
    esc_seq++;
    14fe:	0f 5f       	subi	r16, 0xFF	; 255
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1502:	ab cf       	rjmp	.-170    	; 0x145a <u8g_WriteEscSeqP+0x18>
  return 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	08 95       	ret

00001518 <u8g_com_atmega_parallel_write>:

#if defined(__AVR__)

static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val) U8G_NOINLINE;
static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val)
{
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	8c 01       	movw	r16, r24
    1520:	c6 2f       	mov	r28, r22

  u8g_SetPILevel(u8g, U8G_PI_D0, val&1);
    1522:	46 2f       	mov	r20, r22
    1524:	41 70       	andi	r20, 0x01	; 1
    1526:	65 e0       	ldi	r22, 0x05	; 5
    1528:	45 d1       	rcall	.+650    	; 0x17b4 <u8g_SetPILevel>
  val >>= 1;
    152a:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D1, val&1);
    152c:	4c 2f       	mov	r20, r28
    152e:	41 70       	andi	r20, 0x01	; 1
    1530:	66 e0       	ldi	r22, 0x06	; 6
    1532:	c8 01       	movw	r24, r16
    1534:	3f d1       	rcall	.+638    	; 0x17b4 <u8g_SetPILevel>
  val >>= 1;
    1536:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D2, val&1);
    1538:	4c 2f       	mov	r20, r28
    153a:	41 70       	andi	r20, 0x01	; 1
    153c:	67 e0       	ldi	r22, 0x07	; 7
    153e:	c8 01       	movw	r24, r16
    1540:	39 d1       	rcall	.+626    	; 0x17b4 <u8g_SetPILevel>
  val >>= 1;
    1542:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D3, val&1);
    1544:	4c 2f       	mov	r20, r28
    1546:	41 70       	andi	r20, 0x01	; 1
    1548:	68 e0       	ldi	r22, 0x08	; 8
    154a:	c8 01       	movw	r24, r16
    154c:	33 d1       	rcall	.+614    	; 0x17b4 <u8g_SetPILevel>
  val >>= 1;
    154e:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D4, val&1);
    1550:	4c 2f       	mov	r20, r28
    1552:	41 70       	andi	r20, 0x01	; 1
    1554:	69 e0       	ldi	r22, 0x09	; 9
    1556:	c8 01       	movw	r24, r16
    1558:	2d d1       	rcall	.+602    	; 0x17b4 <u8g_SetPILevel>
  val >>= 1;
  u8g_SetPILevel(u8g, U8G_PI_D5, val&1);
    155a:	c6 95       	lsr	r28
    155c:	4c 2f       	mov	r20, r28
    155e:	41 70       	andi	r20, 0x01	; 1
    1560:	6a e0       	ldi	r22, 0x0A	; 10
    1562:	c8 01       	movw	r24, r16
  val >>= 1;
    1564:	27 d1       	rcall	.+590    	; 0x17b4 <u8g_SetPILevel>
  u8g_SetPILevel(u8g, U8G_PI_D6, val&1);
    1566:	c6 95       	lsr	r28
    1568:	4c 2f       	mov	r20, r28
    156a:	41 70       	andi	r20, 0x01	; 1
    156c:	6b e0       	ldi	r22, 0x0B	; 11
    156e:	c8 01       	movw	r24, r16
  val >>= 1;
  u8g_SetPILevel(u8g, U8G_PI_D7, val&1);
    1570:	21 d1       	rcall	.+578    	; 0x17b4 <u8g_SetPILevel>
    1572:	4c 2f       	mov	r20, r28
    1574:	46 95       	lsr	r20
    1576:	6c e0       	ldi	r22, 0x0C	; 12
  
  /* EN cycle time must be 1 micro second  */
  u8g_SetPILevel(u8g, U8G_PI_EN, 1);
    1578:	c8 01       	movw	r24, r16
    157a:	1c d1       	rcall	.+568    	; 0x17b4 <u8g_SetPILevel>
  u8g_MicroDelay(); /* delay by 1000ns, reference: ST7920: 140ns, SBN1661: 100ns */
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	64 e0       	ldi	r22, 0x04	; 4
  u8g_SetPILevel(u8g, U8G_PI_EN, 0);
    1580:	c8 01       	movw	r24, r16
    1582:	18 d1       	rcall	.+560    	; 0x17b4 <u8g_SetPILevel>
    1584:	29 d1       	rcall	.+594    	; 0x17d8 <u8g_MicroDelay>
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	64 e0       	ldi	r22, 0x04	; 4
  u8g_10MicroDelay(); /* ST7920 commands: 72us */
    158a:	c8 01       	movw	r24, r16
    158c:	13 d1       	rcall	.+550    	; 0x17b4 <u8g_SetPILevel>
  u8g_10MicroDelay(); /* ST7920 commands: 72us */
    158e:	25 d1       	rcall	.+586    	; 0x17da <u8g_10MicroDelay>
    1590:	24 d1       	rcall	.+584    	; 0x17da <u8g_10MicroDelay>
}
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	08 95       	ret

0000159a <u8g_com_atmega_parallel_fn>:


uint8_t u8g_com_atmega_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	7c 01       	movw	r14, r24
    15aa:	c4 2f       	mov	r28, r20
    15ac:	89 01       	movw	r16, r18
  switch(msg)
    15ae:	86 2f       	mov	r24, r22
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	fc 01       	movw	r30, r24
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	e7 30       	cpi	r30, 0x07	; 7
    15b8:	f1 05       	cpc	r31, r1
    15ba:	08 f0       	brcs	.+2      	; 0x15be <u8g_com_atmega_parallel_fn+0x24>
    15bc:	86 c0       	rjmp	.+268    	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    15be:	88 27       	eor	r24, r24
    15c0:	ee 58       	subi	r30, 0x8E	; 142
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	8f 4f       	sbci	r24, 0xFF	; 255
    15c6:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__tablejump2__>
  {
    case U8G_COM_MSG_INIT:
      /* setup the RW pin as output and force it to low */
      u8g_SetPIOutput(u8g, U8G_PI_RW);
    15ca:	6d e0       	ldi	r22, 0x0D	; 13
    15cc:	c7 01       	movw	r24, r14
    15ce:	ea d0       	rcall	.+468    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPILevel(u8g, U8G_PI_RW, 0);
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	6d e0       	ldi	r22, 0x0D	; 13
    15d4:	c7 01       	movw	r24, r14
    15d6:	ee d0       	rcall	.+476    	; 0x17b4 <u8g_SetPILevel>

      u8g_SetPIOutput(u8g, U8G_PI_D0);
    15d8:	65 e0       	ldi	r22, 0x05	; 5
    15da:	c7 01       	movw	r24, r14
    15dc:	e3 d0       	rcall	.+454    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D1);
    15de:	66 e0       	ldi	r22, 0x06	; 6
    15e0:	c7 01       	movw	r24, r14
    15e2:	e0 d0       	rcall	.+448    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D2);
    15e4:	67 e0       	ldi	r22, 0x07	; 7
    15e6:	c7 01       	movw	r24, r14
    15e8:	dd d0       	rcall	.+442    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D3);
    15ea:	68 e0       	ldi	r22, 0x08	; 8
    15ec:	c7 01       	movw	r24, r14
    15ee:	da d0       	rcall	.+436    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D4);
    15f0:	69 e0       	ldi	r22, 0x09	; 9
    15f2:	c7 01       	movw	r24, r14
    15f4:	d7 d0       	rcall	.+430    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D5);
    15f6:	6a e0       	ldi	r22, 0x0A	; 10
    15f8:	c7 01       	movw	r24, r14
    15fa:	d4 d0       	rcall	.+424    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D6);
    15fc:	6b e0       	ldi	r22, 0x0B	; 11
    15fe:	c7 01       	movw	r24, r14
    1600:	d1 d0       	rcall	.+418    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D7);
    1602:	6c e0       	ldi	r22, 0x0C	; 12
    1604:	c7 01       	movw	r24, r14
    1606:	ce d0       	rcall	.+412    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_EN);
    1608:	64 e0       	ldi	r22, 0x04	; 4
    160a:	c7 01       	movw	r24, r14
    160c:	cb d0       	rcall	.+406    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS1);
    160e:	62 e0       	ldi	r22, 0x02	; 2
    1610:	c7 01       	movw	r24, r14
    1612:	c8 d0       	rcall	.+400    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS2);
    1614:	63 e0       	ldi	r22, 0x03	; 3
    1616:	c7 01       	movw	r24, r14
    1618:	c5 d0       	rcall	.+394    	; 0x17a4 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_DI);
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	c7 01       	movw	r24, r14
    161e:	c2 d0       	rcall	.+388    	; 0x17a4 <u8g_SetPIOutput>
    1620:	41 e0       	ldi	r20, 0x01	; 1
      u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    1622:	62 e0       	ldi	r22, 0x02	; 2
    1624:	c7 01       	movw	r24, r14
    1626:	c6 d0       	rcall	.+396    	; 0x17b4 <u8g_SetPILevel>
    1628:	41 e0       	ldi	r20, 0x01	; 1
      u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    162a:	63 e0       	ldi	r22, 0x03	; 3
    162c:	c7 01       	movw	r24, r14
    162e:	c2 d0       	rcall	.+388    	; 0x17b4 <u8g_SetPILevel>
    1630:	4c c0       	rjmp	.+152    	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    1632:	41 11       	cpse	r20, r1

      break;
    1634:	09 c0       	rjmp	.+18     	; 0x1648 <u8g_com_atmega_parallel_fn+0xae>
    case U8G_COM_MSG_STOP:
      break;
    case U8G_COM_MSG_CHIP_SELECT:
      if ( arg_val == 0 )
    1636:	41 e0       	ldi	r20, 0x01	; 1
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    1638:	62 e0       	ldi	r22, 0x02	; 2
    163a:	c7 01       	movw	r24, r14
    163c:	bb d0       	rcall	.+374    	; 0x17b4 <u8g_SetPILevel>
    163e:	41 e0       	ldi	r20, 0x01	; 1
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    1640:	63 e0       	ldi	r22, 0x03	; 3
    1642:	c7 01       	movw	r24, r14
    1644:	b7 d0       	rcall	.+366    	; 0x17b4 <u8g_SetPILevel>
    1646:	41 c0       	rjmp	.+130    	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    1648:	41 30       	cpi	r20, 0x01	; 1
      }
      else if ( arg_val == 1 )
    164a:	49 f4       	brne	.+18     	; 0x165e <u8g_com_atmega_parallel_fn+0xc4>
    164c:	40 e0       	ldi	r20, 0x00	; 0
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    164e:	62 e0       	ldi	r22, 0x02	; 2
    1650:	c7 01       	movw	r24, r14
    1652:	b0 d0       	rcall	.+352    	; 0x17b4 <u8g_SetPILevel>
    1654:	41 e0       	ldi	r20, 0x01	; 1
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    1656:	63 e0       	ldi	r22, 0x03	; 3
    1658:	c7 01       	movw	r24, r14
    165a:	ac d0       	rcall	.+344    	; 0x17b4 <u8g_SetPILevel>
    165c:	36 c0       	rjmp	.+108    	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
      }
      else if ( arg_val == 2 )
    165e:	42 30       	cpi	r20, 0x02	; 2
    1660:	49 f4       	brne	.+18     	; 0x1674 <u8g_com_atmega_parallel_fn+0xda>
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	62 e0       	ldi	r22, 0x02	; 2
    1666:	c7 01       	movw	r24, r14
    1668:	a5 d0       	rcall	.+330    	; 0x17b4 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	63 e0       	ldi	r22, 0x03	; 3
    166e:	c7 01       	movw	r24, r14
    1670:	a1 d0       	rcall	.+322    	; 0x17b4 <u8g_SetPILevel>
    1672:	2b c0       	rjmp	.+86     	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
      }
      else
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	c7 01       	movw	r24, r14
    167a:	9c d0       	rcall	.+312    	; 0x17b4 <u8g_SetPILevel>
    167c:	40 e0       	ldi	r20, 0x00	; 0
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    167e:	63 e0       	ldi	r22, 0x03	; 3
    1680:	c7 01       	movw	r24, r14
    1682:	98 d0       	rcall	.+304    	; 0x17b4 <u8g_SetPILevel>
    1684:	22 c0       	rjmp	.+68     	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    1686:	64 2f       	mov	r22, r20
      }
      break;
    case U8G_COM_MSG_WRITE_BYTE:
      u8g_com_atmega_parallel_write(u8g, arg_val);
    1688:	c7 01       	movw	r24, r14
    168a:	46 df       	rcall	.-372    	; 0x1518 <u8g_com_atmega_parallel_write>
    168c:	1e c0       	rjmp	.+60     	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    168e:	68 01       	movw	r12, r16
      break;
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, *ptr++);
    1692:	c8 1a       	sub	r12, r24
    1694:	d8 0a       	sbc	r13, r24
    1696:	f8 01       	movw	r30, r16
    1698:	60 81       	ld	r22, Z
    169a:	c7 01       	movw	r24, r14
    169c:	3d df       	rcall	.-390    	; 0x1518 <u8g_com_atmega_parallel_write>
    169e:	c1 50       	subi	r28, 0x01	; 1
          arg_val--;
    16a0:	86 01       	movw	r16, r12
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, *ptr++);
    16a2:	c1 11       	cpse	r28, r1
      u8g_com_atmega_parallel_write(u8g, arg_val);
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    16a4:	f4 cf       	rjmp	.-24     	; 0x168e <u8g_com_atmega_parallel_fn+0xf4>
    16a6:	11 c0       	rjmp	.+34     	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    16a8:	f8 01       	movw	r30, r16
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, u8g_pgm_read(ptr));
    16aa:	64 91       	lpm	r22, Z
    16ac:	c7 01       	movw	r24, r14
    16ae:	34 df       	rcall	.-408    	; 0x1518 <u8g_com_atmega_parallel_write>
    16b0:	0f 5f       	subi	r16, 0xFF	; 255
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
          ptr++;
    16b4:	c1 50       	subi	r28, 0x01	; 1
    16b6:	c1 11       	cpse	r28, r1
          arg_val--;
    16b8:	f7 cf       	rjmp	.-18     	; 0x16a8 <u8g_com_atmega_parallel_fn+0x10e>
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	c7 01       	movw	r24, r14
          arg_val--;
        }
      }
      break;
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_DI, arg_val);
    16c0:	79 d0       	rcall	.+242    	; 0x17b4 <u8g_SetPILevel>
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <u8g_com_atmega_parallel_fn+0x130>
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	c7 01       	movw	r24, r14
      break;
    16c8:	75 d0       	rcall	.+234    	; 0x17b4 <u8g_SetPILevel>
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	cf 91       	pop	r28
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
      break;
  }
  return 1;
}
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	08 95       	ret

000016dc <u8g_get_avr_io_ptr>:
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	1f 92       	push	r1
    16e2:	1f 92       	push	r1
{
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_pin_P, internal_pin_number>>3);
  if ( ((*tmp) & _BV(internal_pin_number&7))  != 0 )
    return 1;
  return 0;
}
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	68 0f       	add	r22, r24
    16f0:	79 1f       	adc	r23, r25
    16f2:	42 e0       	ldi	r20, 0x02	; 2
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	ce 01       	movw	r24, r28
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <memcpy_P>
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <u8g_Pin>:
    170c:	88 0f       	add	r24, r24
    170e:	88 0f       	add	r24, r24
    1710:	88 0f       	add	r24, r24
    1712:	86 0f       	add	r24, r22
    1714:	08 95       	ret

00001716 <u8g_SetPinOutput>:
    1716:	cf 93       	push	r28
    1718:	c8 2f       	mov	r28, r24
    171a:	68 2f       	mov	r22, r24
    171c:	66 95       	lsr	r22
    171e:	66 95       	lsr	r22
    1720:	66 95       	lsr	r22
    1722:	8c ee       	ldi	r24, 0xEC	; 236
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	da df       	rcall	.-76     	; 0x16dc <u8g_get_avr_io_ptr>
    1728:	fc 01       	movw	r30, r24
    172a:	40 81       	ld	r20, Z
    172c:	c7 70       	andi	r28, 0x07	; 7
    172e:	21 e0       	ldi	r18, 0x01	; 1
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <u8g_SetPinOutput+0x22>
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	ca 95       	dec	r28
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <u8g_SetPinOutput+0x1e>
    173c:	24 2b       	or	r18, r20
    173e:	20 83       	st	Z, r18
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <u8g_SetPinLevel>:
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	c8 2f       	mov	r28, r24
    174a:	d6 2f       	mov	r29, r22
    174c:	68 2f       	mov	r22, r24
    174e:	66 95       	lsr	r22
    1750:	66 95       	lsr	r22
    1752:	66 95       	lsr	r22
    1754:	8c ed       	ldi	r24, 0xDC	; 220
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	c1 df       	rcall	.-126    	; 0x16dc <u8g_get_avr_io_ptr>
    175a:	d1 11       	cpse	r29, r1
    175c:	11 c0       	rjmp	.+34     	; 0x1780 <u8g_SetPinLevel+0x3c>
    175e:	5f b7       	in	r21, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	fc 01       	movw	r30, r24
    1764:	40 81       	ld	r20, Z
    1766:	c7 70       	andi	r28, 0x07	; 7
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <u8g_SetPinLevel+0x2e>
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	ca 95       	dec	r28
    1774:	e2 f7       	brpl	.-8      	; 0x176e <u8g_SetPinLevel+0x2a>
    1776:	20 95       	com	r18
    1778:	24 23       	and	r18, r20
    177a:	20 83       	st	Z, r18
    177c:	5f bf       	out	0x3f, r21	; 63
    177e:	0f c0       	rjmp	.+30     	; 0x179e <u8g_SetPinLevel+0x5a>
    1780:	4f b7       	in	r20, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	fc 01       	movw	r30, r24
    1786:	50 81       	ld	r21, Z
    1788:	c7 70       	andi	r28, 0x07	; 7
    178a:	21 e0       	ldi	r18, 0x01	; 1
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <u8g_SetPinLevel+0x50>
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	ca 95       	dec	r28
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <u8g_SetPinLevel+0x4c>
    1798:	25 2b       	or	r18, r21
    179a:	20 83       	st	Z, r18
    179c:	4f bf       	out	0x3f, r20	; 63
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <u8g_SetPIOutput>:
#if defined(U8G_WITH_PINLIST)

void u8g_SetPIOutput(u8g_t *u8g, uint8_t pi)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    17a4:	86 0f       	add	r24, r22
    17a6:	91 1d       	adc	r25, r1
    17a8:	fc 01       	movw	r30, r24
    17aa:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    17ac:	8f 3f       	cpi	r24, 0xFF	; 255
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <u8g_SetPIOutput+0xe>
    u8g_SetPinOutput(pin);
    17b0:	b2 cf       	rjmp	.-156    	; 0x1716 <u8g_SetPinOutput>
    17b2:	08 95       	ret

000017b4 <u8g_SetPILevel>:
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    17b4:	86 0f       	add	r24, r22
    17b6:	91 1d       	adc	r25, r1
    17b8:	fc 01       	movw	r30, r24
    17ba:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    17bc:	8f 3f       	cpi	r24, 0xFF	; 255
    17be:	11 f0       	breq	.+4      	; 0x17c4 <u8g_SetPILevel+0x10>
    17c0:	64 2f       	mov	r22, r20
    u8g_SetPinLevel(pin, level);
    17c2:	c0 cf       	rjmp	.-128    	; 0x1744 <u8g_SetPinLevel>
    17c4:	08 95       	ret

000017c6 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <u8g_Delay+0xc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c8:	e8 ef       	ldi	r30, 0xF8	; 248
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	31 97       	sbiw	r30, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <u8g_Delay+0x6>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    17d0:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	c9 f7       	brne	.-14     	; 0x17c8 <u8g_Delay+0x2>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
  }
}
    17d6:	08 95       	ret

000017d8 <u8g_MicroDelay>:

/* delay by one micro second */
void u8g_MicroDelay(void)
{
    17d8:	08 95       	ret

000017da <u8g_10MicroDelay>:
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <u8g_10MicroDelay+0x4>
    17e2:	08 95       	ret

000017e4 <u8g_dev_ks0108_128x64_fn>:
  U8G_ESC_END                /* end of sequence */
};


uint8_t u8g_dev_ks0108_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    17e4:	af 92       	push	r10
    17e6:	bf 92       	push	r11
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	8c 01       	movw	r16, r24
    17f8:	eb 01       	movw	r28, r22
    17fa:	f4 2e       	mov	r15, r20
    17fc:	69 01       	movw	r12, r18
  
  switch(msg)
    17fe:	8a e0       	ldi	r24, 0x0A	; 10
    1800:	48 17       	cp	r20, r24
    1802:	21 f0       	breq	.+8      	; 0x180c <u8g_dev_ks0108_128x64_fn+0x28>
    1804:	e5 e1       	ldi	r30, 0x15	; 21
    1806:	4e 17       	cp	r20, r30
    1808:	51 f0       	breq	.+20     	; 0x181e <u8g_dev_ks0108_128x64_fn+0x3a>
    180a:	4e c0       	rjmp	.+156    	; 0x18a8 <u8g_dev_ks0108_128x64_fn+0xc4>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
    180c:	4f ef       	ldi	r20, 0xFF	; 255
    180e:	c8 01       	movw	r24, r16
    1810:	d2 dd       	rcall	.-1116   	; 0x13b6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ks0108_128x64_init_seq);
    1812:	4c ef       	ldi	r20, 0xFC	; 252
    1814:	51 e0       	ldi	r21, 0x01	; 1
    1816:	be 01       	movw	r22, r28
    1818:	c8 01       	movw	r24, r16
    181a:	13 de       	rcall	.-986    	; 0x1442 <u8g_WriteEscSeqP>
      break;
    181c:	45 c0       	rjmp	.+138    	; 0x18a8 <u8g_dev_ks0108_128x64_fn+0xc4>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    181e:	aa 80       	ldd	r10, Y+2	; 0x02
    1820:	bb 80       	ldd	r11, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	c8 01       	movw	r24, r16
    1826:	f1 dd       	rcall	.-1054   	; 0x140a <u8g_SetAddress>
        u8g_SetChipSelect(u8g, dev, 2);
    1828:	42 e0       	ldi	r20, 0x02	; 2
    182a:	be 01       	movw	r22, r28
    182c:	c8 01       	movw	r24, r16
    182e:	cd dd       	rcall	.-1126   	; 0x13ca <u8g_SetChipSelect>
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    1830:	f5 01       	movw	r30, r10
    1832:	44 81       	ldd	r20, Z+4	; 0x04
    1834:	48 6b       	ori	r20, 0xB8	; 184
    1836:	be 01       	movw	r22, r28
    1838:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    183a:	f1 dd       	rcall	.-1054   	; 0x141e <u8g_WriteByte>
    183c:	40 e4       	ldi	r20, 0x40	; 64
    183e:	be 01       	movw	r22, r28
    1840:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1842:	ed dd       	rcall	.-1062   	; 0x141e <u8g_WriteByte>
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	be 01       	movw	r22, r28
    1848:	c8 01       	movw	r24, r16
        u8g_WriteSequence(u8g, dev, 64, pb->buf);
    184a:	df dd       	rcall	.-1090   	; 0x140a <u8g_SetAddress>
    184c:	f5 01       	movw	r30, r10
    184e:	26 81       	ldd	r18, Z+6	; 0x06
    1850:	37 81       	ldd	r19, Z+7	; 0x07
    1852:	40 e4       	ldi	r20, 0x40	; 64
    1854:	be 01       	movw	r22, r28
    1856:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
    1858:	ec dd       	rcall	.-1064   	; 0x1432 <u8g_WriteSequence>
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	be 01       	movw	r22, r28
    185e:	c8 01       	movw	r24, r16
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
    1860:	b4 dd       	rcall	.-1176   	; 0x13ca <u8g_SetChipSelect>
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	be 01       	movw	r22, r28
    1866:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 1);
    1868:	d0 dd       	rcall	.-1120   	; 0x140a <u8g_SetAddress>
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	be 01       	movw	r22, r28
    186e:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    1870:	ac dd       	rcall	.-1192   	; 0x13ca <u8g_SetChipSelect>
    1872:	f5 01       	movw	r30, r10
    1874:	44 81       	ldd	r20, Z+4	; 0x04
    1876:	48 6b       	ori	r20, 0xB8	; 184
    1878:	be 01       	movw	r22, r28
    187a:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    187c:	d0 dd       	rcall	.-1120   	; 0x141e <u8g_WriteByte>
    187e:	40 e4       	ldi	r20, 0x40	; 64
    1880:	be 01       	movw	r22, r28
    1882:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1884:	cc dd       	rcall	.-1128   	; 0x141e <u8g_WriteByte>
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	be 01       	movw	r22, r28
    188a:	c8 01       	movw	r24, r16
        u8g_WriteSequence(u8g, dev, 64, 64+(uint8_t *)pb->buf);
    188c:	be dd       	rcall	.-1156   	; 0x140a <u8g_SetAddress>
    188e:	f5 01       	movw	r30, r10
    1890:	26 81       	ldd	r18, Z+6	; 0x06
    1892:	37 81       	ldd	r19, Z+7	; 0x07
    1894:	20 5c       	subi	r18, 0xC0	; 192
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	40 e4       	ldi	r20, 0x40	; 64
    189a:	be 01       	movw	r22, r28
    189c:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
    189e:	c9 dd       	rcall	.-1134   	; 0x1432 <u8g_WriteSequence>
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	be 01       	movw	r22, r28
    18a4:	c8 01       	movw	r24, r16
    18a6:	91 dd       	rcall	.-1246   	; 0x13ca <u8g_SetChipSelect>
        
      }
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    18a8:	96 01       	movw	r18, r12
    18aa:	4f 2d       	mov	r20, r15
    18ac:	be 01       	movw	r22, r28
    18ae:	c8 01       	movw	r24, r16
    18b0:	94 d4       	rcall	.+2344   	; 0x21da <u8g_dev_pb8v1_base_fn>
    18b2:	df 91       	pop	r29
}
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	08 95       	ret

000018c6 <u8g_font_get_byte>:
    18c6:	86 0f       	add	r24, r22
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    18c8:	91 1d       	adc	r25, r1
    18ca:	fc 01       	movw	r30, r24
    18cc:	84 91       	lpm	r24, Z
    18ce:	08 95       	ret

000018d0 <u8g_font_get_word>:
    18d0:	fc 01       	movw	r30, r24
    18d2:	e6 0f       	add	r30, r22
    18d4:	f1 1d       	adc	r31, r1
    18d6:	84 91       	lpm	r24, Z
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	31 96       	adiw	r30, 0x01	; 1
    18dc:	98 2f       	mov	r25, r24
    18de:	88 27       	eor	r24, r24
    18e0:	e4 91       	lpm	r30, Z
    18e2:	8e 0f       	add	r24, r30
    18e4:	91 1d       	adc	r25, r1
    18e6:	08 95       	ret

000018e8 <u8g_font_GetFormat>:
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	ed cf       	rjmp	.-38     	; 0x18c6 <u8g_font_get_byte>
    18ec:	08 95       	ret

000018ee <u8g_font_GetFontGlyphStructureSize>:
    18ee:	fc df       	rcall	.-8      	; 0x18e8 <u8g_font_GetFormat>
    18f0:	88 23       	and	r24, r24
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <u8g_font_GetFontGlyphStructureSize+0xa>
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	11 f4       	brne	.+4      	; 0x18fc <u8g_font_GetFontGlyphStructureSize+0xe>
    18f8:	86 e0       	ldi	r24, 0x06	; 6
    18fa:	08 95       	ret
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	08 95       	ret

00001900 <u8g_font_GetGlyphDataStart>:
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	eb 01       	movw	r28, r22
    1906:	f3 df       	rcall	.-26     	; 0x18ee <u8g_font_GetFontGlyphStructureSize>
    1908:	9e 01       	movw	r18, r28
    190a:	28 0f       	add	r18, r24
    190c:	31 1d       	adc	r19, r1
    190e:	c9 01       	movw	r24, r18
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <u8g_CopyGlyphDataToCache>:
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	8c 01       	movw	r16, r24
    1920:	eb 01       	movw	r28, r22
    1922:	dc 01       	movw	r26, r24
    1924:	14 96       	adiw	r26, 0x04	; 4
    1926:	8d 91       	ld	r24, X+
    1928:	9c 91       	ld	r25, X
    192a:	15 97       	sbiw	r26, 0x05	; 5
    192c:	dd df       	rcall	.-70     	; 0x18e8 <u8g_font_GetFormat>
    192e:	88 23       	and	r24, r24
    1930:	11 f0       	breq	.+4      	; 0x1936 <u8g_CopyGlyphDataToCache+0x20>
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	e9 f4       	brne	.+58     	; 0x1970 <u8g_CopyGlyphDataToCache+0x5a>
    1936:	fe 01       	movw	r30, r28
    1938:	84 91       	lpm	r24, Z
    193a:	d8 01       	movw	r26, r16
    193c:	53 96       	adiw	r26, 0x13	; 19
    193e:	8c 93       	st	X, r24
    1940:	53 97       	sbiw	r26, 0x13	; 19
    1942:	31 96       	adiw	r30, 0x01	; 1
    1944:	e4 91       	lpm	r30, Z
    1946:	54 96       	adiw	r26, 0x14	; 20
    1948:	ec 93       	st	X, r30
    194a:	54 97       	sbiw	r26, 0x14	; 20
    194c:	fe 01       	movw	r30, r28
    194e:	33 96       	adiw	r30, 0x03	; 3
    1950:	e4 91       	lpm	r30, Z
    1952:	50 96       	adiw	r26, 0x10	; 16
    1954:	ec 93       	st	X, r30
    1956:	50 97       	sbiw	r26, 0x10	; 16
    1958:	fe 01       	movw	r30, r28
    195a:	34 96       	adiw	r30, 0x04	; 4
    195c:	e4 91       	lpm	r30, Z
    195e:	51 96       	adiw	r26, 0x11	; 17
    1960:	ec 93       	st	X, r30
    1962:	51 97       	sbiw	r26, 0x11	; 17
    1964:	fe 01       	movw	r30, r28
    1966:	35 96       	adiw	r30, 0x05	; 5
    1968:	e4 91       	lpm	r30, Z
    196a:	52 96       	adiw	r26, 0x12	; 18
    196c:	ec 93       	st	X, r30
    196e:	21 c0       	rjmp	.+66     	; 0x19b2 <u8g_CopyGlyphDataToCache+0x9c>
    1970:	fe 01       	movw	r30, r28
    1972:	84 91       	lpm	r24, Z
    1974:	98 2f       	mov	r25, r24
    1976:	9f 70       	andi	r25, 0x0F	; 15
    1978:	92 50       	subi	r25, 0x02	; 2
    197a:	d8 01       	movw	r26, r16
    197c:	52 96       	adiw	r26, 0x12	; 18
    197e:	9c 93       	st	X, r25
    1980:	52 97       	sbiw	r26, 0x12	; 18
    1982:	82 95       	swap	r24
    1984:	8f 70       	andi	r24, 0x0F	; 15
    1986:	51 96       	adiw	r26, 0x11	; 17
    1988:	8c 93       	st	X, r24
    198a:	51 97       	sbiw	r26, 0x11	; 17
    198c:	31 96       	adiw	r30, 0x01	; 1
    198e:	e4 91       	lpm	r30, Z
    1990:	8e 2f       	mov	r24, r30
    1992:	8f 70       	andi	r24, 0x0F	; 15
    1994:	54 96       	adiw	r26, 0x14	; 20
    1996:	8c 93       	st	X, r24
    1998:	54 97       	sbiw	r26, 0x14	; 20
    199a:	e2 95       	swap	r30
    199c:	ef 70       	andi	r30, 0x0F	; 15
    199e:	53 96       	adiw	r26, 0x13	; 19
    19a0:	ec 93       	st	X, r30
    19a2:	53 97       	sbiw	r26, 0x13	; 19
    19a4:	fe 01       	movw	r30, r28
    19a6:	32 96       	adiw	r30, 0x02	; 2
    19a8:	e4 91       	lpm	r30, Z
    19aa:	e2 95       	swap	r30
    19ac:	ef 70       	andi	r30, 0x0F	; 15
    19ae:	50 96       	adiw	r26, 0x10	; 16
    19b0:	ec 93       	st	X, r30
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	08 95       	ret

000019bc <u8g_FillEmptyGlyphCache>:
    19bc:	fc 01       	movw	r30, r24
    19be:	10 8a       	std	Z+16, r1	; 0x10
    19c0:	13 8a       	std	Z+19, r1	; 0x13
    19c2:	14 8a       	std	Z+20, r1	; 0x14
    19c4:	11 8a       	std	Z+17, r1	; 0x11
    19c6:	12 8a       	std	Z+18, r1	; 0x12
    19c8:	08 95       	ret

000019ca <u8g_font_calc_vref_font>:
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	08 95       	ret

000019ce <u8g_font_GetCapitalAHeight>:
    19ce:	65 e0       	ldi	r22, 0x05	; 5
    19d0:	7a cf       	rjmp	.-268    	; 0x18c6 <u8g_font_get_byte>
    19d2:	08 95       	ret

000019d4 <u8g_font_GetEncoding65Pos>:
    19d4:	66 e0       	ldi	r22, 0x06	; 6
    19d6:	7c cf       	rjmp	.-264    	; 0x18d0 <u8g_font_get_word>
    19d8:	08 95       	ret

000019da <u8g_font_GetEncoding97Pos>:
    19da:	68 e0       	ldi	r22, 0x08	; 8
    19dc:	79 cf       	rjmp	.-270    	; 0x18d0 <u8g_font_get_word>
    19de:	08 95       	ret

000019e0 <u8g_font_GetFontStartEncoding>:
    19e0:	6a e0       	ldi	r22, 0x0A	; 10
    19e2:	71 cf       	rjmp	.-286    	; 0x18c6 <u8g_font_get_byte>
    19e4:	08 95       	ret

000019e6 <u8g_font_GetFontEndEncoding>:
    19e6:	6b e0       	ldi	r22, 0x0B	; 11
    19e8:	6e cf       	rjmp	.-292    	; 0x18c6 <u8g_font_get_byte>
    19ea:	08 95       	ret

000019ec <u8g_font_GetLowerGDescent>:
    19ec:	6c e0       	ldi	r22, 0x0C	; 12
    19ee:	6b cf       	rjmp	.-298    	; 0x18c6 <u8g_font_get_byte>
    19f0:	08 95       	ret

000019f2 <u8g_font_GetFontAscent>:
    19f2:	6d e0       	ldi	r22, 0x0D	; 13
    19f4:	68 cf       	rjmp	.-304    	; 0x18c6 <u8g_font_get_byte>
    19f6:	08 95       	ret

000019f8 <u8g_font_GetFontDescent>:
    19f8:	6e e0       	ldi	r22, 0x0E	; 14
    19fa:	65 cf       	rjmp	.-310    	; 0x18c6 <u8g_font_get_byte>
    19fc:	08 95       	ret

000019fe <u8g_font_GetFontXAscent>:
    19fe:	6f e0       	ldi	r22, 0x0F	; 15
    1a00:	62 cf       	rjmp	.-316    	; 0x18c6 <u8g_font_get_byte>
    1a02:	08 95       	ret

00001a04 <u8g_font_GetFontXDescent>:
    1a04:	60 e1       	ldi	r22, 0x10	; 16
    1a06:	5f cf       	rjmp	.-322    	; 0x18c6 <u8g_font_get_byte>
    1a08:	08 95       	ret

00001a0a <u8g_GetGlyph>:
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	7c 01       	movw	r14, r24
    1a1e:	d6 2e       	mov	r13, r22
    1a20:	fc 01       	movw	r30, r24
    1a22:	c4 81       	ldd	r28, Z+4	; 0x04
    1a24:	d5 81       	ldd	r29, Z+5	; 0x05
    1a26:	ce 01       	movw	r24, r28
    1a28:	5f df       	rcall	.-322    	; 0x18e8 <u8g_font_GetFormat>
    1a2a:	18 2f       	mov	r17, r24
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	84 81       	ldd	r24, Z+4	; 0x04
    1a30:	95 81       	ldd	r25, Z+5	; 0x05
    1a32:	5d df       	rcall	.-326    	; 0x18ee <u8g_font_GetFontGlyphStructureSize>
    1a34:	c8 2e       	mov	r12, r24
    1a36:	11 30       	cpi	r17, 0x01	; 1
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <u8g_GetGlyph+0x36>
    1a3a:	bb 24       	eor	r11, r11
    1a3c:	ba 94       	dec	r11
    1a3e:	04 c0       	rjmp	.+8      	; 0x1a48 <u8g_GetGlyph+0x3e>
    1a40:	0f 2e       	mov	r0, r31
    1a42:	ff e0       	ldi	r31, 0x0F	; 15
    1a44:	bf 2e       	mov	r11, r31
    1a46:	f0 2d       	mov	r31, r0
    1a48:	f7 01       	movw	r30, r14
    1a4a:	84 81       	ldd	r24, Z+4	; 0x04
    1a4c:	95 81       	ldd	r25, Z+5	; 0x05
    1a4e:	c8 df       	rcall	.-112    	; 0x19e0 <u8g_font_GetFontStartEncoding>
    1a50:	18 2f       	mov	r17, r24
    1a52:	f7 01       	movw	r30, r14
    1a54:	84 81       	ldd	r24, Z+4	; 0x04
    1a56:	95 81       	ldd	r25, Z+5	; 0x05
    1a58:	c6 df       	rcall	.-116    	; 0x19e6 <u8g_font_GetFontEndEncoding>
    1a5a:	08 2f       	mov	r16, r24
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	84 81       	ldd	r24, Z+4	; 0x04
    1a60:	95 81       	ldd	r25, Z+5	; 0x05
    1a62:	bb df       	rcall	.-138    	; 0x19da <u8g_font_GetEncoding97Pos>
    1a64:	f0 e6       	ldi	r31, 0x60	; 96
    1a66:	fd 15       	cp	r31, r13
    1a68:	30 f4       	brcc	.+12     	; 0x1a76 <u8g_GetGlyph+0x6c>
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <u8g_GetGlyph+0x6c>
    1a6e:	c8 0f       	add	r28, r24
    1a70:	d9 1f       	adc	r29, r25
    1a72:	11 e6       	ldi	r17, 0x61	; 97
    1a74:	0e c0       	rjmp	.+28     	; 0x1a92 <u8g_GetGlyph+0x88>
    1a76:	f7 01       	movw	r30, r14
    1a78:	84 81       	ldd	r24, Z+4	; 0x04
    1a7a:	95 81       	ldd	r25, Z+5	; 0x05
    1a7c:	ab df       	rcall	.-170    	; 0x19d4 <u8g_font_GetEncoding65Pos>
    1a7e:	f0 e4       	ldi	r31, 0x40	; 64
    1a80:	fd 15       	cp	r31, r13
    1a82:	30 f4       	brcc	.+12     	; 0x1a90 <u8g_GetGlyph+0x86>
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <u8g_GetGlyph+0x86>
    1a88:	c8 0f       	add	r28, r24
    1a8a:	d9 1f       	adc	r29, r25
    1a8c:	11 e4       	ldi	r17, 0x41	; 65
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <u8g_GetGlyph+0x88>
    1a90:	61 96       	adiw	r28, 0x11	; 17
    1a92:	0d 15       	cp	r16, r13
    1a94:	28 f4       	brcc	.+10     	; 0x1aa0 <u8g_GetGlyph+0x96>
    1a96:	c7 01       	movw	r24, r14
    1a98:	91 df       	rcall	.-222    	; 0x19bc <u8g_FillEmptyGlyphCache>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	22 c0       	rjmp	.+68     	; 0x1ae4 <u8g_GetGlyph+0xda>
    1aa0:	01 17       	cp	r16, r17
    1aa2:	e0 f0       	brcs	.+56     	; 0x1adc <u8g_GetGlyph+0xd2>
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	84 91       	lpm	r24, Z
    1aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aaa:	11 f4       	brne	.+4      	; 0x1ab0 <u8g_GetGlyph+0xa6>
    1aac:	21 96       	adiw	r28, 0x01	; 1
    1aae:	12 c0       	rjmp	.+36     	; 0x1ad4 <u8g_GetGlyph+0xca>
    1ab0:	1d 11       	cpse	r17, r13
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <u8g_GetGlyph+0xb6>
    1ab4:	be 01       	movw	r22, r28
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	2e df       	rcall	.-420    	; 0x1916 <u8g_CopyGlyphDataToCache>
    1aba:	8c 2f       	mov	r24, r28
    1abc:	9d 2f       	mov	r25, r29
    1abe:	12 c0       	rjmp	.+36     	; 0x1ae4 <u8g_GetGlyph+0xda>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	32 96       	adiw	r30, 0x02	; 2
    1ac4:	e4 91       	lpm	r30, Z
    1ac6:	eb 21       	and	r30, r11
    1ac8:	8c 2d       	mov	r24, r12
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	8e 0f       	add	r24, r30
    1ace:	91 1d       	adc	r25, r1
    1ad0:	c8 0f       	add	r28, r24
    1ad2:	d9 1f       	adc	r29, r25
    1ad4:	10 17       	cp	r17, r16
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <u8g_GetGlyph+0xd2>
    1ad8:	1f 5f       	subi	r17, 0xFF	; 255
    1ada:	e4 cf       	rjmp	.-56     	; 0x1aa4 <u8g_GetGlyph+0x9a>
    1adc:	c7 01       	movw	r24, r14
    1ade:	6e df       	rcall	.-292    	; 0x19bc <u8g_FillEmptyGlyphCache>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	bf 90       	pop	r11
    1af6:	08 95       	ret

00001af8 <u8g_draw_glyph>:
    1af8:	8f 92       	push	r8
    1afa:	9f 92       	push	r9
    1afc:	af 92       	push	r10
    1afe:	bf 92       	push	r11
    1b00:	cf 92       	push	r12
    1b02:	df 92       	push	r13
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	6c 01       	movw	r12, r24
    1b12:	16 2f       	mov	r17, r22
    1b14:	c4 2f       	mov	r28, r20
    1b16:	62 2f       	mov	r22, r18
    1b18:	78 df       	rcall	.-272    	; 0x1a0a <u8g_GetGlyph>
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <u8g_draw_glyph+0x28>
    1b1e:	3b c0       	rjmp	.+118    	; 0x1b96 <u8g_draw_glyph+0x9e>
    1b20:	bc 01       	movw	r22, r24
    1b22:	f6 01       	movw	r30, r12
    1b24:	84 81       	ldd	r24, Z+4	; 0x04
    1b26:	95 81       	ldd	r25, Z+5	; 0x05
    1b28:	eb de       	rcall	.-554    	; 0x1900 <u8g_font_GetGlyphDataStart>
    1b2a:	7c 01       	movw	r14, r24
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	d3 89       	ldd	r29, Z+19	; 0x13
    1b30:	94 88       	ldd	r9, Z+20	; 0x14
    1b32:	a1 88       	ldd	r10, Z+17	; 0x11
    1b34:	a1 0e       	add	r10, r17
    1b36:	82 89       	ldd	r24, Z+18	; 0x12
    1b38:	1c 2f       	mov	r17, r28
    1b3a:	18 1b       	sub	r17, r24
    1b3c:	11 50       	subi	r17, 0x01	; 1
    1b3e:	19 19       	sub	r17, r9
    1b40:	1f 5f       	subi	r17, 0xFF	; 255
    1b42:	09 2d       	mov	r16, r9
    1b44:	2d 2f       	mov	r18, r29
    1b46:	41 2f       	mov	r20, r17
    1b48:	6a 2d       	mov	r22, r10
    1b4a:	c6 01       	movw	r24, r12
    1b4c:	fc db       	rcall	.-2056   	; 0x1346 <u8g_IsBBXIntersection>
    1b4e:	81 11       	cpse	r24, r1
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <u8g_draw_glyph+0x60>
    1b52:	f6 01       	movw	r30, r12
    1b54:	80 89       	ldd	r24, Z+16	; 0x10
    1b56:	20 c0       	rjmp	.+64     	; 0x1b98 <u8g_draw_glyph+0xa0>
    1b58:	d9 5f       	subi	r29, 0xF9	; 249
    1b5a:	bd 2e       	mov	r11, r29
    1b5c:	b6 94       	lsr	r11
    1b5e:	b6 94       	lsr	r11
    1b60:	b6 94       	lsr	r11
    1b62:	81 2c       	mov	r8, r1
    1b64:	13 c0       	rjmp	.+38     	; 0x1b8c <u8g_draw_glyph+0x94>
    1b66:	f7 01       	movw	r30, r14
    1b68:	04 91       	lpm	r16, Z
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	41 2f       	mov	r20, r17
    1b6e:	6d 2f       	mov	r22, r29
    1b70:	c6 01       	movw	r24, r12
    1b72:	eb d1       	rcall	.+982    	; 0x1f4a <u8g_Draw8Pixel>
    1b74:	ff ef       	ldi	r31, 0xFF	; 255
    1b76:	ef 1a       	sub	r14, r31
    1b78:	ff 0a       	sbc	r15, r31
    1b7a:	d8 5f       	subi	r29, 0xF8	; 248
    1b7c:	cf 5f       	subi	r28, 0xFF	; 255
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <u8g_draw_glyph+0x8c>
    1b80:	da 2d       	mov	r29, r10
    1b82:	c0 e0       	ldi	r28, 0x00	; 0
    1b84:	cb 15       	cp	r28, r11
    1b86:	78 f3       	brcs	.-34     	; 0x1b66 <u8g_draw_glyph+0x6e>
    1b88:	1f 5f       	subi	r17, 0xFF	; 255
    1b8a:	83 94       	inc	r8
    1b8c:	89 14       	cp	r8, r9
    1b8e:	c0 f3       	brcs	.-16     	; 0x1b80 <u8g_draw_glyph+0x88>
    1b90:	f6 01       	movw	r30, r12
    1b92:	80 89       	ldd	r24, Z+16	; 0x10
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <u8g_draw_glyph+0xa0>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	bf 90       	pop	r11
    1baa:	af 90       	pop	r10
    1bac:	9f 90       	pop	r9
    1bae:	8f 90       	pop	r8
    1bb0:	08 95       	ret

00001bb2 <u8g_DrawStr>:
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	6c 01       	movw	r12, r24
    1bc2:	16 2f       	mov	r17, r22
    1bc4:	f4 2e       	mov	r15, r20
    1bc6:	e9 01       	movw	r28, r18
    1bc8:	dc 01       	movw	r26, r24
    1bca:	55 96       	adiw	r26, 0x15	; 21
    1bcc:	ed 91       	ld	r30, X+
    1bce:	fc 91       	ld	r31, X
    1bd0:	56 97       	sbiw	r26, 0x16	; 22
    1bd2:	19 95       	eicall
    1bd4:	f8 0e       	add	r15, r24
    1bd6:	00 e0       	ldi	r16, 0x00	; 0
    1bd8:	07 c0       	rjmp	.+14     	; 0x1be8 <u8g_DrawStr+0x36>
    1bda:	4f 2d       	mov	r20, r15
    1bdc:	61 2f       	mov	r22, r17
    1bde:	c6 01       	movw	r24, r12
    1be0:	8b df       	rcall	.-234    	; 0x1af8 <u8g_draw_glyph>
    1be2:	18 0f       	add	r17, r24
    1be4:	08 0f       	add	r16, r24
    1be6:	21 96       	adiw	r28, 0x01	; 1
    1be8:	28 81       	ld	r18, Y
    1bea:	21 11       	cpse	r18, r1
    1bec:	f6 cf       	rjmp	.-20     	; 0x1bda <u8g_DrawStr+0x28>
    1bee:	80 2f       	mov	r24, r16
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	ff 90       	pop	r15
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	08 95       	ret

00001c00 <u8g_UpdateRefHeight>:
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	99 f1       	breq	.+102    	; 0x1c74 <u8g_UpdateRefHeight+0x74>
    1c0e:	2f 89       	ldd	r18, Y+23	; 0x17
    1c10:	21 11       	cpse	r18, r1
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <u8g_UpdateRefHeight+0x22>
    1c14:	dc de       	rcall	.-584    	; 0x19ce <u8g_font_GetCapitalAHeight>
    1c16:	88 8f       	std	Y+24, r24	; 0x18
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	e7 de       	rcall	.-562    	; 0x19ec <u8g_font_GetLowerGDescent>
    1c1e:	89 8f       	std	Y+25, r24	; 0x19
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <u8g_UpdateRefHeight+0x40>
    1c22:	21 30       	cpi	r18, 0x01	; 1
    1c24:	39 f4       	brne	.+14     	; 0x1c34 <u8g_UpdateRefHeight+0x34>
    1c26:	eb de       	rcall	.-554    	; 0x19fe <u8g_font_GetFontXAscent>
    1c28:	88 8f       	std	Y+24, r24	; 0x18
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	ea de       	rcall	.-556    	; 0x1a04 <u8g_font_GetFontXDescent>
    1c30:	89 8f       	std	Y+25, r24	; 0x19
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <u8g_UpdateRefHeight+0x40>
    1c34:	de de       	rcall	.-580    	; 0x19f2 <u8g_font_GetFontAscent>
    1c36:	88 8f       	std	Y+24, r24	; 0x18
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	dd de       	rcall	.-582    	; 0x19f8 <u8g_font_GetFontDescent>
    1c3e:	89 8f       	std	Y+25, r24	; 0x19
    1c40:	88 8d       	ldd	r24, Y+24	; 0x18
    1c42:	29 8d       	ldd	r18, Y+25	; 0x19
    1c44:	08 2e       	mov	r0, r24
    1c46:	00 0c       	add	r0, r0
    1c48:	99 0b       	sbc	r25, r25
    1c4a:	82 1b       	sub	r24, r18
    1c4c:	91 09       	sbc	r25, r1
    1c4e:	27 fd       	sbrc	r18, 7
    1c50:	93 95       	inc	r25
    1c52:	9c 01       	movw	r18, r24
    1c54:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1c56:	40 34       	cpi	r20, 0x40	; 64
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <u8g_UpdateRefHeight+0x72>
    1c5a:	84 9f       	mul	r24, r20
    1c5c:	90 01       	movw	r18, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	00 24       	eor	r0, r0
    1c62:	22 0f       	add	r18, r18
    1c64:	33 1f       	adc	r19, r19
    1c66:	00 1c       	adc	r0, r0
    1c68:	22 0f       	add	r18, r18
    1c6a:	33 1f       	adc	r19, r19
    1c6c:	00 1c       	adc	r0, r0
    1c6e:	23 2f       	mov	r18, r19
    1c70:	30 2d       	mov	r19, r0
    1c72:	2b 8f       	std	Y+27, r18	; 0x1b
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	08 95       	ret

00001c7a <u8g_SetFontPosBaseline>:
    1c7a:	25 ee       	ldi	r18, 0xE5	; 229
    1c7c:	3c e0       	ldi	r19, 0x0C	; 12
    1c7e:	fc 01       	movw	r30, r24
    1c80:	36 8b       	std	Z+22, r19	; 0x16
    1c82:	25 8b       	std	Z+21, r18	; 0x15
    1c84:	08 95       	ret

00001c86 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
  if ( u8g->font != font )
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	24 81       	ldd	r18, Z+4	; 0x04
    1c8e:	35 81       	ldd	r19, Z+5	; 0x05
    1c90:	26 17       	cp	r18, r22
    1c92:	37 07       	cpc	r19, r23
    1c94:	31 f0       	breq	.+12     	; 0x1ca2 <u8g_SetFont+0x1c>
    1c96:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    1c98:	75 83       	std	Z+5, r23	; 0x05
    1c9a:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    1c9c:	b1 df       	rcall	.-158    	; 0x1c00 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	ec df       	rcall	.-40     	; 0x1c7a <u8g_SetFontPosBaseline>
  }
}
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <u8g_DrawLine>:
*/

#include "u8g.h"

void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	5c 01       	movw	r10, r24
    1cbe:	c6 2f       	mov	r28, r22
    1cc0:	14 2f       	mov	r17, r20
    1cc2:	f2 2e       	mov	r15, r18

  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    1cc4:	26 17       	cp	r18, r22
    1cc6:	18 f4       	brcc	.+6      	; 0x1cce <u8g_DrawLine+0x26>
    1cc8:	e6 2e       	mov	r14, r22
    1cca:	e2 1a       	sub	r14, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <u8g_DrawLine+0x2a>
    1cce:	e2 2e       	mov	r14, r18
    1cd0:	e6 1a       	sub	r14, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    1cd2:	01 17       	cp	r16, r17
    1cd4:	18 f4       	brcc	.+6      	; 0x1cdc <u8g_DrawLine+0x34>
    1cd6:	c1 2e       	mov	r12, r17
    1cd8:	c0 1a       	sub	r12, r16
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <u8g_DrawLine+0x38>
    1cdc:	c0 2e       	mov	r12, r16
    1cde:	c1 1a       	sub	r12, r17

  if ( dy > dx ) 
    1ce0:	ec 14       	cp	r14, r12
    1ce2:	28 f0       	brcs	.+10     	; 0x1cee <u8g_DrawLine+0x46>
    1ce4:	8c 2d       	mov	r24, r12
    1ce6:	ce 2c       	mov	r12, r14
    1ce8:	e8 2e       	mov	r14, r24
  u8g_uint_t x,y;
  u8g_uint_t dx, dy;
  u8g_int_t err;
  u8g_int_t ystep;

  uint8_t swapxy = 0;
    1cea:	d1 2c       	mov	r13, r1
    1cec:	08 c0       	rjmp	.+16     	; 0x1cfe <u8g_DrawLine+0x56>
    1cee:	8f 2d       	mov	r24, r15
  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    1cf0:	f0 2e       	mov	r15, r16
    1cf2:	08 2f       	mov	r16, r24
    1cf4:	8c 2f       	mov	r24, r28

  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    1cf6:	c1 2f       	mov	r28, r17
    1cf8:	18 2f       	mov	r17, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
    1cfa:	dd 24       	eor	r13, r13
    1cfc:	d3 94       	inc	r13
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    1cfe:	fc 16       	cp	r15, r28
    1d00:	30 f4       	brcc	.+12     	; 0x1d0e <u8g_DrawLine+0x66>
    1d02:	81 2f       	mov	r24, r17
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
    1d04:	10 2f       	mov	r17, r16
    1d06:	08 2f       	mov	r16, r24
    1d08:	8c 2f       	mov	r24, r28
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    1d0a:	cf 2d       	mov	r28, r15
    1d0c:	f8 2e       	mov	r15, r24
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1d0e:	dc 2d       	mov	r29, r12
    1d10:	d6 95       	lsr	r29
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    1d12:	10 17       	cp	r17, r16
    1d14:	10 f4       	brcc	.+4      	; 0x1d1a <u8g_DrawLine+0x72>
    1d16:	01 e0       	ldi	r16, 0x01	; 1
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <u8g_DrawLine+0x74>
    1d1a:	0f ef       	ldi	r16, 0xFF	; 255
  y = y1;

#ifndef  U8G_16BIT
  if ( x2 == 255 )
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	f8 12       	cpse	r15, r24
    1d20:	12 c0       	rjmp	.+36     	; 0x1d46 <u8g_DrawLine+0x9e>
    x2--;
    1d22:	fa 94       	dec	r15
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1d24:	10 c0       	rjmp	.+32     	; 0x1d46 <u8g_DrawLine+0x9e>
  {
    if ( swapxy == 0 ) 
    1d26:	d1 10       	cpse	r13, r1
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <u8g_DrawLine+0x8c>
      u8g_DrawPixel(u8g, x, y); 
    1d2a:	41 2f       	mov	r20, r17
    1d2c:	6c 2f       	mov	r22, r28
    1d2e:	c5 01       	movw	r24, r10
    1d30:	04 d1       	rcall	.+520    	; 0x1f3a <u8g_DrawPixel>
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <u8g_DrawLine+0x94>
    else 
      u8g_DrawPixel(u8g, y, x); 
    1d34:	4c 2f       	mov	r20, r28
    1d36:	61 2f       	mov	r22, r17
    1d38:	c5 01       	movw	r24, r10
    1d3a:	ff d0       	rcall	.+510    	; 0x1f3a <u8g_DrawPixel>
    err -= (uint8_t)dy;
    1d3c:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    1d3e:	12 f4       	brpl	.+4      	; 0x1d44 <u8g_DrawLine+0x9c>
    {
      y += (u8g_uint_t)ystep;
    1d40:	10 0f       	add	r17, r16
      err += (u8g_uint_t)dx;
    1d42:	dc 0d       	add	r29, r12
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1d44:	cf 5f       	subi	r28, 0xFF	; 255
    1d46:	fc 16       	cp	r15, r28
    1d48:	70 f7       	brcc	.-36     	; 0x1d26 <u8g_DrawLine+0x7e>
    {
      y += (u8g_uint_t)ystep;
      err += (u8g_uint_t)dx;
    }
  }
}
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	bf 90       	pop	r11
    1d5c:	af 90       	pop	r10
    1d5e:	08 95       	ret

00001d60 <u8g_call_dev_fn>:
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
  u8g->pin_list[U8G_PI_RESET] = reset;

  return u8g_Begin(u8g);
}
    1d60:	db 01       	movw	r26, r22
    1d62:	ed 91       	ld	r30, X+
    1d64:	fc 91       	ld	r31, X
    1d66:	19 95       	eicall
    1d68:	08 95       	ret

00001d6a <u8g_InitLL>:
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24
    1d74:	8b 01       	movw	r16, r22
    1d76:	e9 a9       	ldd	r30, Y+49	; 0x31
    1d78:	fa a9       	ldd	r31, Y+50	; 0x32
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	19 95       	eicall
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a e0       	ldi	r20, 0x0A	; 10
    1d84:	b8 01       	movw	r22, r16
    1d86:	ce 01       	movw	r24, r28
    1d88:	eb df       	rcall	.-42     	; 0x1d60 <u8g_call_dev_fn>
    1d8a:	18 2f       	mov	r17, r24
    1d8c:	e9 a9       	ldd	r30, Y+49	; 0x31
    1d8e:	fa a9       	ldd	r31, Y+50	; 0x32
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	19 95       	eicall
    1d94:	e9 a9       	ldd	r30, Y+49	; 0x31
    1d96:	fa a9       	ldd	r31, Y+50	; 0x32
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	19 95       	eicall
    1d9c:	81 2f       	mov	r24, r17
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	08 95       	ret

00001da8 <u8g_FirstPageLL>:
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	ec 01       	movw	r28, r24
    1db2:	8b 01       	movw	r16, r22
    1db4:	e9 a9       	ldd	r30, Y+49	; 0x31
    1db6:	fa a9       	ldd	r31, Y+50	; 0x32
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	19 95       	eicall
    1dbc:	e9 a9       	ldd	r30, Y+49	; 0x31
    1dbe:	fa a9       	ldd	r31, Y+50	; 0x32
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	19 95       	eicall
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	44 e1       	ldi	r20, 0x14	; 20
    1dca:	b8 01       	movw	r22, r16
    1dcc:	ce 01       	movw	r24, r28
    1dce:	c8 df       	rcall	.-112    	; 0x1d60 <u8g_call_dev_fn>
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2d 5c       	subi	r18, 0xCD	; 205
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	47 e1       	ldi	r20, 0x17	; 23
    1dd8:	b8 01       	movw	r22, r16
    1dda:	ce 01       	movw	r24, r28
    1ddc:	c1 df       	rcall	.-126    	; 0x1d60 <u8g_call_dev_fn>
    1dde:	e9 a9       	ldd	r30, Y+49	; 0x31
    1de0:	fa a9       	ldd	r31, Y+50	; 0x32
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	19 95       	eicall
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	08 95       	ret

00001df0 <u8g_NextPageLL>:
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	7b 01       	movw	r14, r22
    1dfe:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e00:	fa a9       	ldd	r31, Y+50	; 0x32
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	19 95       	eicall
    1e06:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e08:	fa a9       	ldd	r31, Y+50	; 0x32
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	19 95       	eicall
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	45 e1       	ldi	r20, 0x15	; 21
    1e14:	b7 01       	movw	r22, r14
    1e16:	ce 01       	movw	r24, r28
    1e18:	a3 df       	rcall	.-186    	; 0x1d60 <u8g_call_dev_fn>
    1e1a:	18 2f       	mov	r17, r24
    1e1c:	88 23       	and	r24, r24
    1e1e:	39 f0       	breq	.+14     	; 0x1e2e <u8g_NextPageLL+0x3e>
    1e20:	9e 01       	movw	r18, r28
    1e22:	2d 5c       	subi	r18, 0xCD	; 205
    1e24:	3f 4f       	sbci	r19, 0xFF	; 255
    1e26:	47 e1       	ldi	r20, 0x17	; 23
    1e28:	b7 01       	movw	r22, r14
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	99 df       	rcall	.-206    	; 0x1d60 <u8g_call_dev_fn>
    1e2e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e30:	fa a9       	ldd	r31, Y+50	; 0x32
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	19 95       	eicall
    1e36:	81 2f       	mov	r24, r17
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	08 95       	ret

00001e44 <u8g_DrawPixelLL>:
    1e44:	52 2f       	mov	r21, r18
    1e46:	9c 01       	movw	r18, r24
    1e48:	24 5e       	subi	r18, 0xE4	; 228
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	44 8f       	std	Z+28, r20	; 0x1c
    1e50:	55 8f       	std	Z+29, r21	; 0x1d
    1e52:	42 e3       	ldi	r20, 0x32	; 50
    1e54:	85 cf       	rjmp	.-246    	; 0x1d60 <u8g_call_dev_fn>
    1e56:	08 95       	ret

00001e58 <u8g_Draw8PixelLL>:
    1e58:	ef 92       	push	r14
    1e5a:	0f 93       	push	r16
    1e5c:	52 2f       	mov	r21, r18
    1e5e:	9c 01       	movw	r18, r24
    1e60:	24 5e       	subi	r18, 0xE4	; 228
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	fc 01       	movw	r30, r24
    1e66:	44 8f       	std	Z+28, r20	; 0x1c
    1e68:	55 8f       	std	Z+29, r21	; 0x1d
    1e6a:	07 8f       	std	Z+31, r16	; 0x1f
    1e6c:	e6 8e       	std	Z+30, r14	; 0x1e
    1e6e:	4b e3       	ldi	r20, 0x3B	; 59
    1e70:	77 df       	rcall	.-274    	; 0x1d60 <u8g_call_dev_fn>
    1e72:	0f 91       	pop	r16
    1e74:	ef 90       	pop	r14
    1e76:	08 95       	ret

00001e78 <u8g_GetWidthLL>:
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	1f 92       	push	r1
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	9e 01       	movw	r18, r28
    1e84:	2f 5f       	subi	r18, 0xFF	; 255
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	46 e4       	ldi	r20, 0x46	; 70
    1e8a:	6a df       	rcall	.-300    	; 0x1d60 <u8g_call_dev_fn>
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	0f 90       	pop	r0
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <u8g_GetHeightLL>:
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	1f 92       	push	r1
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	9e 01       	movw	r18, r28
    1ea2:	2f 5f       	subi	r18, 0xFF	; 255
    1ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea6:	47 e4       	ldi	r20, 0x47	; 71
    1ea8:	5b df       	rcall	.-330    	; 0x1d60 <u8g_call_dev_fn>
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	0f 90       	pop	r0
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	08 95       	ret

00001eb4 <u8g_GetModeLL>:
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	48 e4       	ldi	r20, 0x48	; 72
    1eba:	52 cf       	rjmp	.-348    	; 0x1d60 <u8g_call_dev_fn>
    1ebc:	08 95       	ret

00001ebe <u8g_UpdateDimension>:
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	ec 01       	movw	r28, r24
    1ec4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ec6:	7b 81       	ldd	r23, Y+3	; 0x03
    1ec8:	d7 df       	rcall	.-82     	; 0x1e78 <u8g_GetWidthLL>
    1eca:	88 83       	st	Y, r24
    1ecc:	6a 81       	ldd	r22, Y+2	; 0x02
    1ece:	7b 81       	ldd	r23, Y+3	; 0x03
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	e1 df       	rcall	.-62     	; 0x1e96 <u8g_GetHeightLL>
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ed8:	7b 81       	ldd	r23, Y+3	; 0x03
    1eda:	ce 01       	movw	r24, r28
    1edc:	eb df       	rcall	.-42     	; 0x1eb4 <u8g_GetModeLL>
    1ede:	8b 87       	std	Y+11, r24	; 0x0b
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	2d 5c       	subi	r18, 0xCD	; 205
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ee8:	7b 81       	ldd	r23, Y+3	; 0x03
    1eea:	47 e1       	ldi	r20, 0x17	; 23
    1eec:	ce 01       	movw	r24, r28
    1eee:	38 df       	rcall	.-400    	; 0x1d60 <u8g_call_dev_fn>
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <u8g_Begin>:
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	ec 01       	movw	r28, r24
    1efc:	6a 81       	ldd	r22, Y+2	; 0x02
    1efe:	7b 81       	ldd	r23, Y+3	; 0x03
    1f00:	34 df       	rcall	.-408    	; 0x1d6a <u8g_InitLL>
    1f02:	88 23       	and	r24, r24
    1f04:	19 f0       	breq	.+6      	; 0x1f0c <u8g_Begin+0x16>
    1f06:	ce 01       	movw	r24, r28
    1f08:	da df       	rcall	.-76     	; 0x1ebe <u8g_UpdateDimension>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <u8g_FirstPage>:
    1f12:	fc 01       	movw	r30, r24
    1f14:	62 81       	ldd	r22, Z+2	; 0x02
    1f16:	73 81       	ldd	r23, Z+3	; 0x03
    1f18:	47 cf       	rjmp	.-370    	; 0x1da8 <u8g_FirstPageLL>
    1f1a:	08 95       	ret

00001f1c <u8g_NextPage>:
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	ec 01       	movw	r28, r24
    1f22:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f24:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f26:	30 97       	sbiw	r30, 0x00	; 0
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <u8g_NextPage+0x10>
    1f2a:	19 95       	eicall
    1f2c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f2e:	7b 81       	ldd	r23, Y+3	; 0x03
    1f30:	ce 01       	movw	r24, r28
    1f32:	5e df       	rcall	.-324    	; 0x1df0 <u8g_NextPageLL>
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	08 95       	ret

00001f3a <u8g_DrawPixel>:
    1f3a:	36 2f       	mov	r19, r22
    1f3c:	24 2f       	mov	r18, r20
    1f3e:	fc 01       	movw	r30, r24
    1f40:	62 81       	ldd	r22, Z+2	; 0x02
    1f42:	73 81       	ldd	r23, Z+3	; 0x03
    1f44:	43 2f       	mov	r20, r19
    1f46:	7e cf       	rjmp	.-260    	; 0x1e44 <u8g_DrawPixelLL>
    1f48:	08 95       	ret

00001f4a <u8g_Draw8Pixel>:
    1f4a:	ef 92       	push	r14
    1f4c:	0f 93       	push	r16
    1f4e:	36 2f       	mov	r19, r22
    1f50:	fc 01       	movw	r30, r24
    1f52:	62 81       	ldd	r22, Z+2	; 0x02
    1f54:	73 81       	ldd	r23, Z+3	; 0x03
    1f56:	e0 2e       	mov	r14, r16
    1f58:	02 2f       	mov	r16, r18
    1f5a:	24 2f       	mov	r18, r20
    1f5c:	43 2f       	mov	r20, r19
    1f5e:	7c df       	rcall	.-264    	; 0x1e58 <u8g_Draw8PixelLL>
    1f60:	0f 91       	pop	r16
    1f62:	ef 90       	pop	r14
    1f64:	08 95       	ret

00001f66 <u8g_SetColorIndex>:
    1f66:	fc 01       	movw	r30, r24
    1f68:	60 a3       	std	Z+32, r22	; 0x20
    1f6a:	08 95       	ret

00001f6c <u8g_init_data>:
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ec 01       	movw	r28, r24
    1f72:	1d 82       	std	Y+5, r1	; 0x05
    1f74:	1c 82       	std	Y+4, r1	; 0x04
    1f76:	1f 82       	std	Y+7, r1	; 0x07
    1f78:	1e 82       	std	Y+6, r1	; 0x06
    1f7a:	19 86       	std	Y+9, r1	; 0x09
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	88 87       	std	Y+8, r24	; 0x08
    1f80:	82 e2       	ldi	r24, 0x22	; 34
    1f82:	8a 87       	std	Y+10, r24	; 0x0a
    1f84:	1f 86       	std	Y+15, r1	; 0x0f
    1f86:	1e 86       	std	Y+14, r1	; 0x0e
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	06 c0       	rjmp	.+12     	; 0x1f98 <u8g_init_data+0x2c>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e8 0f       	add	r30, r24
    1f90:	f1 1d       	adc	r31, r1
    1f92:	9f ef       	ldi	r25, 0xFF	; 255
    1f94:	93 a3       	std	Z+35, r25	; 0x23
    1f96:	8f 5f       	subi	r24, 0xFF	; 255
    1f98:	8e 30       	cpi	r24, 0x0E	; 14
    1f9a:	c0 f3       	brcs	.-16     	; 0x1f8c <u8g_init_data+0x20>
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	e2 df       	rcall	.-60     	; 0x1f66 <u8g_SetColorIndex>
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	6a de       	rcall	.-812    	; 0x1c7a <u8g_SetFontPosBaseline>
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	8f 8b       	std	Y+23, r24	; 0x17
    1faa:	18 8e       	std	Y+24, r1	; 0x18
    1fac:	19 8e       	std	Y+25, r1	; 0x19
    1fae:	80 e4       	ldi	r24, 0x40	; 64
    1fb0:	8a 8f       	std	Y+26, r24	; 0x1a
    1fb2:	1b 8e       	std	Y+27, r1	; 0x1b
    1fb4:	80 ec       	ldi	r24, 0xC0	; 192
    1fb6:	91 e1       	ldi	r25, 0x11	; 17
    1fb8:	9a ab       	std	Y+50, r25	; 0x32
    1fba:	89 ab       	std	Y+49, r24	; 0x31
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	08 95       	ret

00001fc2 <u8g_Init8Bit>:

uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
    1fc2:	4f 92       	push	r4
    1fc4:	5f 92       	push	r5
    1fc6:	6f 92       	push	r6
    1fc8:	7f 92       	push	r7
    1fca:	8f 92       	push	r8
    1fcc:	af 92       	push	r10
    1fce:	cf 92       	push	r12
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	3c 01       	movw	r6, r24
    1fe2:	2b 01       	movw	r4, r22
    1fe4:	f4 2e       	mov	r15, r20
    1fe6:	12 2f       	mov	r17, r18
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    1fe8:	c1 df       	rcall	.-126    	; 0x1f6c <u8g_init_data>
  u8g->dev = dev;
    1fea:	f3 01       	movw	r30, r6
    1fec:	53 82       	std	Z+3, r5	; 0x03
    1fee:	42 82       	std	Z+2, r4	; 0x02
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
    1ff0:	f0 a6       	std	Z+40, r15	; 0x28
  u8g->pin_list[U8G_PI_D1] = d1;
    1ff2:	11 a7       	std	Z+41, r17	; 0x29
  u8g->pin_list[U8G_PI_D2] = d2;
    1ff4:	02 a7       	std	Z+42, r16	; 0x2a
  u8g->pin_list[U8G_PI_D3] = d3;
    1ff6:	e3 a6       	std	Z+43, r14	; 0x2b
  u8g->pin_list[U8G_PI_D4] = d4;
    1ff8:	c4 a6       	std	Z+44, r12	; 0x2c
  u8g->pin_list[U8G_PI_D5] = d5;
    1ffa:	a5 a6       	std	Z+45, r10	; 0x2d
  u8g->pin_list[U8G_PI_D6] = d6;
    1ffc:	86 a6       	std	Z+46, r8	; 0x2e
  u8g->pin_list[U8G_PI_D7] = d7;
    1ffe:	89 89       	ldd	r24, Y+17	; 0x11
    2000:	87 a7       	std	Z+47, r24	; 0x2f

  u8g->pin_list[U8G_PI_EN] = en;
    2002:	8a 89       	ldd	r24, Y+18	; 0x12
    2004:	87 a3       	std	Z+39, r24	; 0x27
  u8g->pin_list[U8G_PI_CS1] = cs1;
    2006:	8b 89       	ldd	r24, Y+19	; 0x13
    2008:	85 a3       	std	Z+37, r24	; 0x25
  u8g->pin_list[U8G_PI_CS2] = cs2;
    200a:	8c 89       	ldd	r24, Y+20	; 0x14
    200c:	86 a3       	std	Z+38, r24	; 0x26
  u8g->pin_list[U8G_PI_DI] = di;
    200e:	8d 89       	ldd	r24, Y+21	; 0x15
    2010:	84 a3       	std	Z+36, r24	; 0x24
  u8g->pin_list[U8G_PI_RW] = rw;
    2012:	8e 89       	ldd	r24, Y+22	; 0x16
    2014:	80 ab       	std	Z+48, r24	; 0x30
  u8g->pin_list[U8G_PI_RESET] = reset;
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	83 a3       	std	Z+35, r24	; 0x23
  
  return u8g_Begin(u8g);
    201a:	c3 01       	movw	r24, r6
    201c:	6c df       	rcall	.-296    	; 0x1ef6 <u8g_Begin>
}
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	ff 90       	pop	r15
    2028:	ef 90       	pop	r14
    202a:	cf 90       	pop	r12
    202c:	af 90       	pop	r10
    202e:	8f 90       	pop	r8
    2030:	7f 90       	pop	r7
    2032:	6f 90       	pop	r6
    2034:	5f 90       	pop	r5
    2036:	4f 90       	pop	r4
    2038:	08 95       	ret

0000203a <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    203a:	fc 01       	movw	r30, r24
    203c:	12 82       	std	Z+2, r1	; 0x02
    203e:	80 81       	ld	r24, Z
    2040:	81 50       	subi	r24, 0x01	; 1
    2042:	83 83       	std	Z+3, r24	; 0x03
    2044:	14 82       	std	Z+4, r1	; 0x04
    2046:	08 95       	ret

00002048 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2048:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    204a:	20 81       	ld	r18, Z
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	82 0f       	add	r24, r18
    2050:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	89 17       	cp	r24, r25
    2056:	60 f4       	brcc	.+24     	; 0x2070 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    2058:	84 81       	ldd	r24, Z+4	; 0x04
    205a:	8f 5f       	subi	r24, 0xFF	; 255
    205c:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    205e:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    2060:	82 0f       	add	r24, r18
  if ( y1 >= p->total_height )
    2062:	89 17       	cp	r24, r25
    2064:	10 f0       	brcs	.+4      	; 0x206a <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	89 0f       	add	r24, r25
  }
  p->page_y1 = y1;
    206a:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    2070:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    2072:	08 95       	ret

00002074 <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    2074:	dc 01       	movw	r26, r24
    2076:	16 96       	adiw	r26, 0x06	; 6
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	17 97       	sbiw	r26, 0x07	; 7
    207e:	15 96       	adiw	r26, 0x05	; 5
    2080:	8c 91       	ld	r24, X
    2082:	9f 01       	movw	r18, r30
    2084:	28 0f       	add	r18, r24
    2086:	31 1d       	adc	r19, r1
    2088:	c9 01       	movw	r24, r18
    208a:	10 82       	st	Z, r1
    208c:	31 96       	adiw	r30, 0x01	; 1
    208e:	8e 17       	cp	r24, r30
    2090:	9f 07       	cpc	r25, r31
    2092:	d9 f7       	brne	.-10     	; 0x208a <u8g_pb_Clear+0x16>
    2094:	08 95       	ret

00002096 <u8g_pb_IsYIntersection>:
    2096:	fc 01       	movw	r30, r24
    2098:	23 81       	ldd	r18, Z+3	; 0x03
    209a:	31 e0       	ldi	r19, 0x01	; 1
    209c:	26 17       	cp	r18, r22
    209e:	08 f4       	brcc	.+2      	; 0x20a2 <u8g_pb_IsYIntersection+0xc>
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	fc 01       	movw	r30, r24
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	91 e0       	ldi	r25, 0x01	; 1
    20a8:	48 17       	cp	r20, r24
    20aa:	08 f4       	brcc	.+2      	; 0x20ae <u8g_pb_IsYIntersection+0x18>
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	21 e0       	ldi	r18, 0x01	; 1
    20b0:	46 17       	cp	r20, r22
    20b2:	08 f0       	brcs	.+2      	; 0x20b6 <u8g_pb_IsYIntersection+0x20>
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	83 2f       	mov	r24, r19
    20b8:	89 23       	and	r24, r25
    20ba:	92 23       	and	r25, r18
    20bc:	98 2b       	or	r25, r24
    20be:	83 2f       	mov	r24, r19
    20c0:	82 23       	and	r24, r18
    20c2:	89 2b       	or	r24, r25
    20c4:	08 95       	ret

000020c6 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    20c6:	dc 01       	movw	r26, r24
    20c8:	fb 01       	movw	r30, r22
  box->x0 = 0;
    20ca:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    20cc:	12 96       	adiw	r26, 0x02	; 2
    20ce:	8c 91       	ld	r24, X
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
    20d4:	15 96       	adiw	r26, 0x05	; 5
    20d6:	8c 91       	ld	r24, X
    20d8:	15 97       	sbiw	r26, 0x05	; 5
  box->x1--;
    20da:	81 50       	subi	r24, 0x01	; 1
    20dc:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    20de:	13 96       	adiw	r26, 0x03	; 3
    20e0:	8c 91       	ld	r24, X
    20e2:	83 83       	std	Z+3, r24	; 0x03
    20e4:	08 95       	ret

000020e6 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    20e6:	fb 01       	movw	r30, r22
    20e8:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    20ea:	23 81       	ldd	r18, Z+3	; 0x03
    20ec:	21 30       	cpi	r18, 0x01	; 1
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <u8g_pb_Is8PixelVisible+0x10>
    20f0:	23 30       	cpi	r18, 0x03	; 3
    20f2:	21 f0       	breq	.+8      	; 0x20fc <u8g_pb_Is8PixelVisible+0x16>
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    20f6:	48 e0       	ldi	r20, 0x08	; 8
    20f8:	43 0f       	add	r20, r19
      break;
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    20fc:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    20fe:	38 50       	subi	r19, 0x08	; 8
      break;
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2102:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2104:	63 2f       	mov	r22, r19
    2106:	c7 cf       	rjmp	.-114    	; 0x2096 <u8g_pb_IsYIntersection>
}
    2108:	08 95       	ret

0000210a <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    210a:	dc 01       	movw	r26, r24
    210c:	16 96       	adiw	r26, 0x06	; 6
    210e:	ed 91       	ld	r30, X+
    2110:	fc 91       	ld	r31, X
    2112:	17 97       	sbiw	r26, 0x07	; 7
    2114:	12 96       	adiw	r26, 0x02	; 2
    2116:	8c 91       	ld	r24, X
    2118:	48 1b       	sub	r20, r24
    211a:	47 70       	andi	r20, 0x07	; 7
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <u8g_pb8v1_set_pixel+0x1c>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	4a 95       	dec	r20
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <u8g_pb8v1_set_pixel+0x18>
    212a:	e6 0f       	add	r30, r22
    212c:	f1 1d       	adc	r31, r1
    212e:	22 23       	and	r18, r18
    2130:	21 f0       	breq	.+8      	; 0x213a <u8g_pb8v1_set_pixel+0x30>
    2132:	90 81       	ld	r25, Z
    2134:	89 2b       	or	r24, r25
    2136:	80 83       	st	Z, r24
    2138:	08 95       	ret
    213a:	80 95       	com	r24
    213c:	90 81       	ld	r25, Z
    213e:	89 23       	and	r24, r25
    2140:	80 83       	st	Z, r24
    2142:	08 95       	ret

00002144 <u8g_pb8v1_SetPixel>:
    2144:	fb 01       	movw	r30, r22
    2146:	41 81       	ldd	r20, Z+1	; 0x01
    2148:	fc 01       	movw	r30, r24
    214a:	22 81       	ldd	r18, Z+2	; 0x02
    214c:	42 17       	cp	r20, r18
    214e:	68 f0       	brcs	.+26     	; 0x216a <u8g_pb8v1_SetPixel+0x26>
    2150:	23 81       	ldd	r18, Z+3	; 0x03
    2152:	24 17       	cp	r18, r20
    2154:	50 f0       	brcs	.+20     	; 0x216a <u8g_pb8v1_SetPixel+0x26>
    2156:	fb 01       	movw	r30, r22
    2158:	30 81       	ld	r19, Z
    215a:	fc 01       	movw	r30, r24
    215c:	25 81       	ldd	r18, Z+5	; 0x05
    215e:	32 17       	cp	r19, r18
    2160:	20 f4       	brcc	.+8      	; 0x216a <u8g_pb8v1_SetPixel+0x26>
    2162:	fb 01       	movw	r30, r22
    2164:	24 81       	ldd	r18, Z+4	; 0x04
    2166:	63 2f       	mov	r22, r19
    2168:	d0 cf       	rjmp	.-96     	; 0x210a <u8g_pb8v1_set_pixel>
    216a:	08 95       	ret

0000216c <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    216c:	df 92       	push	r13
    216e:	ef 92       	push	r14
    2170:	ff 92       	push	r15
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	7c 01       	movw	r14, r24
    217c:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    217e:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	41 f0       	breq	.+16     	; 0x2196 <u8g_pb8v1_Set8PixelOpt2+0x2a>
    2186:	90 f0       	brcs	.+36     	; 0x21ac <u8g_pb8v1_Set8PixelOpt2+0x40>
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	49 f0       	breq	.+18     	; 0x219e <u8g_pb8v1_Set8PixelOpt2+0x32>
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	51 f0       	breq	.+20     	; 0x21a4 <u8g_pb8v1_Set8PixelOpt2+0x38>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2190:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2192:	00 e0       	ldi	r16, 0x00	; 0
    2194:	0d c0       	rjmp	.+26     	; 0x21b0 <u8g_pb8v1_Set8PixelOpt2+0x44>
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    2196:	dd 24       	eor	r13, r13
    2198:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    219a:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    219c:	09 c0       	rjmp	.+18     	; 0x21b0 <u8g_pb8v1_Set8PixelOpt2+0x44>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    219e:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    21a0:	0f ef       	ldi	r16, 0xFF	; 255
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <u8g_pb8v1_Set8PixelOpt2+0x44>
    case 3: dy--; break;
    21a4:	dd 24       	eor	r13, r13
    21a6:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    21a8:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <u8g_pb8v1_Set8PixelOpt2+0x44>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    21ac:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    21ae:	01 e0       	ldi	r16, 0x01	; 1
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    21b0:	11 23       	and	r17, r17
    21b2:	1c f4       	brge	.+6      	; 0x21ba <u8g_pb8v1_Set8PixelOpt2+0x4e>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    21b4:	be 01       	movw	r22, r28
    21b6:	c7 01       	movw	r24, r14
    21b8:	c5 df       	rcall	.-118    	; 0x2144 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    21ba:	88 81       	ld	r24, Y
    21bc:	80 0f       	add	r24, r16
    21be:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	8d 0d       	add	r24, r13
    21c4:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    21c6:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    21c8:	99 f7       	brne	.-26     	; 0x21b0 <u8g_pb8v1_Set8PixelOpt2+0x44>
  
}
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	ff 90       	pop	r15
    21d4:	ef 90       	pop	r14
    21d6:	df 90       	pop	r13
    21d8:	08 95       	ret

000021da <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    21e2:	fb 01       	movw	r30, r22
    21e4:	c2 81       	ldd	r28, Z+2	; 0x02
    21e6:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	fa 01       	movw	r30, r20
    21ec:	74 97       	sbiw	r30, 0x14	; 20
    21ee:	e4 33       	cpi	r30, 0x34	; 52
    21f0:	f1 05       	cpc	r31, r1
    21f2:	90 f5       	brcc	.+100    	; 0x2258 <__stack+0x59>
    21f4:	89 01       	movw	r16, r18
    21f6:	88 27       	eor	r24, r24
    21f8:	e7 58       	subi	r30, 0x87	; 135
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	8f 4f       	sbci	r24, 0xFF	; 255
    21fe:	54 c4       	rjmp	.+2216   	; 0x2aa8 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    2200:	b9 01       	movw	r22, r18
    2202:	ce 01       	movw	r24, r28
    2204:	70 df       	rcall	.-288    	; 0x20e6 <u8g_pb_Is8PixelVisible>
    2206:	88 23       	and	r24, r24
    2208:	49 f1       	breq	.+82     	; 0x225c <__stack+0x5d>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    220a:	b8 01       	movw	r22, r16
    220c:	ce 01       	movw	r24, r28
    220e:	ae df       	rcall	.-164    	; 0x216c <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2212:	25 c0       	rjmp	.+74     	; 0x225e <__stack+0x5f>
    2214:	b9 01       	movw	r22, r18
    2216:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2218:	95 df       	rcall	.-214    	; 0x2144 <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	20 c0       	rjmp	.+64     	; 0x225e <__stack+0x5f>
    221e:	ce 01       	movw	r24, r28
      u8g_page_First(&(pb->p));
    2220:	29 df       	rcall	.-430    	; 0x2074 <u8g_pb_Clear>
    2222:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2224:	0a df       	rcall	.-492    	; 0x203a <u8g_page_First>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	1a c0       	rjmp	.+52     	; 0x225e <__stack+0x5f>
    222a:	ce 01       	movw	r24, r28
    222c:	0d df       	rcall	.-486    	; 0x2048 <u8g_page_Next>
        return 0;
      u8g_pb_Clear(pb);
    222e:	88 23       	and	r24, r24
    2230:	b1 f0       	breq	.+44     	; 0x225e <__stack+0x5f>
    2232:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2234:	1f df       	rcall	.-450    	; 0x2074 <u8g_pb_Clear>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    2236:	81 e0       	ldi	r24, 0x01	; 1
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    2238:	12 c0       	rjmp	.+36     	; 0x225e <__stack+0x5f>
    223a:	b9 01       	movw	r22, r18
    223c:	ce 01       	movw	r24, r28
    223e:	43 df       	rcall	.-378    	; 0x20c6 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    2242:	0d c0       	rjmp	.+26     	; 0x225e <__stack+0x5f>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	f9 01       	movw	r30, r18
    2248:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    224c:	08 c0       	rjmp	.+16     	; 0x225e <__stack+0x5f>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	f9 01       	movw	r30, r18
    2252:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    2256:	03 c0       	rjmp	.+6      	; 0x225e <__stack+0x5f>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	01 c0       	rjmp	.+2      	; 0x225e <__stack+0x5f>
  }
  return 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
}
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	08 95       	ret

00002268 <u8g_draw_hline>:
void u8g_DrawVLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
  if ( u8g_IsBBXIntersection(u8g, x, y, 1, w) == 0 )
    return;
  u8g_draw_vline(u8g, x, y, w);
}
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	7c 01       	movw	r14, r24
    2276:	d6 2f       	mov	r29, r22
    2278:	14 2f       	mov	r17, r20
    227a:	c2 2f       	mov	r28, r18
    227c:	08 c0       	rjmp	.+16     	; 0x228e <u8g_draw_hline+0x26>
    227e:	0f ef       	ldi	r16, 0xFF	; 255
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	41 2f       	mov	r20, r17
    2284:	6d 2f       	mov	r22, r29
    2286:	c7 01       	movw	r24, r14
    2288:	60 de       	rcall	.-832    	; 0x1f4a <u8g_Draw8Pixel>
    228a:	c8 50       	subi	r28, 0x08	; 8
    228c:	d8 5f       	subi	r29, 0xF8	; 248
    228e:	c8 30       	cpi	r28, 0x08	; 8
    2290:	b0 f7       	brcc	.-20     	; 0x227e <u8g_draw_hline+0x16>
    2292:	cc 23       	and	r28, r28
    2294:	89 f0       	breq	.+34     	; 0x22b8 <u8g_draw_hline+0x50>
    2296:	87 e0       	ldi	r24, 0x07	; 7
    2298:	c8 27       	eor	r28, r24
    229a:	cf 5f       	subi	r28, 0xFF	; 255
    229c:	c7 70       	andi	r28, 0x07	; 7
    229e:	8f ef       	ldi	r24, 0xFF	; 255
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <u8g_draw_hline+0x40>
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	ca 95       	dec	r28
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <u8g_draw_hline+0x3c>
    22ac:	08 2f       	mov	r16, r24
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	41 2f       	mov	r20, r17
    22b2:	6d 2f       	mov	r22, r29
    22b4:	c7 01       	movw	r24, r14
    22b6:	49 de       	rcall	.-878    	; 0x1f4a <u8g_Draw8Pixel>
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	ff 90       	pop	r15
    22c2:	ef 90       	pop	r14
    22c4:	08 95       	ret

000022c6 <u8g_draw_vline>:
    22c6:	ef 92       	push	r14
    22c8:	ff 92       	push	r15
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	7c 01       	movw	r14, r24
    22d4:	16 2f       	mov	r17, r22
    22d6:	d4 2f       	mov	r29, r20
    22d8:	c2 2f       	mov	r28, r18
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <u8g_draw_vline+0x26>
    22dc:	0f ef       	ldi	r16, 0xFF	; 255
    22de:	21 e0       	ldi	r18, 0x01	; 1
    22e0:	4d 2f       	mov	r20, r29
    22e2:	61 2f       	mov	r22, r17
    22e4:	c7 01       	movw	r24, r14
    22e6:	31 de       	rcall	.-926    	; 0x1f4a <u8g_Draw8Pixel>
    22e8:	c8 50       	subi	r28, 0x08	; 8
    22ea:	d8 5f       	subi	r29, 0xF8	; 248
    22ec:	c8 30       	cpi	r28, 0x08	; 8
    22ee:	b0 f7       	brcc	.-20     	; 0x22dc <u8g_draw_vline+0x16>
    22f0:	cc 23       	and	r28, r28
    22f2:	89 f0       	breq	.+34     	; 0x2316 <u8g_draw_vline+0x50>
    22f4:	87 e0       	ldi	r24, 0x07	; 7
    22f6:	c8 27       	eor	r28, r24
    22f8:	cf 5f       	subi	r28, 0xFF	; 255
    22fa:	c7 70       	andi	r28, 0x07	; 7
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <u8g_draw_vline+0x40>
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	ca 95       	dec	r28
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <u8g_draw_vline+0x3c>
    230a:	08 2f       	mov	r16, r24
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	4d 2f       	mov	r20, r29
    2310:	61 2f       	mov	r22, r17
    2312:	c7 01       	movw	r24, r14
    2314:	1a de       	rcall	.-972    	; 0x1f4a <u8g_Draw8Pixel>
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	08 95       	ret

00002324 <u8g_DrawFrame>:

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    2324:	df 92       	push	r13
    2326:	ef 92       	push	r14
    2328:	ff 92       	push	r15
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	7c 01       	movw	r14, r24
    2334:	d6 2f       	mov	r29, r22
    2336:	14 2f       	mov	r17, r20
    2338:	d2 2e       	mov	r13, r18
  u8g_uint_t xtmp = x;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    233a:	05 d8       	rcall	.-4086   	; 0x1346 <u8g_IsBBXIntersection>
    233c:	88 23       	and	r24, r24
    233e:	c1 f0       	breq	.+48     	; 0x2370 <u8g_DrawFrame+0x4c>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
    2340:	2d 2d       	mov	r18, r13
    2342:	41 2f       	mov	r20, r17
    2344:	6d 2f       	mov	r22, r29
    2346:	c7 01       	movw	r24, r14
    2348:	8f df       	rcall	.-226    	; 0x2268 <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
    234a:	20 2f       	mov	r18, r16
    234c:	41 2f       	mov	r20, r17
    234e:	6d 2f       	mov	r22, r29
    2350:	c7 01       	movw	r24, r14
    2352:	b9 df       	rcall	.-142    	; 0x22c6 <u8g_draw_vline>
  x+=w;
    2354:	6d 2f       	mov	r22, r29
    2356:	6d 0d       	add	r22, r13
  x--;
    2358:	61 50       	subi	r22, 0x01	; 1
  u8g_draw_vline(u8g, x, y, h);
    235a:	20 2f       	mov	r18, r16
    235c:	41 2f       	mov	r20, r17
    235e:	c7 01       	movw	r24, r14
    2360:	b2 df       	rcall	.-156    	; 0x22c6 <u8g_draw_vline>
  y+=h;
    2362:	41 2f       	mov	r20, r17
    2364:	40 0f       	add	r20, r16
  y--;
    2366:	41 50       	subi	r20, 0x01	; 1
  u8g_draw_hline(u8g, xtmp, y, w);
    2368:	2d 2d       	mov	r18, r13
    236a:	6d 2f       	mov	r22, r29
    236c:	c7 01       	movw	r24, r14
    236e:	7c df       	rcall	.-264    	; 0x2268 <u8g_draw_hline>
}
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	ff 90       	pop	r15
    237a:	ef 90       	pop	r14
    237c:	df 90       	pop	r13
    237e:	08 95       	ret

00002380 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    2380:	08 95       	ret

00002382 <__subsf3>:
    2382:	50 58       	subi	r21, 0x80	; 128

00002384 <__addsf3>:
    2384:	bb 27       	eor	r27, r27
    2386:	aa 27       	eor	r26, r26
    2388:	0e d0       	rcall	.+28     	; 0x23a6 <__addsf3x>
    238a:	75 c1       	rjmp	.+746    	; 0x2676 <__fp_round>
    238c:	66 d1       	rcall	.+716    	; 0x265a <__fp_pscA>
    238e:	30 f0       	brcs	.+12     	; 0x239c <__addsf3+0x18>
    2390:	6b d1       	rcall	.+726    	; 0x2668 <__fp_pscB>
    2392:	20 f0       	brcs	.+8      	; 0x239c <__addsf3+0x18>
    2394:	31 f4       	brne	.+12     	; 0x23a2 <__addsf3+0x1e>
    2396:	9f 3f       	cpi	r25, 0xFF	; 255
    2398:	11 f4       	brne	.+4      	; 0x239e <__addsf3+0x1a>
    239a:	1e f4       	brtc	.+6      	; 0x23a2 <__addsf3+0x1e>
    239c:	5b c1       	rjmp	.+694    	; 0x2654 <__fp_nan>
    239e:	0e f4       	brtc	.+2      	; 0x23a2 <__addsf3+0x1e>
    23a0:	e0 95       	com	r30
    23a2:	e7 fb       	bst	r30, 7
    23a4:	51 c1       	rjmp	.+674    	; 0x2648 <__fp_inf>

000023a6 <__addsf3x>:
    23a6:	e9 2f       	mov	r30, r25
    23a8:	77 d1       	rcall	.+750    	; 0x2698 <__fp_split3>
    23aa:	80 f3       	brcs	.-32     	; 0x238c <__addsf3+0x8>
    23ac:	ba 17       	cp	r27, r26
    23ae:	62 07       	cpc	r22, r18
    23b0:	73 07       	cpc	r23, r19
    23b2:	84 07       	cpc	r24, r20
    23b4:	95 07       	cpc	r25, r21
    23b6:	18 f0       	brcs	.+6      	; 0x23be <__addsf3x+0x18>
    23b8:	71 f4       	brne	.+28     	; 0x23d6 <__addsf3x+0x30>
    23ba:	9e f5       	brtc	.+102    	; 0x2422 <__addsf3x+0x7c>
    23bc:	8f c1       	rjmp	.+798    	; 0x26dc <__fp_zero>
    23be:	0e f4       	brtc	.+2      	; 0x23c2 <__addsf3x+0x1c>
    23c0:	e0 95       	com	r30
    23c2:	0b 2e       	mov	r0, r27
    23c4:	ba 2f       	mov	r27, r26
    23c6:	a0 2d       	mov	r26, r0
    23c8:	0b 01       	movw	r0, r22
    23ca:	b9 01       	movw	r22, r18
    23cc:	90 01       	movw	r18, r0
    23ce:	0c 01       	movw	r0, r24
    23d0:	ca 01       	movw	r24, r20
    23d2:	a0 01       	movw	r20, r0
    23d4:	11 24       	eor	r1, r1
    23d6:	ff 27       	eor	r31, r31
    23d8:	59 1b       	sub	r21, r25
    23da:	99 f0       	breq	.+38     	; 0x2402 <__addsf3x+0x5c>
    23dc:	59 3f       	cpi	r21, 0xF9	; 249
    23de:	50 f4       	brcc	.+20     	; 0x23f4 <__addsf3x+0x4e>
    23e0:	50 3e       	cpi	r21, 0xE0	; 224
    23e2:	68 f1       	brcs	.+90     	; 0x243e <__addsf3x+0x98>
    23e4:	1a 16       	cp	r1, r26
    23e6:	f0 40       	sbci	r31, 0x00	; 0
    23e8:	a2 2f       	mov	r26, r18
    23ea:	23 2f       	mov	r18, r19
    23ec:	34 2f       	mov	r19, r20
    23ee:	44 27       	eor	r20, r20
    23f0:	58 5f       	subi	r21, 0xF8	; 248
    23f2:	f3 cf       	rjmp	.-26     	; 0x23da <__addsf3x+0x34>
    23f4:	46 95       	lsr	r20
    23f6:	37 95       	ror	r19
    23f8:	27 95       	ror	r18
    23fa:	a7 95       	ror	r26
    23fc:	f0 40       	sbci	r31, 0x00	; 0
    23fe:	53 95       	inc	r21
    2400:	c9 f7       	brne	.-14     	; 0x23f4 <__addsf3x+0x4e>
    2402:	7e f4       	brtc	.+30     	; 0x2422 <__addsf3x+0x7c>
    2404:	1f 16       	cp	r1, r31
    2406:	ba 0b       	sbc	r27, r26
    2408:	62 0b       	sbc	r22, r18
    240a:	73 0b       	sbc	r23, r19
    240c:	84 0b       	sbc	r24, r20
    240e:	ba f0       	brmi	.+46     	; 0x243e <__addsf3x+0x98>
    2410:	91 50       	subi	r25, 0x01	; 1
    2412:	a1 f0       	breq	.+40     	; 0x243c <__addsf3x+0x96>
    2414:	ff 0f       	add	r31, r31
    2416:	bb 1f       	adc	r27, r27
    2418:	66 1f       	adc	r22, r22
    241a:	77 1f       	adc	r23, r23
    241c:	88 1f       	adc	r24, r24
    241e:	c2 f7       	brpl	.-16     	; 0x2410 <__addsf3x+0x6a>
    2420:	0e c0       	rjmp	.+28     	; 0x243e <__addsf3x+0x98>
    2422:	ba 0f       	add	r27, r26
    2424:	62 1f       	adc	r22, r18
    2426:	73 1f       	adc	r23, r19
    2428:	84 1f       	adc	r24, r20
    242a:	48 f4       	brcc	.+18     	; 0x243e <__addsf3x+0x98>
    242c:	87 95       	ror	r24
    242e:	77 95       	ror	r23
    2430:	67 95       	ror	r22
    2432:	b7 95       	ror	r27
    2434:	f7 95       	ror	r31
    2436:	9e 3f       	cpi	r25, 0xFE	; 254
    2438:	08 f0       	brcs	.+2      	; 0x243c <__addsf3x+0x96>
    243a:	b3 cf       	rjmp	.-154    	; 0x23a2 <__addsf3+0x1e>
    243c:	93 95       	inc	r25
    243e:	88 0f       	add	r24, r24
    2440:	08 f0       	brcs	.+2      	; 0x2444 <__addsf3x+0x9e>
    2442:	99 27       	eor	r25, r25
    2444:	ee 0f       	add	r30, r30
    2446:	97 95       	ror	r25
    2448:	87 95       	ror	r24
    244a:	08 95       	ret

0000244c <__cmpsf2>:
    244c:	d9 d0       	rcall	.+434    	; 0x2600 <__fp_cmp>
    244e:	08 f4       	brcc	.+2      	; 0x2452 <__cmpsf2+0x6>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	08 95       	ret

00002454 <__divsf3>:
    2454:	0c d0       	rcall	.+24     	; 0x246e <__divsf3x>
    2456:	0f c1       	rjmp	.+542    	; 0x2676 <__fp_round>
    2458:	07 d1       	rcall	.+526    	; 0x2668 <__fp_pscB>
    245a:	40 f0       	brcs	.+16     	; 0x246c <__divsf3+0x18>
    245c:	fe d0       	rcall	.+508    	; 0x265a <__fp_pscA>
    245e:	30 f0       	brcs	.+12     	; 0x246c <__divsf3+0x18>
    2460:	21 f4       	brne	.+8      	; 0x246a <__divsf3+0x16>
    2462:	5f 3f       	cpi	r21, 0xFF	; 255
    2464:	19 f0       	breq	.+6      	; 0x246c <__divsf3+0x18>
    2466:	f0 c0       	rjmp	.+480    	; 0x2648 <__fp_inf>
    2468:	51 11       	cpse	r21, r1
    246a:	39 c1       	rjmp	.+626    	; 0x26de <__fp_szero>
    246c:	f3 c0       	rjmp	.+486    	; 0x2654 <__fp_nan>

0000246e <__divsf3x>:
    246e:	14 d1       	rcall	.+552    	; 0x2698 <__fp_split3>
    2470:	98 f3       	brcs	.-26     	; 0x2458 <__divsf3+0x4>

00002472 <__divsf3_pse>:
    2472:	99 23       	and	r25, r25
    2474:	c9 f3       	breq	.-14     	; 0x2468 <__divsf3+0x14>
    2476:	55 23       	and	r21, r21
    2478:	b1 f3       	breq	.-20     	; 0x2466 <__divsf3+0x12>
    247a:	95 1b       	sub	r25, r21
    247c:	55 0b       	sbc	r21, r21
    247e:	bb 27       	eor	r27, r27
    2480:	aa 27       	eor	r26, r26
    2482:	62 17       	cp	r22, r18
    2484:	73 07       	cpc	r23, r19
    2486:	84 07       	cpc	r24, r20
    2488:	38 f0       	brcs	.+14     	; 0x2498 <__divsf3_pse+0x26>
    248a:	9f 5f       	subi	r25, 0xFF	; 255
    248c:	5f 4f       	sbci	r21, 0xFF	; 255
    248e:	22 0f       	add	r18, r18
    2490:	33 1f       	adc	r19, r19
    2492:	44 1f       	adc	r20, r20
    2494:	aa 1f       	adc	r26, r26
    2496:	a9 f3       	breq	.-22     	; 0x2482 <__divsf3_pse+0x10>
    2498:	33 d0       	rcall	.+102    	; 0x2500 <__divsf3_pse+0x8e>
    249a:	0e 2e       	mov	r0, r30
    249c:	3a f0       	brmi	.+14     	; 0x24ac <__divsf3_pse+0x3a>
    249e:	e0 e8       	ldi	r30, 0x80	; 128
    24a0:	30 d0       	rcall	.+96     	; 0x2502 <__divsf3_pse+0x90>
    24a2:	91 50       	subi	r25, 0x01	; 1
    24a4:	50 40       	sbci	r21, 0x00	; 0
    24a6:	e6 95       	lsr	r30
    24a8:	00 1c       	adc	r0, r0
    24aa:	ca f7       	brpl	.-14     	; 0x249e <__divsf3_pse+0x2c>
    24ac:	29 d0       	rcall	.+82     	; 0x2500 <__divsf3_pse+0x8e>
    24ae:	fe 2f       	mov	r31, r30
    24b0:	27 d0       	rcall	.+78     	; 0x2500 <__divsf3_pse+0x8e>
    24b2:	66 0f       	add	r22, r22
    24b4:	77 1f       	adc	r23, r23
    24b6:	88 1f       	adc	r24, r24
    24b8:	bb 1f       	adc	r27, r27
    24ba:	26 17       	cp	r18, r22
    24bc:	37 07       	cpc	r19, r23
    24be:	48 07       	cpc	r20, r24
    24c0:	ab 07       	cpc	r26, r27
    24c2:	b0 e8       	ldi	r27, 0x80	; 128
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <__divsf3_pse+0x56>
    24c6:	bb 0b       	sbc	r27, r27
    24c8:	80 2d       	mov	r24, r0
    24ca:	bf 01       	movw	r22, r30
    24cc:	ff 27       	eor	r31, r31
    24ce:	93 58       	subi	r25, 0x83	; 131
    24d0:	5f 4f       	sbci	r21, 0xFF	; 255
    24d2:	2a f0       	brmi	.+10     	; 0x24de <__divsf3_pse+0x6c>
    24d4:	9e 3f       	cpi	r25, 0xFE	; 254
    24d6:	51 05       	cpc	r21, r1
    24d8:	68 f0       	brcs	.+26     	; 0x24f4 <__divsf3_pse+0x82>
    24da:	b6 c0       	rjmp	.+364    	; 0x2648 <__fp_inf>
    24dc:	00 c1       	rjmp	.+512    	; 0x26de <__fp_szero>
    24de:	5f 3f       	cpi	r21, 0xFF	; 255
    24e0:	ec f3       	brlt	.-6      	; 0x24dc <__divsf3_pse+0x6a>
    24e2:	98 3e       	cpi	r25, 0xE8	; 232
    24e4:	dc f3       	brlt	.-10     	; 0x24dc <__divsf3_pse+0x6a>
    24e6:	86 95       	lsr	r24
    24e8:	77 95       	ror	r23
    24ea:	67 95       	ror	r22
    24ec:	b7 95       	ror	r27
    24ee:	f7 95       	ror	r31
    24f0:	9f 5f       	subi	r25, 0xFF	; 255
    24f2:	c9 f7       	brne	.-14     	; 0x24e6 <__divsf3_pse+0x74>
    24f4:	88 0f       	add	r24, r24
    24f6:	91 1d       	adc	r25, r1
    24f8:	96 95       	lsr	r25
    24fa:	87 95       	ror	r24
    24fc:	97 f9       	bld	r25, 7
    24fe:	08 95       	ret
    2500:	e1 e0       	ldi	r30, 0x01	; 1
    2502:	66 0f       	add	r22, r22
    2504:	77 1f       	adc	r23, r23
    2506:	88 1f       	adc	r24, r24
    2508:	bb 1f       	adc	r27, r27
    250a:	62 17       	cp	r22, r18
    250c:	73 07       	cpc	r23, r19
    250e:	84 07       	cpc	r24, r20
    2510:	ba 07       	cpc	r27, r26
    2512:	20 f0       	brcs	.+8      	; 0x251c <__divsf3_pse+0xaa>
    2514:	62 1b       	sub	r22, r18
    2516:	73 0b       	sbc	r23, r19
    2518:	84 0b       	sbc	r24, r20
    251a:	ba 0b       	sbc	r27, r26
    251c:	ee 1f       	adc	r30, r30
    251e:	88 f7       	brcc	.-30     	; 0x2502 <__divsf3_pse+0x90>
    2520:	e0 95       	com	r30
    2522:	08 95       	ret

00002524 <__fixsfsi>:
    2524:	04 d0       	rcall	.+8      	; 0x252e <__fixunssfsi>
    2526:	68 94       	set
    2528:	b1 11       	cpse	r27, r1
    252a:	d9 c0       	rjmp	.+434    	; 0x26de <__fp_szero>
    252c:	08 95       	ret

0000252e <__fixunssfsi>:
    252e:	bc d0       	rcall	.+376    	; 0x26a8 <__fp_splitA>
    2530:	88 f0       	brcs	.+34     	; 0x2554 <__fixunssfsi+0x26>
    2532:	9f 57       	subi	r25, 0x7F	; 127
    2534:	90 f0       	brcs	.+36     	; 0x255a <__fixunssfsi+0x2c>
    2536:	b9 2f       	mov	r27, r25
    2538:	99 27       	eor	r25, r25
    253a:	b7 51       	subi	r27, 0x17	; 23
    253c:	a0 f0       	brcs	.+40     	; 0x2566 <__fixunssfsi+0x38>
    253e:	d1 f0       	breq	.+52     	; 0x2574 <__fixunssfsi+0x46>
    2540:	66 0f       	add	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	88 1f       	adc	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	1a f0       	brmi	.+6      	; 0x2550 <__fixunssfsi+0x22>
    254a:	ba 95       	dec	r27
    254c:	c9 f7       	brne	.-14     	; 0x2540 <__fixunssfsi+0x12>
    254e:	12 c0       	rjmp	.+36     	; 0x2574 <__fixunssfsi+0x46>
    2550:	b1 30       	cpi	r27, 0x01	; 1
    2552:	81 f0       	breq	.+32     	; 0x2574 <__fixunssfsi+0x46>
    2554:	c3 d0       	rcall	.+390    	; 0x26dc <__fp_zero>
    2556:	b1 e0       	ldi	r27, 0x01	; 1
    2558:	08 95       	ret
    255a:	c0 c0       	rjmp	.+384    	; 0x26dc <__fp_zero>
    255c:	67 2f       	mov	r22, r23
    255e:	78 2f       	mov	r23, r24
    2560:	88 27       	eor	r24, r24
    2562:	b8 5f       	subi	r27, 0xF8	; 248
    2564:	39 f0       	breq	.+14     	; 0x2574 <__fixunssfsi+0x46>
    2566:	b9 3f       	cpi	r27, 0xF9	; 249
    2568:	cc f3       	brlt	.-14     	; 0x255c <__fixunssfsi+0x2e>
    256a:	86 95       	lsr	r24
    256c:	77 95       	ror	r23
    256e:	67 95       	ror	r22
    2570:	b3 95       	inc	r27
    2572:	d9 f7       	brne	.-10     	; 0x256a <__fixunssfsi+0x3c>
    2574:	3e f4       	brtc	.+14     	; 0x2584 <__fixunssfsi+0x56>
    2576:	90 95       	com	r25
    2578:	80 95       	com	r24
    257a:	70 95       	com	r23
    257c:	61 95       	neg	r22
    257e:	7f 4f       	sbci	r23, 0xFF	; 255
    2580:	8f 4f       	sbci	r24, 0xFF	; 255
    2582:	9f 4f       	sbci	r25, 0xFF	; 255
    2584:	08 95       	ret

00002586 <__floatunsisf>:
    2586:	e8 94       	clt
    2588:	09 c0       	rjmp	.+18     	; 0x259c <__floatsisf+0x12>

0000258a <__floatsisf>:
    258a:	97 fb       	bst	r25, 7
    258c:	3e f4       	brtc	.+14     	; 0x259c <__floatsisf+0x12>
    258e:	90 95       	com	r25
    2590:	80 95       	com	r24
    2592:	70 95       	com	r23
    2594:	61 95       	neg	r22
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	8f 4f       	sbci	r24, 0xFF	; 255
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	99 23       	and	r25, r25
    259e:	a9 f0       	breq	.+42     	; 0x25ca <__floatsisf+0x40>
    25a0:	f9 2f       	mov	r31, r25
    25a2:	96 e9       	ldi	r25, 0x96	; 150
    25a4:	bb 27       	eor	r27, r27
    25a6:	93 95       	inc	r25
    25a8:	f6 95       	lsr	r31
    25aa:	87 95       	ror	r24
    25ac:	77 95       	ror	r23
    25ae:	67 95       	ror	r22
    25b0:	b7 95       	ror	r27
    25b2:	f1 11       	cpse	r31, r1
    25b4:	f8 cf       	rjmp	.-16     	; 0x25a6 <__floatsisf+0x1c>
    25b6:	fa f4       	brpl	.+62     	; 0x25f6 <__floatsisf+0x6c>
    25b8:	bb 0f       	add	r27, r27
    25ba:	11 f4       	brne	.+4      	; 0x25c0 <__floatsisf+0x36>
    25bc:	60 ff       	sbrs	r22, 0
    25be:	1b c0       	rjmp	.+54     	; 0x25f6 <__floatsisf+0x6c>
    25c0:	6f 5f       	subi	r22, 0xFF	; 255
    25c2:	7f 4f       	sbci	r23, 0xFF	; 255
    25c4:	8f 4f       	sbci	r24, 0xFF	; 255
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	16 c0       	rjmp	.+44     	; 0x25f6 <__floatsisf+0x6c>
    25ca:	88 23       	and	r24, r24
    25cc:	11 f0       	breq	.+4      	; 0x25d2 <__floatsisf+0x48>
    25ce:	96 e9       	ldi	r25, 0x96	; 150
    25d0:	11 c0       	rjmp	.+34     	; 0x25f4 <__floatsisf+0x6a>
    25d2:	77 23       	and	r23, r23
    25d4:	21 f0       	breq	.+8      	; 0x25de <__floatsisf+0x54>
    25d6:	9e e8       	ldi	r25, 0x8E	; 142
    25d8:	87 2f       	mov	r24, r23
    25da:	76 2f       	mov	r23, r22
    25dc:	05 c0       	rjmp	.+10     	; 0x25e8 <__floatsisf+0x5e>
    25de:	66 23       	and	r22, r22
    25e0:	71 f0       	breq	.+28     	; 0x25fe <__floatsisf+0x74>
    25e2:	96 e8       	ldi	r25, 0x86	; 134
    25e4:	86 2f       	mov	r24, r22
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	2a f0       	brmi	.+10     	; 0x25f6 <__floatsisf+0x6c>
    25ec:	9a 95       	dec	r25
    25ee:	66 0f       	add	r22, r22
    25f0:	77 1f       	adc	r23, r23
    25f2:	88 1f       	adc	r24, r24
    25f4:	da f7       	brpl	.-10     	; 0x25ec <__floatsisf+0x62>
    25f6:	88 0f       	add	r24, r24
    25f8:	96 95       	lsr	r25
    25fa:	87 95       	ror	r24
    25fc:	97 f9       	bld	r25, 7
    25fe:	08 95       	ret

00002600 <__fp_cmp>:
    2600:	99 0f       	add	r25, r25
    2602:	00 08       	sbc	r0, r0
    2604:	55 0f       	add	r21, r21
    2606:	aa 0b       	sbc	r26, r26
    2608:	e0 e8       	ldi	r30, 0x80	; 128
    260a:	fe ef       	ldi	r31, 0xFE	; 254
    260c:	16 16       	cp	r1, r22
    260e:	17 06       	cpc	r1, r23
    2610:	e8 07       	cpc	r30, r24
    2612:	f9 07       	cpc	r31, r25
    2614:	c0 f0       	brcs	.+48     	; 0x2646 <__fp_cmp+0x46>
    2616:	12 16       	cp	r1, r18
    2618:	13 06       	cpc	r1, r19
    261a:	e4 07       	cpc	r30, r20
    261c:	f5 07       	cpc	r31, r21
    261e:	98 f0       	brcs	.+38     	; 0x2646 <__fp_cmp+0x46>
    2620:	62 1b       	sub	r22, r18
    2622:	73 0b       	sbc	r23, r19
    2624:	84 0b       	sbc	r24, r20
    2626:	95 0b       	sbc	r25, r21
    2628:	39 f4       	brne	.+14     	; 0x2638 <__fp_cmp+0x38>
    262a:	0a 26       	eor	r0, r26
    262c:	61 f0       	breq	.+24     	; 0x2646 <__fp_cmp+0x46>
    262e:	23 2b       	or	r18, r19
    2630:	24 2b       	or	r18, r20
    2632:	25 2b       	or	r18, r21
    2634:	21 f4       	brne	.+8      	; 0x263e <__fp_cmp+0x3e>
    2636:	08 95       	ret
    2638:	0a 26       	eor	r0, r26
    263a:	09 f4       	brne	.+2      	; 0x263e <__fp_cmp+0x3e>
    263c:	a1 40       	sbci	r26, 0x01	; 1
    263e:	a6 95       	lsr	r26
    2640:	8f ef       	ldi	r24, 0xFF	; 255
    2642:	81 1d       	adc	r24, r1
    2644:	81 1d       	adc	r24, r1
    2646:	08 95       	ret

00002648 <__fp_inf>:
    2648:	97 f9       	bld	r25, 7
    264a:	9f 67       	ori	r25, 0x7F	; 127
    264c:	80 e8       	ldi	r24, 0x80	; 128
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	08 95       	ret

00002654 <__fp_nan>:
    2654:	9f ef       	ldi	r25, 0xFF	; 255
    2656:	80 ec       	ldi	r24, 0xC0	; 192
    2658:	08 95       	ret

0000265a <__fp_pscA>:
    265a:	00 24       	eor	r0, r0
    265c:	0a 94       	dec	r0
    265e:	16 16       	cp	r1, r22
    2660:	17 06       	cpc	r1, r23
    2662:	18 06       	cpc	r1, r24
    2664:	09 06       	cpc	r0, r25
    2666:	08 95       	ret

00002668 <__fp_pscB>:
    2668:	00 24       	eor	r0, r0
    266a:	0a 94       	dec	r0
    266c:	12 16       	cp	r1, r18
    266e:	13 06       	cpc	r1, r19
    2670:	14 06       	cpc	r1, r20
    2672:	05 06       	cpc	r0, r21
    2674:	08 95       	ret

00002676 <__fp_round>:
    2676:	09 2e       	mov	r0, r25
    2678:	03 94       	inc	r0
    267a:	00 0c       	add	r0, r0
    267c:	11 f4       	brne	.+4      	; 0x2682 <__fp_round+0xc>
    267e:	88 23       	and	r24, r24
    2680:	52 f0       	brmi	.+20     	; 0x2696 <__fp_round+0x20>
    2682:	bb 0f       	add	r27, r27
    2684:	40 f4       	brcc	.+16     	; 0x2696 <__fp_round+0x20>
    2686:	bf 2b       	or	r27, r31
    2688:	11 f4       	brne	.+4      	; 0x268e <__fp_round+0x18>
    268a:	60 ff       	sbrs	r22, 0
    268c:	04 c0       	rjmp	.+8      	; 0x2696 <__fp_round+0x20>
    268e:	6f 5f       	subi	r22, 0xFF	; 255
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	08 95       	ret

00002698 <__fp_split3>:
    2698:	57 fd       	sbrc	r21, 7
    269a:	90 58       	subi	r25, 0x80	; 128
    269c:	44 0f       	add	r20, r20
    269e:	55 1f       	adc	r21, r21
    26a0:	59 f0       	breq	.+22     	; 0x26b8 <__fp_splitA+0x10>
    26a2:	5f 3f       	cpi	r21, 0xFF	; 255
    26a4:	71 f0       	breq	.+28     	; 0x26c2 <__fp_splitA+0x1a>
    26a6:	47 95       	ror	r20

000026a8 <__fp_splitA>:
    26a8:	88 0f       	add	r24, r24
    26aa:	97 fb       	bst	r25, 7
    26ac:	99 1f       	adc	r25, r25
    26ae:	61 f0       	breq	.+24     	; 0x26c8 <__fp_splitA+0x20>
    26b0:	9f 3f       	cpi	r25, 0xFF	; 255
    26b2:	79 f0       	breq	.+30     	; 0x26d2 <__fp_splitA+0x2a>
    26b4:	87 95       	ror	r24
    26b6:	08 95       	ret
    26b8:	12 16       	cp	r1, r18
    26ba:	13 06       	cpc	r1, r19
    26bc:	14 06       	cpc	r1, r20
    26be:	55 1f       	adc	r21, r21
    26c0:	f2 cf       	rjmp	.-28     	; 0x26a6 <__fp_split3+0xe>
    26c2:	46 95       	lsr	r20
    26c4:	f1 df       	rcall	.-30     	; 0x26a8 <__fp_splitA>
    26c6:	08 c0       	rjmp	.+16     	; 0x26d8 <__fp_splitA+0x30>
    26c8:	16 16       	cp	r1, r22
    26ca:	17 06       	cpc	r1, r23
    26cc:	18 06       	cpc	r1, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	f1 cf       	rjmp	.-30     	; 0x26b4 <__fp_splitA+0xc>
    26d2:	86 95       	lsr	r24
    26d4:	71 05       	cpc	r23, r1
    26d6:	61 05       	cpc	r22, r1
    26d8:	08 94       	sec
    26da:	08 95       	ret

000026dc <__fp_zero>:
    26dc:	e8 94       	clt

000026de <__fp_szero>:
    26de:	bb 27       	eor	r27, r27
    26e0:	66 27       	eor	r22, r22
    26e2:	77 27       	eor	r23, r23
    26e4:	cb 01       	movw	r24, r22
    26e6:	97 f9       	bld	r25, 7
    26e8:	08 95       	ret

000026ea <__gesf2>:
    26ea:	8a df       	rcall	.-236    	; 0x2600 <__fp_cmp>
    26ec:	08 f4       	brcc	.+2      	; 0x26f0 <__gesf2+0x6>
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    26f0:	08 95       	ret

000026f2 <__mulsf3>:
    26f2:	0b d0       	rcall	.+22     	; 0x270a <__mulsf3x>
    26f4:	c0 cf       	rjmp	.-128    	; 0x2676 <__fp_round>
    26f6:	b1 df       	rcall	.-158    	; 0x265a <__fp_pscA>
    26f8:	28 f0       	brcs	.+10     	; 0x2704 <__mulsf3+0x12>
    26fa:	b6 df       	rcall	.-148    	; 0x2668 <__fp_pscB>
    26fc:	18 f0       	brcs	.+6      	; 0x2704 <__mulsf3+0x12>
    26fe:	95 23       	and	r25, r21
    2700:	09 f0       	breq	.+2      	; 0x2704 <__mulsf3+0x12>
    2702:	a2 cf       	rjmp	.-188    	; 0x2648 <__fp_inf>
    2704:	a7 cf       	rjmp	.-178    	; 0x2654 <__fp_nan>
    2706:	11 24       	eor	r1, r1
    2708:	ea cf       	rjmp	.-44     	; 0x26de <__fp_szero>

0000270a <__mulsf3x>:
    270a:	c6 df       	rcall	.-116    	; 0x2698 <__fp_split3>
    270c:	a0 f3       	brcs	.-24     	; 0x26f6 <__mulsf3+0x4>

0000270e <__mulsf3_pse>:
    270e:	95 9f       	mul	r25, r21
    2710:	d1 f3       	breq	.-12     	; 0x2706 <__mulsf3+0x14>
    2712:	95 0f       	add	r25, r21
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	55 1f       	adc	r21, r21
    2718:	62 9f       	mul	r22, r18
    271a:	f0 01       	movw	r30, r0
    271c:	72 9f       	mul	r23, r18
    271e:	bb 27       	eor	r27, r27
    2720:	f0 0d       	add	r31, r0
    2722:	b1 1d       	adc	r27, r1
    2724:	63 9f       	mul	r22, r19
    2726:	aa 27       	eor	r26, r26
    2728:	f0 0d       	add	r31, r0
    272a:	b1 1d       	adc	r27, r1
    272c:	aa 1f       	adc	r26, r26
    272e:	64 9f       	mul	r22, r20
    2730:	66 27       	eor	r22, r22
    2732:	b0 0d       	add	r27, r0
    2734:	a1 1d       	adc	r26, r1
    2736:	66 1f       	adc	r22, r22
    2738:	82 9f       	mul	r24, r18
    273a:	22 27       	eor	r18, r18
    273c:	b0 0d       	add	r27, r0
    273e:	a1 1d       	adc	r26, r1
    2740:	62 1f       	adc	r22, r18
    2742:	73 9f       	mul	r23, r19
    2744:	b0 0d       	add	r27, r0
    2746:	a1 1d       	adc	r26, r1
    2748:	62 1f       	adc	r22, r18
    274a:	83 9f       	mul	r24, r19
    274c:	a0 0d       	add	r26, r0
    274e:	61 1d       	adc	r22, r1
    2750:	22 1f       	adc	r18, r18
    2752:	74 9f       	mul	r23, r20
    2754:	33 27       	eor	r19, r19
    2756:	a0 0d       	add	r26, r0
    2758:	61 1d       	adc	r22, r1
    275a:	23 1f       	adc	r18, r19
    275c:	84 9f       	mul	r24, r20
    275e:	60 0d       	add	r22, r0
    2760:	21 1d       	adc	r18, r1
    2762:	82 2f       	mov	r24, r18
    2764:	76 2f       	mov	r23, r22
    2766:	6a 2f       	mov	r22, r26
    2768:	11 24       	eor	r1, r1
    276a:	9f 57       	subi	r25, 0x7F	; 127
    276c:	50 40       	sbci	r21, 0x00	; 0
    276e:	8a f0       	brmi	.+34     	; 0x2792 <__mulsf3_pse+0x84>
    2770:	e1 f0       	breq	.+56     	; 0x27aa <__mulsf3_pse+0x9c>
    2772:	88 23       	and	r24, r24
    2774:	4a f0       	brmi	.+18     	; 0x2788 <__mulsf3_pse+0x7a>
    2776:	ee 0f       	add	r30, r30
    2778:	ff 1f       	adc	r31, r31
    277a:	bb 1f       	adc	r27, r27
    277c:	66 1f       	adc	r22, r22
    277e:	77 1f       	adc	r23, r23
    2780:	88 1f       	adc	r24, r24
    2782:	91 50       	subi	r25, 0x01	; 1
    2784:	50 40       	sbci	r21, 0x00	; 0
    2786:	a9 f7       	brne	.-22     	; 0x2772 <__mulsf3_pse+0x64>
    2788:	9e 3f       	cpi	r25, 0xFE	; 254
    278a:	51 05       	cpc	r21, r1
    278c:	70 f0       	brcs	.+28     	; 0x27aa <__mulsf3_pse+0x9c>
    278e:	5c cf       	rjmp	.-328    	; 0x2648 <__fp_inf>
    2790:	a6 cf       	rjmp	.-180    	; 0x26de <__fp_szero>
    2792:	5f 3f       	cpi	r21, 0xFF	; 255
    2794:	ec f3       	brlt	.-6      	; 0x2790 <__mulsf3_pse+0x82>
    2796:	98 3e       	cpi	r25, 0xE8	; 232
    2798:	dc f3       	brlt	.-10     	; 0x2790 <__mulsf3_pse+0x82>
    279a:	86 95       	lsr	r24
    279c:	77 95       	ror	r23
    279e:	67 95       	ror	r22
    27a0:	b7 95       	ror	r27
    27a2:	f7 95       	ror	r31
    27a4:	e7 95       	ror	r30
    27a6:	9f 5f       	subi	r25, 0xFF	; 255
    27a8:	c1 f7       	brne	.-16     	; 0x279a <__mulsf3_pse+0x8c>
    27aa:	fe 2b       	or	r31, r30
    27ac:	88 0f       	add	r24, r24
    27ae:	91 1d       	adc	r25, r1
    27b0:	96 95       	lsr	r25
    27b2:	87 95       	ror	r24
    27b4:	97 f9       	bld	r25, 7
    27b6:	08 95       	ret

000027b8 <pow>:
    27b8:	fa 01       	movw	r30, r20
    27ba:	ee 0f       	add	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	30 96       	adiw	r30, 0x00	; 0
    27c0:	21 05       	cpc	r18, r1
    27c2:	31 05       	cpc	r19, r1
    27c4:	99 f1       	breq	.+102    	; 0x282c <pow+0x74>
    27c6:	61 15       	cp	r22, r1
    27c8:	71 05       	cpc	r23, r1
    27ca:	61 f4       	brne	.+24     	; 0x27e4 <pow+0x2c>
    27cc:	80 38       	cpi	r24, 0x80	; 128
    27ce:	bf e3       	ldi	r27, 0x3F	; 63
    27d0:	9b 07       	cpc	r25, r27
    27d2:	49 f1       	breq	.+82     	; 0x2826 <pow+0x6e>
    27d4:	68 94       	set
    27d6:	90 38       	cpi	r25, 0x80	; 128
    27d8:	81 05       	cpc	r24, r1
    27da:	61 f0       	breq	.+24     	; 0x27f4 <pow+0x3c>
    27dc:	80 38       	cpi	r24, 0x80	; 128
    27de:	bf ef       	ldi	r27, 0xFF	; 255
    27e0:	9b 07       	cpc	r25, r27
    27e2:	41 f0       	breq	.+16     	; 0x27f4 <pow+0x3c>
    27e4:	99 23       	and	r25, r25
    27e6:	42 f5       	brpl	.+80     	; 0x2838 <pow+0x80>
    27e8:	ff 3f       	cpi	r31, 0xFF	; 255
    27ea:	e1 05       	cpc	r30, r1
    27ec:	31 05       	cpc	r19, r1
    27ee:	21 05       	cpc	r18, r1
    27f0:	11 f1       	breq	.+68     	; 0x2836 <pow+0x7e>
    27f2:	e8 94       	clt
    27f4:	08 94       	sec
    27f6:	e7 95       	ror	r30
    27f8:	d9 01       	movw	r26, r18
    27fa:	aa 23       	and	r26, r26
    27fc:	29 f4       	brne	.+10     	; 0x2808 <pow+0x50>
    27fe:	ab 2f       	mov	r26, r27
    2800:	be 2f       	mov	r27, r30
    2802:	f8 5f       	subi	r31, 0xF8	; 248
    2804:	d0 f3       	brcs	.-12     	; 0x27fa <pow+0x42>
    2806:	10 c0       	rjmp	.+32     	; 0x2828 <pow+0x70>
    2808:	ff 5f       	subi	r31, 0xFF	; 255
    280a:	70 f4       	brcc	.+28     	; 0x2828 <pow+0x70>
    280c:	a6 95       	lsr	r26
    280e:	e0 f7       	brcc	.-8      	; 0x2808 <pow+0x50>
    2810:	f7 39       	cpi	r31, 0x97	; 151
    2812:	50 f0       	brcs	.+20     	; 0x2828 <pow+0x70>
    2814:	19 f0       	breq	.+6      	; 0x281c <pow+0x64>
    2816:	ff 3a       	cpi	r31, 0xAF	; 175
    2818:	38 f4       	brcc	.+14     	; 0x2828 <pow+0x70>
    281a:	9f 77       	andi	r25, 0x7F	; 127
    281c:	9f 93       	push	r25
    281e:	0c d0       	rcall	.+24     	; 0x2838 <pow+0x80>
    2820:	0f 90       	pop	r0
    2822:	07 fc       	sbrc	r0, 7
    2824:	90 58       	subi	r25, 0x80	; 128
    2826:	08 95       	ret
    2828:	3e f0       	brts	.+14     	; 0x2838 <pow+0x80>
    282a:	14 cf       	rjmp	.-472    	; 0x2654 <__fp_nan>
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	80 e8       	ldi	r24, 0x80	; 128
    2832:	9f e3       	ldi	r25, 0x3F	; 63
    2834:	08 95       	ret
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	9f 77       	andi	r25, 0x7F	; 127
    283a:	5f 93       	push	r21
    283c:	4f 93       	push	r20
    283e:	3f 93       	push	r19
    2840:	2f 93       	push	r18
    2842:	9e d0       	rcall	.+316    	; 0x2980 <log>
    2844:	2f 91       	pop	r18
    2846:	3f 91       	pop	r19
    2848:	4f 91       	pop	r20
    284a:	5f 91       	pop	r21
    284c:	52 df       	rcall	.-348    	; 0x26f2 <__mulsf3>
    284e:	05 c0       	rjmp	.+10     	; 0x285a <exp>
    2850:	19 f4       	brne	.+6      	; 0x2858 <pow+0xa0>
    2852:	0e f0       	brts	.+2      	; 0x2856 <pow+0x9e>
    2854:	f9 ce       	rjmp	.-526    	; 0x2648 <__fp_inf>
    2856:	42 cf       	rjmp	.-380    	; 0x26dc <__fp_zero>
    2858:	fd ce       	rjmp	.-518    	; 0x2654 <__fp_nan>

0000285a <exp>:
    285a:	26 df       	rcall	.-436    	; 0x26a8 <__fp_splitA>
    285c:	c8 f3       	brcs	.-14     	; 0x2850 <pow+0x98>
    285e:	96 38       	cpi	r25, 0x86	; 134
    2860:	c0 f7       	brcc	.-16     	; 0x2852 <pow+0x9a>
    2862:	07 f8       	bld	r0, 7
    2864:	0f 92       	push	r0
    2866:	e8 94       	clt
    2868:	2b e3       	ldi	r18, 0x3B	; 59
    286a:	3a ea       	ldi	r19, 0xAA	; 170
    286c:	48 eb       	ldi	r20, 0xB8	; 184
    286e:	5f e7       	ldi	r21, 0x7F	; 127
    2870:	4e df       	rcall	.-356    	; 0x270e <__mulsf3_pse>
    2872:	0f 92       	push	r0
    2874:	0f 92       	push	r0
    2876:	0f 92       	push	r0
    2878:	4d b7       	in	r20, 0x3d	; 61
    287a:	5e b7       	in	r21, 0x3e	; 62
    287c:	0f 92       	push	r0
    287e:	c0 d0       	rcall	.+384    	; 0x2a00 <modf>
    2880:	ea e5       	ldi	r30, 0x5A	; 90
    2882:	f1 e0       	ldi	r31, 0x01	; 1
    2884:	16 d0       	rcall	.+44     	; 0x28b2 <__fp_powser>
    2886:	4f 91       	pop	r20
    2888:	5f 91       	pop	r21
    288a:	ef 91       	pop	r30
    288c:	ff 91       	pop	r31
    288e:	e5 95       	asr	r30
    2890:	ee 1f       	adc	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	49 f0       	breq	.+18     	; 0x28a8 <exp+0x4e>
    2896:	fe 57       	subi	r31, 0x7E	; 126
    2898:	e0 68       	ori	r30, 0x80	; 128
    289a:	44 27       	eor	r20, r20
    289c:	ee 0f       	add	r30, r30
    289e:	44 1f       	adc	r20, r20
    28a0:	fa 95       	dec	r31
    28a2:	e1 f7       	brne	.-8      	; 0x289c <exp+0x42>
    28a4:	41 95       	neg	r20
    28a6:	55 0b       	sbc	r21, r21
    28a8:	32 d0       	rcall	.+100    	; 0x290e <ldexp>
    28aa:	0f 90       	pop	r0
    28ac:	07 fe       	sbrs	r0, 7
    28ae:	26 c0       	rjmp	.+76     	; 0x28fc <inverse>
    28b0:	08 95       	ret

000028b2 <__fp_powser>:
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	1f 93       	push	r17
    28b8:	0f 93       	push	r16
    28ba:	ff 92       	push	r15
    28bc:	ef 92       	push	r14
    28be:	df 92       	push	r13
    28c0:	7b 01       	movw	r14, r22
    28c2:	8c 01       	movw	r16, r24
    28c4:	68 94       	set
    28c6:	05 c0       	rjmp	.+10     	; 0x28d2 <__fp_powser+0x20>
    28c8:	da 2e       	mov	r13, r26
    28ca:	ef 01       	movw	r28, r30
    28cc:	1e df       	rcall	.-452    	; 0x270a <__mulsf3x>
    28ce:	fe 01       	movw	r30, r28
    28d0:	e8 94       	clt
    28d2:	a5 91       	lpm	r26, Z+
    28d4:	25 91       	lpm	r18, Z+
    28d6:	35 91       	lpm	r19, Z+
    28d8:	45 91       	lpm	r20, Z+
    28da:	55 91       	lpm	r21, Z+
    28dc:	ae f3       	brts	.-22     	; 0x28c8 <__fp_powser+0x16>
    28de:	ef 01       	movw	r28, r30
    28e0:	62 dd       	rcall	.-1340   	; 0x23a6 <__addsf3x>
    28e2:	fe 01       	movw	r30, r28
    28e4:	97 01       	movw	r18, r14
    28e6:	a8 01       	movw	r20, r16
    28e8:	da 94       	dec	r13
    28ea:	79 f7       	brne	.-34     	; 0x28ca <__fp_powser+0x18>
    28ec:	df 90       	pop	r13
    28ee:	ef 90       	pop	r14
    28f0:	ff 90       	pop	r15
    28f2:	0f 91       	pop	r16
    28f4:	1f 91       	pop	r17
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <inverse>:
    28fc:	9b 01       	movw	r18, r22
    28fe:	ac 01       	movw	r20, r24
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	70 e0       	ldi	r23, 0x00	; 0
    2904:	80 e8       	ldi	r24, 0x80	; 128
    2906:	9f e3       	ldi	r25, 0x3F	; 63
    2908:	a5 cd       	rjmp	.-1206   	; 0x2454 <__divsf3>
    290a:	9e ce       	rjmp	.-708    	; 0x2648 <__fp_inf>
    290c:	ac c0       	rjmp	.+344    	; 0x2a66 <__fp_mpack>

0000290e <ldexp>:
    290e:	cc de       	rcall	.-616    	; 0x26a8 <__fp_splitA>
    2910:	e8 f3       	brcs	.-6      	; 0x290c <inverse+0x10>
    2912:	99 23       	and	r25, r25
    2914:	d9 f3       	breq	.-10     	; 0x290c <inverse+0x10>
    2916:	94 0f       	add	r25, r20
    2918:	51 1d       	adc	r21, r1
    291a:	bb f3       	brvs	.-18     	; 0x290a <inverse+0xe>
    291c:	91 50       	subi	r25, 0x01	; 1
    291e:	50 40       	sbci	r21, 0x00	; 0
    2920:	94 f0       	brlt	.+36     	; 0x2946 <ldexp+0x38>
    2922:	59 f0       	breq	.+22     	; 0x293a <ldexp+0x2c>
    2924:	88 23       	and	r24, r24
    2926:	32 f0       	brmi	.+12     	; 0x2934 <ldexp+0x26>
    2928:	66 0f       	add	r22, r22
    292a:	77 1f       	adc	r23, r23
    292c:	88 1f       	adc	r24, r24
    292e:	91 50       	subi	r25, 0x01	; 1
    2930:	50 40       	sbci	r21, 0x00	; 0
    2932:	c1 f7       	brne	.-16     	; 0x2924 <ldexp+0x16>
    2934:	9e 3f       	cpi	r25, 0xFE	; 254
    2936:	51 05       	cpc	r21, r1
    2938:	44 f7       	brge	.-48     	; 0x290a <inverse+0xe>
    293a:	88 0f       	add	r24, r24
    293c:	91 1d       	adc	r25, r1
    293e:	96 95       	lsr	r25
    2940:	87 95       	ror	r24
    2942:	97 f9       	bld	r25, 7
    2944:	08 95       	ret
    2946:	5f 3f       	cpi	r21, 0xFF	; 255
    2948:	ac f0       	brlt	.+42     	; 0x2974 <ldexp+0x66>
    294a:	98 3e       	cpi	r25, 0xE8	; 232
    294c:	9c f0       	brlt	.+38     	; 0x2974 <ldexp+0x66>
    294e:	bb 27       	eor	r27, r27
    2950:	86 95       	lsr	r24
    2952:	77 95       	ror	r23
    2954:	67 95       	ror	r22
    2956:	b7 95       	ror	r27
    2958:	08 f4       	brcc	.+2      	; 0x295c <ldexp+0x4e>
    295a:	b1 60       	ori	r27, 0x01	; 1
    295c:	93 95       	inc	r25
    295e:	c1 f7       	brne	.-16     	; 0x2950 <ldexp+0x42>
    2960:	bb 0f       	add	r27, r27
    2962:	58 f7       	brcc	.-42     	; 0x293a <ldexp+0x2c>
    2964:	11 f4       	brne	.+4      	; 0x296a <ldexp+0x5c>
    2966:	60 ff       	sbrs	r22, 0
    2968:	e8 cf       	rjmp	.-48     	; 0x293a <ldexp+0x2c>
    296a:	6f 5f       	subi	r22, 0xFF	; 255
    296c:	7f 4f       	sbci	r23, 0xFF	; 255
    296e:	8f 4f       	sbci	r24, 0xFF	; 255
    2970:	9f 4f       	sbci	r25, 0xFF	; 255
    2972:	e3 cf       	rjmp	.-58     	; 0x293a <ldexp+0x2c>
    2974:	b4 ce       	rjmp	.-664    	; 0x26de <__fp_szero>
    2976:	0e f0       	brts	.+2      	; 0x297a <ldexp+0x6c>
    2978:	76 c0       	rjmp	.+236    	; 0x2a66 <__fp_mpack>
    297a:	6c ce       	rjmp	.-808    	; 0x2654 <__fp_nan>
    297c:	68 94       	set
    297e:	64 ce       	rjmp	.-824    	; 0x2648 <__fp_inf>

00002980 <log>:
    2980:	93 de       	rcall	.-730    	; 0x26a8 <__fp_splitA>
    2982:	c8 f3       	brcs	.-14     	; 0x2976 <ldexp+0x68>
    2984:	99 23       	and	r25, r25
    2986:	d1 f3       	breq	.-12     	; 0x297c <ldexp+0x6e>
    2988:	c6 f3       	brts	.-16     	; 0x297a <ldexp+0x6c>
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	1f 93       	push	r17
    2990:	0f 93       	push	r16
    2992:	ff 92       	push	r15
    2994:	c9 2f       	mov	r28, r25
    2996:	dd 27       	eor	r29, r29
    2998:	88 23       	and	r24, r24
    299a:	2a f0       	brmi	.+10     	; 0x29a6 <log+0x26>
    299c:	21 97       	sbiw	r28, 0x01	; 1
    299e:	66 0f       	add	r22, r22
    29a0:	77 1f       	adc	r23, r23
    29a2:	88 1f       	adc	r24, r24
    29a4:	da f7       	brpl	.-10     	; 0x299c <log+0x1c>
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f eb       	ldi	r21, 0xBF	; 191
    29ae:	9f e3       	ldi	r25, 0x3F	; 63
    29b0:	88 39       	cpi	r24, 0x98	; 152
    29b2:	20 f0       	brcs	.+8      	; 0x29bc <log+0x3c>
    29b4:	80 3e       	cpi	r24, 0xE0	; 224
    29b6:	30 f0       	brcs	.+12     	; 0x29c4 <log+0x44>
    29b8:	21 96       	adiw	r28, 0x01	; 1
    29ba:	8f 77       	andi	r24, 0x7F	; 127
    29bc:	e3 dc       	rcall	.-1594   	; 0x2384 <__addsf3>
    29be:	e2 e8       	ldi	r30, 0x82	; 130
    29c0:	f1 e0       	ldi	r31, 0x01	; 1
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <log+0x4a>
    29c4:	df dc       	rcall	.-1602   	; 0x2384 <__addsf3>
    29c6:	ef ea       	ldi	r30, 0xAF	; 175
    29c8:	f1 e0       	ldi	r31, 0x01	; 1
    29ca:	73 df       	rcall	.-282    	; 0x28b2 <__fp_powser>
    29cc:	8b 01       	movw	r16, r22
    29ce:	be 01       	movw	r22, r28
    29d0:	ec 01       	movw	r28, r24
    29d2:	fb 2e       	mov	r15, r27
    29d4:	6f 57       	subi	r22, 0x7F	; 127
    29d6:	71 09       	sbc	r23, r1
    29d8:	75 95       	asr	r23
    29da:	77 1f       	adc	r23, r23
    29dc:	88 0b       	sbc	r24, r24
    29de:	99 0b       	sbc	r25, r25
    29e0:	d4 dd       	rcall	.-1112   	; 0x258a <__floatsisf>
    29e2:	28 e1       	ldi	r18, 0x18	; 24
    29e4:	32 e7       	ldi	r19, 0x72	; 114
    29e6:	41 e3       	ldi	r20, 0x31	; 49
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	8f de       	rcall	.-738    	; 0x270a <__mulsf3x>
    29ec:	af 2d       	mov	r26, r15
    29ee:	98 01       	movw	r18, r16
    29f0:	ae 01       	movw	r20, r28
    29f2:	ff 90       	pop	r15
    29f4:	0f 91       	pop	r16
    29f6:	1f 91       	pop	r17
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	d4 dc       	rcall	.-1624   	; 0x23a6 <__addsf3x>
    29fe:	3b ce       	rjmp	.-906    	; 0x2676 <__fp_round>

00002a00 <modf>:
    2a00:	fa 01       	movw	r30, r20
    2a02:	dc 01       	movw	r26, r24
    2a04:	aa 0f       	add	r26, r26
    2a06:	bb 1f       	adc	r27, r27
    2a08:	9b 01       	movw	r18, r22
    2a0a:	ac 01       	movw	r20, r24
    2a0c:	bf 57       	subi	r27, 0x7F	; 127
    2a0e:	28 f4       	brcc	.+10     	; 0x2a1a <modf+0x1a>
    2a10:	22 27       	eor	r18, r18
    2a12:	33 27       	eor	r19, r19
    2a14:	44 27       	eor	r20, r20
    2a16:	50 78       	andi	r21, 0x80	; 128
    2a18:	1f c0       	rjmp	.+62     	; 0x2a58 <modf+0x58>
    2a1a:	b7 51       	subi	r27, 0x17	; 23
    2a1c:	88 f4       	brcc	.+34     	; 0x2a40 <modf+0x40>
    2a1e:	ab 2f       	mov	r26, r27
    2a20:	00 24       	eor	r0, r0
    2a22:	46 95       	lsr	r20
    2a24:	37 95       	ror	r19
    2a26:	27 95       	ror	r18
    2a28:	01 1c       	adc	r0, r1
    2a2a:	a3 95       	inc	r26
    2a2c:	d2 f3       	brmi	.-12     	; 0x2a22 <modf+0x22>
    2a2e:	00 20       	and	r0, r0
    2a30:	69 f0       	breq	.+26     	; 0x2a4c <modf+0x4c>
    2a32:	22 0f       	add	r18, r18
    2a34:	33 1f       	adc	r19, r19
    2a36:	44 1f       	adc	r20, r20
    2a38:	b3 95       	inc	r27
    2a3a:	da f3       	brmi	.-10     	; 0x2a32 <modf+0x32>
    2a3c:	0d d0       	rcall	.+26     	; 0x2a58 <modf+0x58>
    2a3e:	a1 cc       	rjmp	.-1726   	; 0x2382 <__subsf3>
    2a40:	61 30       	cpi	r22, 0x01	; 1
    2a42:	71 05       	cpc	r23, r1
    2a44:	a0 e8       	ldi	r26, 0x80	; 128
    2a46:	8a 07       	cpc	r24, r26
    2a48:	b9 46       	sbci	r27, 0x69	; 105
    2a4a:	30 f4       	brcc	.+12     	; 0x2a58 <modf+0x58>
    2a4c:	9b 01       	movw	r18, r22
    2a4e:	ac 01       	movw	r20, r24
    2a50:	66 27       	eor	r22, r22
    2a52:	77 27       	eor	r23, r23
    2a54:	88 27       	eor	r24, r24
    2a56:	90 78       	andi	r25, 0x80	; 128
    2a58:	30 96       	adiw	r30, 0x00	; 0
    2a5a:	21 f0       	breq	.+8      	; 0x2a64 <modf+0x64>
    2a5c:	20 83       	st	Z, r18
    2a5e:	31 83       	std	Z+1, r19	; 0x01
    2a60:	42 83       	std	Z+2, r20	; 0x02
    2a62:	53 83       	std	Z+3, r21	; 0x03
    2a64:	08 95       	ret

00002a66 <__fp_mpack>:
    2a66:	9f 3f       	cpi	r25, 0xFF	; 255
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <__fp_mpack_finite+0xc>

00002a6a <__fp_mpack_finite>:
    2a6a:	91 50       	subi	r25, 0x01	; 1
    2a6c:	20 f4       	brcc	.+8      	; 0x2a76 <__fp_mpack_finite+0xc>
    2a6e:	87 95       	ror	r24
    2a70:	77 95       	ror	r23
    2a72:	67 95       	ror	r22
    2a74:	b7 95       	ror	r27
    2a76:	88 0f       	add	r24, r24
    2a78:	91 1d       	adc	r25, r1
    2a7a:	96 95       	lsr	r25
    2a7c:	87 95       	ror	r24
    2a7e:	97 f9       	bld	r25, 7
    2a80:	08 95       	ret

00002a82 <__divmodhi4>:
    2a82:	97 fb       	bst	r25, 7
    2a84:	07 2e       	mov	r0, r23
    2a86:	16 f4       	brtc	.+4      	; 0x2a8c <__divmodhi4+0xa>
    2a88:	00 94       	com	r0
    2a8a:	06 d0       	rcall	.+12     	; 0x2a98 <__divmodhi4_neg1>
    2a8c:	77 fd       	sbrc	r23, 7
    2a8e:	08 d0       	rcall	.+16     	; 0x2aa0 <__divmodhi4_neg2>
    2a90:	13 d0       	rcall	.+38     	; 0x2ab8 <__udivmodhi4>
    2a92:	07 fc       	sbrc	r0, 7
    2a94:	05 d0       	rcall	.+10     	; 0x2aa0 <__divmodhi4_neg2>
    2a96:	3e f4       	brtc	.+14     	; 0x2aa6 <__divmodhi4_exit>

00002a98 <__divmodhi4_neg1>:
    2a98:	90 95       	com	r25
    2a9a:	81 95       	neg	r24
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	08 95       	ret

00002aa0 <__divmodhi4_neg2>:
    2aa0:	70 95       	com	r23
    2aa2:	61 95       	neg	r22
    2aa4:	7f 4f       	sbci	r23, 0xFF	; 255

00002aa6 <__divmodhi4_exit>:
    2aa6:	08 95       	ret

00002aa8 <__tablejump2__>:
    2aa8:	ee 0f       	add	r30, r30
    2aaa:	ff 1f       	adc	r31, r31
    2aac:	88 1f       	adc	r24, r24
    2aae:	8b bf       	out	0x3b, r24	; 59
    2ab0:	07 90       	elpm	r0, Z+
    2ab2:	f6 91       	elpm	r31, Z
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	19 94       	eijmp

00002ab8 <__udivmodhi4>:
    2ab8:	aa 1b       	sub	r26, r26
    2aba:	bb 1b       	sub	r27, r27
    2abc:	51 e1       	ldi	r21, 0x11	; 17
    2abe:	07 c0       	rjmp	.+14     	; 0x2ace <__udivmodhi4_ep>

00002ac0 <__udivmodhi4_loop>:
    2ac0:	aa 1f       	adc	r26, r26
    2ac2:	bb 1f       	adc	r27, r27
    2ac4:	a6 17       	cp	r26, r22
    2ac6:	b7 07       	cpc	r27, r23
    2ac8:	10 f0       	brcs	.+4      	; 0x2ace <__udivmodhi4_ep>
    2aca:	a6 1b       	sub	r26, r22
    2acc:	b7 0b       	sbc	r27, r23

00002ace <__udivmodhi4_ep>:
    2ace:	88 1f       	adc	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	5a 95       	dec	r21
    2ad4:	a9 f7       	brne	.-22     	; 0x2ac0 <__udivmodhi4_loop>
    2ad6:	80 95       	com	r24
    2ad8:	90 95       	com	r25
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	08 95       	ret

00002ae0 <memcpy_P>:
    2ae0:	fb 01       	movw	r30, r22
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <memcpy_P+0xa>
    2ae6:	05 90       	lpm	r0, Z+
    2ae8:	0d 92       	st	X+, r0
    2aea:	41 50       	subi	r20, 0x01	; 1
    2aec:	50 40       	sbci	r21, 0x00	; 0
    2aee:	d8 f7       	brcc	.-10     	; 0x2ae6 <memcpy_P+0x6>
    2af0:	08 95       	ret

00002af2 <_exit>:
    2af2:	f8 94       	cli

00002af4 <__stop_program>:
    2af4:	ff cf       	rjmp	.-2      	; 0x2af4 <__stop_program>
