
Experiment-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000828  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fb  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  0000112f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	28 d0       	rcall	.+80     	; 0xc6 <main>
  76:	41 c0       	rjmp	.+130    	; 0xfa <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <bar_graph_led_pins_config>:
 */
void bar_graph_led_pins_config(void) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Make **ONLY** 2nd, 6th and 8th Bar-graph LED pins as output
	bar_graph_led_ddr_reg	|= (1 << bar_graph_led_2_pin) | (1 << bar_graph_led_6_pin) | (1 << bar_graph_led_8_pin);
  7a:	84 b1       	in	r24, 0x04	; 4
  7c:	83 62       	ori	r24, 0x23	; 35
  7e:	84 b9       	out	0x04, r24	; 4


	
	// Set **ONLY** 2nd Bar-graph LED as high (ON)
	bar_graph_led_port_reg	|=(1 << bar_graph_led_2_pin) ;
  80:	29 9a       	sbi	0x05, 1	; 5
  82:	08 95       	ret

00000084 <interrupt_sw_pin_config>:
 */
void interrupt_sw_pin_config(void) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Makes **ONLY** Interrupt Switch pin as input
	interrupt_sw_ddr_reg	&= ~(1 << interrupt_sw_pin);
  84:	52 98       	cbi	0x0a, 2	; 10

	
	// Makes **ONLY** Interrupt Switch pin internally pull-up
	interrupt_sw_port_reg	|= (1 << interrupt_sw_pin);
  86:	5a 9a       	sbi	0x0b, 2	; 11
  88:	08 95       	ret

0000008a <interrupt_switch_pressed>:
	/*
	<< TODO >> :
		1. Write an if-else statement with a condition which checks whether the Interrupt Switch is pressed or not.
		2. If the Interrupt Switch is pressed return true, else return false
	*/
	bool status = interrupt_sw_pin_reg & (1 << interrupt_sw_pin);
  8a:	89 b1       	in	r24, 0x09	; 9
  8c:	82 fb       	bst	r24, 2
  8e:	88 27       	eor	r24, r24
  90:	80 f9       	bld	r24, 0
	}
	else{

		return false;
	}
}
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	08 95       	ret

00000098 <turn_on_bar_graph_led>:
 */
void turn_on_bar_graph_led(unsigned char led_pin) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Set **ONLY** a particular Bar-graph LED pin as high (ON)
	bar_graph_led_port_reg |= (1 << led_pin);
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <turn_on_bar_graph_led+0xc>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	8a 95       	dec	r24
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <turn_on_bar_graph_led+0x8>
  a8:	29 2b       	or	r18, r25
  aa:	25 b9       	out	0x05, r18	; 5
  ac:	08 95       	ret

000000ae <turn_off_bar_graph_led>:
 */
void turn_off_bar_graph_led(unsigned char led_pin) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Set **ONLY** a particular Bar-graph LED pin as low (OFF)
	bar_graph_led_port_reg &= ~(1 << led_pin);
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <turn_off_bar_graph_led+0xc>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <turn_off_bar_graph_led+0x8>
  be:	20 95       	com	r18
  c0:	29 23       	and	r18, r25
  c2:	25 b9       	out	0x05, r18	; 5
  c4:	08 95       	ret

000000c6 <main>:
 */
int main(void) {
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	
	bar_graph_led_pins_config();									// Initialize the 2nd, 6th and 8th Bar-graph LEDs
  c6:	d9 df       	rcall	.-78     	; 0x7a <bar_graph_led_pins_config>
	interrupt_sw_pin_config();										// Initialize the Interrupt Switch
  c8:	dd df       	rcall	.-70     	; 0x84 <interrupt_sw_pin_config>
	turn_on_bar_graph_led(bar_graph_led_6_pin);
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	e5 df       	rcall	.-54     	; 0x98 <turn_on_bar_graph_led>
	
	while (1)
	{
		if ( interrupt_switch_pressed() )
  ce:	dd df       	rcall	.-70     	; 0x8a <interrupt_switch_pressed>
  d0:	88 23       	and	r24, r24
  d2:	71 f0       	breq	.+28     	; 0xf0 <main+0x2a>
		{
			turn_off_bar_graph_led(bar_graph_led_2_pin);			// Turn OFF 2nd Bar-graph LED
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	eb df       	rcall	.-42     	; 0xae <turn_off_bar_graph_led>
  d8:	80 e0       	ldi	r24, 0x00	; 0
			turn_on_bar_graph_led(bar_graph_led_8_pin);				// Turn ON 8th Bar-graph LED
  da:	de df       	rcall	.-68     	; 0x98 <turn_on_bar_graph_led>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x1c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x26>
  ec:	00 00       	nop
  ee:	ef cf       	rjmp	.-34     	; 0xce <main+0x8>
				Introducing a delay is the simplest way of mitigating for switch bounce and this process is called de-bouncing.
			*/
		}
		else
		{
			turn_on_bar_graph_led(bar_graph_led_2_pin);				// Turn ON 2nd Bar-graph LED
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	d2 df       	rcall	.-92     	; 0x98 <turn_on_bar_graph_led>
  f4:	80 e0       	ldi	r24, 0x00	; 0
			turn_off_bar_graph_led(bar_graph_led_8_pin);			// Turn OFF 8th Bar-graph LED
  f6:	db df       	rcall	.-74     	; 0xae <turn_off_bar_graph_led>
  f8:	ea cf       	rjmp	.-44     	; 0xce <main+0x8>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
