
Experiment-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000376  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001112  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c2  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c8  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000026c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048f  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009d7  00000000  00000000  00002caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	60 d0       	rcall	.+192    	; 0x15c <main>
  9c:	6a c1       	rjmp	.+724    	; 0x372 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <scrolling_loop>:


/**
 * @brief      Code to display scrolling message on LCD
 */
void scrolling_loop() {
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	a0 97       	sbiw	r28, 0x20	; 32
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
	char text[] = "Crash Course - Embedded Systems";
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	de 01       	movw	r26, r28
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	01 90       	ld	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	8a 95       	dec	r24
  ce:	e1 f7       	brne	.-8      	; 0xc8 <scrolling_loop+0x28>
	for(int i =0; i<31; i++){
		lcd_wr_char(1, 1+i, text[i]);
  d0:	49 81       	ldd	r20, Y+1	; 0x01
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	09 d1       	rcall	.+530    	; 0x2ea <lcd_wr_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <scrolling_loop+0x3e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <scrolling_loop+0x48>
  e8:	00 00       	nop
  ea:	6e 01       	movw	r12, r28
  ec:	e2 e0       	ldi	r30, 0x02	; 2
  ee:	ce 0e       	add	r12, r30
  f0:	d1 1c       	adc	r13, r1
  f2:	12 e0       	ldi	r17, 0x02	; 2
/**
 * @brief      Code to display scrolling message on LCD
 */
void scrolling_loop() {
	char text[] = "Crash Course - Embedded Systems";
	for(int i =0; i<31; i++){
  f4:	e1 2c       	mov	r14, r1
  f6:	f1 2c       	mov	r15, r1
  f8:	16 c0       	rjmp	.+44     	; 0x126 <scrolling_loop+0x86>
		lcd_wr_char(1, 1+i, text[i]);
  fa:	f6 01       	movw	r30, r12
  fc:	41 91       	ld	r20, Z+
  fe:	6f 01       	movw	r12, r30
 100:	61 2f       	mov	r22, r17
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	f2 d0       	rcall	.+484    	; 0x2ea <lcd_wr_char>
 106:	ff ef       	ldi	r31, 0xFF	; 255
 108:	21 ee       	ldi	r18, 0xE1	; 225
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	f1 50       	subi	r31, 0x01	; 1
 10e:	20 40       	sbci	r18, 0x00	; 0
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <scrolling_loop+0x6c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <scrolling_loop+0x76>
 116:	00 00       	nop
		_delay_ms(100);
		if(i > 14){
 118:	9f e0       	ldi	r25, 0x0F	; 15
 11a:	e9 16       	cp	r14, r25
 11c:	f1 04       	cpc	r15, r1
			lcd_wr_command(0x18);	
 11e:	14 f0       	brlt	.+4      	; 0x124 <scrolling_loop+0x84>
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	8b d0       	rcall	.+278    	; 0x23a <lcd_wr_command>
 124:	1f 5f       	subi	r17, 0xFF	; 255
/**
 * @brief      Code to display scrolling message on LCD
 */
void scrolling_loop() {
	char text[] = "Crash Course - Embedded Systems";
	for(int i =0; i<31; i++){
 126:	ef ef       	ldi	r30, 0xFF	; 255
 128:	ee 1a       	sub	r14, r30
 12a:	fe 0a       	sbc	r15, r30
 12c:	10 32       	cpi	r17, 0x20	; 32
		_delay_ms(100);
		if(i > 14){
			lcd_wr_command(0x18);	
		}
	} 
	lcd_wr_command(0x06);	
 12e:	29 f7       	brne	.-54     	; 0xfa <scrolling_loop+0x5a>
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	83 d0       	rcall	.+262    	; 0x23a <lcd_wr_command>
	/* 
	<< TODO >> : 
	1. Write your Logic to display the scrolling message as shown in the expected output video
	2. Display text "Crash Course - Embedded Systems" starting from 1st row and 1st column of the LCD
	*/
}
 134:	a0 96       	adiw	r28, 0x20	; 32
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	df 90       	pop	r13
 14c:	cf 90       	pop	r12
 14e:	08 95       	ret

00000150 <static_loop>:
	/* 
	<< TODO >> : 
	1. Code to display static message as shown in the expected output video
	2. Display text "e-Yantra Academy" starting from 2nd row and 1st column of the LCD
	*/
	lcd_string(2, 1, "e-Yantra Academy");
 150:	40 e2       	ldi	r20, 0x20	; 32
 152:	51 e0       	ldi	r21, 0x01	; 1
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	f1 c0       	rjmp	.+482    	; 0x33c <lcd_string>
 15a:	08 95       	ret

0000015c <main>:
 * @details    First Initializes LCD and displays static and scrolling message on LCD
 */
int main(void) {
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	lcd_port_config();					// Initialize the LCD port
 15c:	1a d0       	rcall	.+52     	; 0x192 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 15e:	92 d0       	rcall	.+292    	; 0x284 <lcd_init>
	
	while(1)
	{
		lcd_clear();					// Clears LCD
 160:	c1 d0       	rcall	.+386    	; 0x2e4 <lcd_clear>
		lcd_home();						// Sets the cursor's to home i.e. 1st row, 1st column
 162:	a2 d0       	rcall	.+324    	; 0x2a8 <lcd_home>
 164:	f5 df       	rcall	.-22     	; 0x150 <static_loop>
		
		static_loop();					// Display static text
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	87 ea       	ldi	r24, 0xA7	; 167
 16a:	91 e6       	ldi	r25, 0x61	; 97
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x10>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x1a>
		_delay_ms(2000);				// Delay of 2 seconds
		
		lcd_clear();					// Clears LCD
 176:	00 00       	nop
 178:	b5 d0       	rcall	.+362    	; 0x2e4 <lcd_clear>
		lcd_home();						// Sets the cursor's to home i.e. 1st row, 1st column
 17a:	96 d0       	rcall	.+300    	; 0x2a8 <lcd_home>
 17c:	91 df       	rcall	.-222    	; 0xa0 <scrolling_loop>
		
		scrolling_loop();				// Display scrolling text
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	87 ea       	ldi	r24, 0xA7	; 167
 182:	91 e6       	ldi	r25, 0x61	; 97
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x28>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x32>
 18e:	00 00       	nop
 190:	e7 cf       	rjmp	.-50     	; 0x160 <main+0x4>

00000192 <lcd_port_config>:
 * Example Call: lcd_port_config();
 */
void lcd_port_config(void)
{
	// Only set LCD pins direction as Output
	lcd_control_ddr_reg |= ( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
 192:	84 b1       	in	r24, 0x04	; 4
 194:	87 60       	ori	r24, 0x07	; 7
 196:	84 b9       	out	0x04, r24	; 4
	lcd_data_ddr_reg	|= ( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
 198:	8a b1       	in	r24, 0x0a	; 10
 19a:	80 6f       	ori	r24, 0xF0	; 240
 19c:	8a b9       	out	0x0a, r24	; 10
	
	// Only set LCD pins to logic 0
	lcd_control_port_reg	&=	~( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	88 7f       	andi	r24, 0xF8	; 248
 1a2:	85 b9       	out	0x05, r24	; 5
	lcd_data_port_reg		&=	~( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	08 95       	ret

000001ac <lcd_set_4bit>:
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_set_4bit+0xa>
 1b6:	00 00       	nop
 */
void lcd_set_4bit (void)
{
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 1b8:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 1ba:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 1c0:	29 9a       	sbi	0x05, 1	; 5
 1c2:	ef e1       	ldi	r30, 0x1F	; 31
 1c4:	fe e4       	ldi	r31, 0x4E	; 78
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x1a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_set_4bit+0x20>
 1cc:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 1ce:	29 98       	cbi	0x05, 1	; 5
 1d0:	ef e9       	ldi	r30, 0x9F	; 159
 1d2:	ff e0       	ldi	r31, 0x0F	; 15
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_set_4bit+0x28>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_set_4bit+0x2e>
 1da:	00 00       	nop

	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 1dc:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 1de:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
 1e0:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 1e2:	29 9a       	sbi	0x05, 1	; 5
 1e4:	ef e1       	ldi	r30, 0x1F	; 31
 1e6:	fe e4       	ldi	r31, 0x4E	; 78
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_set_4bit+0x3c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_set_4bit+0x42>
 1ee:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 1f0:	29 98       	cbi	0x05, 1	; 5
 1f2:	ef e9       	ldi	r30, 0x9F	; 159
 1f4:	ff e0       	ldi	r31, 0x0F	; 15
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_set_4bit+0x4a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_set_4bit+0x50>
 1fc:	00 00       	nop

	_delay_ms(1);	
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 1fe:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 200:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
 202:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 204:	29 9a       	sbi	0x05, 1	; 5
 206:	8f e1       	ldi	r24, 0x1F	; 31
 208:	9e e4       	ldi	r25, 0x4E	; 78
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_set_4bit+0x5e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_set_4bit+0x64>
 210:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 212:	29 98       	cbi	0x05, 1	; 5
 214:	ef e9       	ldi	r30, 0x9F	; 159
 216:	ff e0       	ldi	r31, 0x0F	; 15
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_set_4bit+0x6c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_set_4bit+0x72>
 21e:	00 00       	nop
	
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 220:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 222:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x20;							// Sending 2 to initialize LCD in 4-bit mode
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 228:	29 9a       	sbi	0x05, 1	; 5
 22a:	8f e1       	ldi	r24, 0x1F	; 31
 22c:	9e e4       	ldi	r25, 0x4E	; 78
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_set_4bit+0x82>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_set_4bit+0x88>
 234:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 236:	29 98       	cbi	0x05, 1	; 5
 238:	08 95       	ret

0000023a <lcd_wr_command>:
{
	unsigned char temp;
	
	temp = cmd;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 23a:	9b b1       	in	r25, 0x0b	; 11
 23c:	9f 70       	andi	r25, 0x0F	; 15
 23e:	9b b9       	out	0x0b, r25	; 11
	lcd_data_port_reg |= temp;
 240:	9b b1       	in	r25, 0x0b	; 11
 242:	28 2f       	mov	r18, r24
 244:	20 7f       	andi	r18, 0xF0	; 240
 246:	92 2b       	or	r25, r18
 248:	9b b9       	out	0x0b, r25	; 11
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 24a:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 24c:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 24e:	29 9a       	sbi	0x05, 1	; 5
 250:	ef e1       	ldi	r30, 0x1F	; 31
 252:	fe e4       	ldi	r31, 0x4E	; 78
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_wr_command+0x1a>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_wr_command+0x20>
 25a:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 25c:	29 98       	cbi	0x05, 1	; 5
	
	cmd = (cmd & 0x0F);
	cmd = (cmd << 4);
	lcd_data_port_reg &= 0x0F;
 25e:	9b b1       	in	r25, 0x0b	; 11
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	9b b9       	out	0x0b, r25	; 11
	lcd_data_port_reg |= cmd;
 264:	9b b1       	in	r25, 0x0b	; 11
 266:	82 95       	swap	r24
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	89 2b       	or	r24, r25
 26c:	8b b9       	out	0x0b, r24	; 11
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 26e:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 270:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 272:	29 9a       	sbi	0x05, 1	; 5
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	9e e4       	ldi	r25, 0x4E	; 78
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_wr_command+0x3e>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_wr_command+0x44>
 27e:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 280:	29 98       	cbi	0x05, 1	; 5
 282:	08 95       	ret

00000284 <lcd_init>:
 * Logic: This function initializes the LCD
 * Example Call: lcd_init();
 */
void lcd_init (void)
{
	lcd_set_4bit();
 284:	93 df       	rcall	.-218    	; 0x1ac <lcd_set_4bit>
 286:	8f e9       	ldi	r24, 0x9F	; 159
 288:	9f e0       	ldi	r25, 0x0F	; 15
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x6>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0xc>
 290:	00 00       	nop
	_delay_ms(1);
	lcd_wr_command(0x28);								// LCD 4-bit mode and 2 lines
 292:	88 e2       	ldi	r24, 0x28	; 40
 294:	d2 df       	rcall	.-92     	; 0x23a <lcd_wr_command>
	lcd_wr_command(0x01);								// Clear display screen
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	d0 df       	rcall	.-96     	; 0x23a <lcd_wr_command>
	lcd_wr_command(0x06);								// Entry mode
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	ce df       	rcall	.-100    	; 0x23a <lcd_wr_command>
	lcd_wr_command(0x0E);								// Display On and Cursor On
 29e:	8e e0       	ldi	r24, 0x0E	; 14
 2a0:	cc df       	rcall	.-104    	; 0x23a <lcd_wr_command>
 2a2:	80 e8       	ldi	r24, 0x80	; 128
	lcd_wr_command(0x80);								// LCD cursor set to Home position		
 2a4:	ca cf       	rjmp	.-108    	; 0x23a <lcd_wr_command>
 2a6:	08 95       	ret

000002a8 <lcd_home>:
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	c7 cf       	rjmp	.-114    	; 0x23a <lcd_wr_command>
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);								// LCD cursor set to Home position
 2ac:	08 95       	ret

000002ae <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	69 f0       	breq	.+26     	; 0x2cc <lcd_cursor+0x1e>
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <lcd_cursor+0xc>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <lcd_cursor+0x16>
 2b8:	08 95       	ret
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	59 f0       	breq	.+22     	; 0x2d4 <lcd_cursor+0x26>
 2be:	84 30       	cpi	r24, 0x04	; 4
 2c0:	69 f0       	breq	.+26     	; 0x2dc <lcd_cursor+0x2e>
 2c2:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2c4:	8f e7       	ldi	r24, 0x7F	; 127
 2c6:	86 0f       	add	r24, r22
 2c8:	b8 cf       	rjmp	.-144    	; 0x23a <lcd_wr_command>
 2ca:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 2cc:	8f eb       	ldi	r24, 0xBF	; 191
 2ce:	86 0f       	add	r24, r22
 2d0:	b4 cf       	rjmp	.-152    	; 0x23a <lcd_wr_command>
 2d2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2d4:	83 e9       	ldi	r24, 0x93	; 147
 2d6:	86 0f       	add	r24, r22
 2d8:	b0 cf       	rjmp	.-160    	; 0x23a <lcd_wr_command>
 2da:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 2dc:	83 ed       	ldi	r24, 0xD3	; 211
 2de:	86 0f       	add	r24, r22
 2e0:	ac cf       	rjmp	.-168    	; 0x23a <lcd_wr_command>
 2e2:	08 95       	ret

000002e4 <lcd_clear>:
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 2e6:	a9 cf       	rjmp	.-174    	; 0x23a <lcd_wr_command>
 2e8:	08 95       	ret

000002ea <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 2ea:	cf 93       	push	r28
 2ec:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 2ee:	df df       	rcall	.-66     	; 0x2ae <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 2f0:	8b b1       	in	r24, 0x0b	; 11
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= temp;
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	9c 2f       	mov	r25, r28
 2fa:	90 7f       	andi	r25, 0xF0	; 240
 2fc:	89 2b       	or	r24, r25
 2fe:	8b b9       	out	0x0b, r24	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 300:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 302:	2a 98       	cbi	0x05, 2	; 5
	
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 304:	29 9a       	sbi	0x05, 1	; 5
 306:	8f e1       	ldi	r24, 0x1F	; 31
 308:	9e e4       	ldi	r25, 0x4E	; 78
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd_wr_char+0x20>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <lcd_wr_char+0x26>
 310:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 312:	29 98       	cbi	0x05, 1	; 5
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= alpha_num_char;
 31a:	8b b1       	in	r24, 0x0b	; 11
 31c:	c2 95       	swap	r28
 31e:	c0 7f       	andi	r28, 0xF0	; 240
 320:	c8 2b       	or	r28, r24
 322:	cb b9       	out	0x0b, r28	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 324:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 326:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 328:	29 9a       	sbi	0x05, 1	; 5
 32a:	8f e1       	ldi	r24, 0x1F	; 31
 32c:	9e e4       	ldi	r25, 0x4E	; 78
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd_wr_char+0x44>
 332:	00 c0       	rjmp	.+0      	; 0x334 <lcd_wr_char+0x4a>
 334:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 336:	29 98       	cbi	0x05, 1	; 5
}
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	d8 2f       	mov	r29, r24
 346:	c6 2f       	mov	r28, r22
 348:	fa 01       	movw	r30, r20
	while(*str != '\0')
 34a:	40 81       	ld	r20, Z
 34c:	44 23       	and	r20, r20
 34e:	61 f0       	breq	.+24     	; 0x368 <lcd_string+0x2c>
 350:	8f 01       	movw	r16, r30
 352:	0f 5f       	subi	r16, 0xFF	; 255
 354:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 356:	6c 2f       	mov	r22, r28
 358:	8d 2f       	mov	r24, r29
 35a:	c7 df       	rcall	.-114    	; 0x2ea <lcd_wr_char>
		str++;
		column+=1;
 35c:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 35e:	f8 01       	movw	r30, r16
 360:	41 91       	ld	r20, Z+
 362:	8f 01       	movw	r16, r30
 364:	41 11       	cpse	r20, r1
 366:	f7 cf       	rjmp	.-18     	; 0x356 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
