
Experiment-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000799  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069e  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bd  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	09 d0       	rcall	.+18     	; 0x88 <main>
  76:	1e c0       	rjmp	.+60     	; 0xb4 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <buzzer_pin_config>:
 */
void buzzer_pin_config(void) { 
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Make 'buzzer_pin' as output
	buzzer_ddr_reg |=  ( 1 << buzzer_pin);
  7a:	56 9a       	sbi	0x0a, 6	; 10

	
	// Set 'buzzer_pin' to low initially
	buzzer_port_reg &= ~( 1 << buzzer_pin);
  7c:	5e 98       	cbi	0x0b, 6	; 11
  7e:	08 95       	ret

00000080 <buzzer_on>:
 */
void buzzer_on(void) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Set 'buzzer_pin' to high
	buzzer_port_reg |= ( 1 << buzzer_pin);
  80:	5e 9a       	sbi	0x0b, 6	; 11
  82:	08 95       	ret

00000084 <buzzer_off>:
 */
void buzzer_off(void) {
	// << NOTE >> : Use Masking and Shift Operators here
	
	// Set 'buzzer_pin' to low
	buzzer_port_reg &= ~( 1 << buzzer_pin);
  84:	5e 98       	cbi	0x0b, 6	; 11
  86:	08 95       	ret

00000088 <main>:

int main(void) {
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	
	buzzer_pin_config();				// Initialize the Buzzer
  88:	f8 df       	rcall	.-16     	; 0x7a <buzzer_pin_config>
	
	while (1)
	{
		buzzer_on();					// Turn ON the Buzzer
  8a:	fa df       	rcall	.-12     	; 0x80 <buzzer_on>
  8c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	83 ed       	ldi	r24, 0xD3	; 211
  90:	90 e3       	ldi	r25, 0x30	; 48
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0xa>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x14>
  9c:	00 00       	nop
		_delay_ms(1000);				// Delay of 1 second
		
		buzzer_off();					// Turn OFF the Buzzer
  9e:	f2 df       	rcall	.-28     	; 0x84 <buzzer_off>
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x1e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x28>
  b0:	00 00       	nop
  b2:	eb cf       	rjmp	.-42     	; 0x8a <main+0x2>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
