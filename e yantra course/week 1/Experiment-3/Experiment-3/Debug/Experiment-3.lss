
Experiment-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000be6  00000c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800126  00800126  00000ca0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001320  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fa  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000805  00000000  00000000  00002a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  0000320c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  000033c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd8  00000000  00000000  000038da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000044b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	a5 d0       	rcall	.+330    	; 0x1e6 <main>
  9c:	a2 c5       	rjmp	.+2884   	; 0xbe2 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <lcd_print_wireframe>:
*/

//<< NOTE >>: You should not change this function in order to get the required output
void lcd_print_wireframe(void)
{	
	lcd_string(1,1,"H:   D:    O:   ");
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	51 e0       	ldi	r21, 0x01	; 1
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	93 d1       	rcall	.+806    	; 0x3d0 <lcd_string>
	lcd_string(2,1,"Binary: ");
  aa:	41 e1       	ldi	r20, 0x11	; 17
  ac:	51 e0       	ldi	r21, 0x01	; 1
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	8e c1       	rjmp	.+796    	; 0x3d0 <lcd_string>
  b4:	08 95       	ret

000000b6 <lcd_print_binary>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_binary(unsigned char row_num, unsigned char col_num, unsigned char num)
{	
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	28 97       	sbiw	r28, 0x08	; 8
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	fe 01       	movw	r30, r28
  cc:	39 96       	adiw	r30, 0x09	; 9
  ce:	9e 01       	movw	r18, r28
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
	char binary_buffer[8];
    int temp =0, y=7;
    while(y >= 0){
	    temp = num%2;
	    num = num/2;
	    binary_buffer[y] = temp + 48;
  d4:	94 2f       	mov	r25, r20
  d6:	91 70       	andi	r25, 0x01	; 1
  d8:	90 5d       	subi	r25, 0xD0	; 208
  da:	46 95       	lsr	r20
  dc:	92 93       	st	-Z, r25
 */
void lcd_print_binary(unsigned char row_num, unsigned char col_num, unsigned char num)
{	
	char binary_buffer[8];
    int temp =0, y=7;
    while(y >= 0){
  de:	e2 17       	cp	r30, r18
  e0:	f3 07       	cpc	r31, r19
  e2:	c1 f7       	brne	.-16     	; 0xd4 <lcd_print_binary+0x1e>
	    temp = num%2;
	    num = num/2;
	    binary_buffer[y] = temp + 48;
	    y--;
    } 
	lcd_string(row_num, col_num, binary_buffer);
  e4:	ae 01       	movw	r20, r28
  e6:	4f 5f       	subi	r20, 0xFF	; 255
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	72 d1       	rcall	.+740    	; 0x3d0 <lcd_string>
	
}
  ec:	28 96       	adiw	r28, 0x08	; 8
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_print_octal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_octal(unsigned char row_num, unsigned char col_num, unsigned char num)
{	
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	2a 97       	sbiw	r28, 0x0a	; 10
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	d8 2e       	mov	r13, r24
 11e:	16 2f       	mov	r17, r22
		char octal_buffer[10];
		sprintf(octal_buffer, "%03o", num);
 120:	1f 92       	push	r1
 122:	4f 93       	push	r20
 124:	8a e1       	ldi	r24, 0x1A	; 26
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	9f 93       	push	r25
 12a:	8f 93       	push	r24
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	7c 01       	movw	r14, r24
 132:	9f 93       	push	r25
 134:	8f 93       	push	r24
 136:	7d d2       	rcall	.+1274   	; 0x632 <sprintf>
 138:	03 e0       	ldi	r16, 0x03	; 3
 13a:	01 0f       	add	r16, r17
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
		for(int i =0; i<3; i++){
			lcd_wr_char(row_num, col_num + i, octal_buffer[i]);
 148:	f7 01       	movw	r30, r14
 14a:	41 91       	ld	r20, Z+
 14c:	7f 01       	movw	r14, r30
 14e:	61 2f       	mov	r22, r17
 150:	8d 2d       	mov	r24, r13
 152:	15 d1       	rcall	.+554    	; 0x37e <lcd_wr_char>
 154:	1f 5f       	subi	r17, 0xFF	; 255
 */
void lcd_print_octal(unsigned char row_num, unsigned char col_num, unsigned char num)
{	
		char octal_buffer[10];
		sprintf(octal_buffer, "%03o", num);
		for(int i =0; i<3; i++){
 156:	10 13       	cpse	r17, r16
 158:	f7 cf       	rjmp	.-18     	; 0x148 <lcd_print_octal+0x4a>
		}



	
}
 15a:	2a 96       	adiw	r28, 0x0a	; 10
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	08 95       	ret

00000176 <lcd_print_decimal>:
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_decimal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
	lcd_numeric_value(row_num, col_num, num, 3);
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	23 e0       	ldi	r18, 0x03	; 3
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	44 c1       	rjmp	.+648    	; 0x406 <lcd_numeric_value>
 17e:	08 95       	ret

00000180 <lcd_print_hexadecimal>:
 * @param[in]  row_num  The row number of the LCD
 * @param[in]  col_num  The col number of the LCD
 * @param[in]  num      The number to be printed
 */
void lcd_print_hexadecimal(unsigned char row_num, unsigned char col_num, unsigned char num)
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	2a 97       	sbiw	r28, 0x0a	; 10
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
 198:	08 2f       	mov	r16, r24
 19a:	16 2f       	mov	r17, r22
	char hex_buffer[10];
	sprintf(hex_buffer, "%02x", num);
 19c:	1f 92       	push	r1
 19e:	4f 93       	push	r20
 1a0:	8f e1       	ldi	r24, 0x1F	; 31
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	9f 93       	push	r25
 1a6:	8f 93       	push	r24
 1a8:	ce 01       	movw	r24, r28
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	9f 93       	push	r25
 1ae:	8f 93       	push	r24
 1b0:	40 d2       	rcall	.+1152   	; 0x632 <sprintf>
	for(int j =0; j< 2; j++){
		lcd_wr_char(row_num, col_num+j, hex_buffer[j]);
 1b2:	49 81       	ldd	r20, Y+1	; 0x01
 1b4:	61 2f       	mov	r22, r17
 1b6:	80 2f       	mov	r24, r16
 1b8:	e2 d0       	rcall	.+452    	; 0x37e <lcd_wr_char>
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	61 0f       	add	r22, r17
 1be:	4a 81       	ldd	r20, Y+2	; 0x02
 1c0:	80 2f       	mov	r24, r16
 1c2:	dd d0       	rcall	.+442    	; 0x37e <lcd_wr_char>
		
	}	
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	2a 96       	adiw	r28, 0x0a	; 10
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <main>:
 * @return     0
 */
int main(void){
	
	
	lcd_port_config();					// Initialize the LCD port
 1e6:	1f d0       	rcall	.+62     	; 0x226 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 1e8:	97 d0       	rcall	.+302    	; 0x318 <lcd_init>
	lcd_clear();						// Clear the LCD
 1ea:	c6 d0       	rcall	.+396    	; 0x378 <lcd_clear>
 1ec:	59 df       	rcall	.-334    	; 0xa0 <lcd_print_wireframe>
	lcd_print_wireframe();				// Print wireframe on the LCD
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	4c 2f       	mov	r20, r28
	unsigned char counter = 0;

	//<< TODO >>: FILL THE BLANK FUNCTION PARAMETERS AS PER THE WIREFRAME RULES IN THE FOLLOWING LINES OF CODE
	while(1){
		lcd_print_hexadecimal( 1, 3, counter);	// Pass the relevant arguments to print hexadecimal characters on the LCD at the place specified by the wireframe
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	c4 df       	rcall	.-120    	; 0x180 <lcd_print_hexadecimal>
 1f8:	4c 2f       	mov	r20, r28
		lcd_print_decimal( 1, 8, counter);		// Pass the relevant arguments to print decimal characters on the LCD at the place specified by the wireframe
 1fa:	68 e0       	ldi	r22, 0x08	; 8
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	bb df       	rcall	.-138    	; 0x176 <lcd_print_decimal>
 200:	4c 2f       	mov	r20, r28
		lcd_print_octal( 1, 14, counter);			// Pass the relevant arguments to print octal characters on the LCD at the place specified by the wireframe
 202:	6e e0       	ldi	r22, 0x0E	; 14
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	7b df       	rcall	.-266    	; 0xfe <lcd_print_octal>
 208:	4c 2f       	mov	r20, r28
		lcd_print_binary( 2, 9, counter);		// Pass the relevant arguments to print binary characters on the LCD at the place specified by the wireframe
 20a:	69 e0       	ldi	r22, 0x09	; 9
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	53 df       	rcall	.-346    	; 0xb6 <lcd_print_binary>
 210:	cf 5f       	subi	r28, 0xFF	; 255
 212:	2f ef       	ldi	r18, 0xFF	; 255
		counter++;	// Increment the counter
 214:	89 e6       	ldi	r24, 0x69	; 105
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	98 e1       	ldi	r25, 0x18	; 24
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x32>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x3c>
 222:	00 00       	nop
 224:	e5 cf       	rjmp	.-54     	; 0x1f0 <main+0xa>

00000226 <lcd_port_config>:
 * Example Call: lcd_port_config();
 */
void lcd_port_config(void)
{
	// Only set LCD pins direction as Output
	lcd_control_ddr_reg |= ( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
 226:	84 b1       	in	r24, 0x04	; 4
 228:	87 60       	ori	r24, 0x07	; 7
 22a:	84 b9       	out	0x04, r24	; 4
	lcd_data_ddr_reg	|= ( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
 22c:	8a b1       	in	r24, 0x0a	; 10
 22e:	80 6f       	ori	r24, 0xF0	; 240
 230:	8a b9       	out	0x0a, r24	; 10
	
	// Only set LCD pins to logic 0
	lcd_control_port_reg	&=	~( ( 1 << RS_pin ) | ( 1 << RW_pin ) | ( 1 << EN_pin ) );
 232:	85 b1       	in	r24, 0x05	; 5
 234:	88 7f       	andi	r24, 0xF8	; 248
 236:	85 b9       	out	0x05, r24	; 5
	lcd_data_port_reg		&=	~( ( 1 << DB4_pin ) | ( 1 << DB5_pin ) | ( 1 << DB6_pin ) | ( 1 << DB7_pin ) );
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	8b b9       	out	0x0b, r24	; 11
 23e:	08 95       	ret

00000240 <lcd_set_4bit>:
 240:	8f e9       	ldi	r24, 0x9F	; 159
 242:	9f e0       	ldi	r25, 0x0F	; 15
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_set_4bit+0x4>
 248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_set_4bit+0xa>
 24a:	00 00       	nop
 */
void lcd_set_4bit (void)
{
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 24c:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 24e:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
 250:	80 e3       	ldi	r24, 0x30	; 48
 252:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 254:	29 9a       	sbi	0x05, 1	; 5
 256:	ef e1       	ldi	r30, 0x1F	; 31
 258:	fe e4       	ldi	r31, 0x4E	; 78
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_set_4bit+0x1a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_set_4bit+0x20>
 260:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 262:	29 98       	cbi	0x05, 1	; 5
 264:	ef e9       	ldi	r30, 0x9F	; 159
 266:	ff e0       	ldi	r31, 0x0F	; 15
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_set_4bit+0x28>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_set_4bit+0x2e>
 26e:	00 00       	nop

	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 270:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 272:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
 274:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 276:	29 9a       	sbi	0x05, 1	; 5
 278:	ef e1       	ldi	r30, 0x1F	; 31
 27a:	fe e4       	ldi	r31, 0x4E	; 78
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_set_4bit+0x3c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_set_4bit+0x42>
 282:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 284:	29 98       	cbi	0x05, 1	; 5
 286:	ef e9       	ldi	r30, 0x9F	; 159
 288:	ff e0       	ldi	r31, 0x0F	; 15
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_set_4bit+0x4a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_set_4bit+0x50>
 290:	00 00       	nop

	_delay_ms(1);	
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 292:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 294:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x30;							// Sending 3
 296:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 298:	29 9a       	sbi	0x05, 1	; 5
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_set_4bit+0x5e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_set_4bit+0x64>
 2a4:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2a6:	29 98       	cbi	0x05, 1	; 5
 2a8:	ef e9       	ldi	r30, 0x9F	; 159
 2aa:	ff e0       	ldi	r31, 0x0F	; 15
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_set_4bit+0x6c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <lcd_set_4bit+0x72>
 2b2:	00 00       	nop
	
	_delay_ms(1);
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 2b4:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2b6:	2a 98       	cbi	0x05, 2	; 5
	lcd_data_port_reg = 0x20;							// Sending 2 to initialize LCD in 4-bit mode
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	8b b9       	out	0x0b, r24	; 11
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2bc:	29 9a       	sbi	0x05, 1	; 5
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	9e e4       	ldi	r25, 0x4E	; 78
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_set_4bit+0x82>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_set_4bit+0x88>
 2c8:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2ca:	29 98       	cbi	0x05, 1	; 5
 2cc:	08 95       	ret

000002ce <lcd_wr_command>:
{
	unsigned char temp;
	
	temp = cmd;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 2ce:	9b b1       	in	r25, 0x0b	; 11
 2d0:	9f 70       	andi	r25, 0x0F	; 15
 2d2:	9b b9       	out	0x0b, r25	; 11
	lcd_data_port_reg |= temp;
 2d4:	9b b1       	in	r25, 0x0b	; 11
 2d6:	28 2f       	mov	r18, r24
 2d8:	20 7f       	andi	r18, 0xF0	; 240
 2da:	92 2b       	or	r25, r18
 2dc:	9b b9       	out	0x0b, r25	; 11
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 2de:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2e0:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2e2:	29 9a       	sbi	0x05, 1	; 5
 2e4:	ef e1       	ldi	r30, 0x1F	; 31
 2e6:	fe e4       	ldi	r31, 0x4E	; 78
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_wr_command+0x1a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_wr_command+0x20>
 2ee:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2f0:	29 98       	cbi	0x05, 1	; 5
	
	cmd = (cmd & 0x0F);
	cmd = (cmd << 4);
	lcd_data_port_reg &= 0x0F;
 2f2:	9b b1       	in	r25, 0x0b	; 11
 2f4:	9f 70       	andi	r25, 0x0F	; 15
 2f6:	9b b9       	out	0x0b, r25	; 11
	lcd_data_port_reg |= cmd;
 2f8:	9b b1       	in	r25, 0x0b	; 11
 2fa:	82 95       	swap	r24
 2fc:	80 7f       	andi	r24, 0xF0	; 240
 2fe:	89 2b       	or	r24, r25
 300:	8b b9       	out	0x0b, r24	; 11
	
	cbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Command Input
 302:	28 98       	cbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 304:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 306:	29 9a       	sbi	0x05, 1	; 5
 308:	8f e1       	ldi	r24, 0x1F	; 31
 30a:	9e e4       	ldi	r25, 0x4E	; 78
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_wr_command+0x3e>
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_wr_command+0x44>
 312:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 314:	29 98       	cbi	0x05, 1	; 5
 316:	08 95       	ret

00000318 <lcd_init>:
 * Logic: This function initializes the LCD
 * Example Call: lcd_init();
 */
void lcd_init (void)
{
	lcd_set_4bit();
 318:	93 df       	rcall	.-218    	; 0x240 <lcd_set_4bit>
 31a:	8f e9       	ldi	r24, 0x9F	; 159
 31c:	9f e0       	ldi	r25, 0x0F	; 15
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x6>
 322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_init+0xc>
 324:	00 00       	nop
	_delay_ms(1);
	lcd_wr_command(0x28);								// LCD 4-bit mode and 2 lines
 326:	88 e2       	ldi	r24, 0x28	; 40
 328:	d2 df       	rcall	.-92     	; 0x2ce <lcd_wr_command>
	lcd_wr_command(0x01);								// Clear display screen
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	d0 df       	rcall	.-96     	; 0x2ce <lcd_wr_command>
	lcd_wr_command(0x06);								// Entry mode
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	ce df       	rcall	.-100    	; 0x2ce <lcd_wr_command>
	lcd_wr_command(0x0E);								// Display On and Cursor On
 332:	8e e0       	ldi	r24, 0x0E	; 14
 334:	cc df       	rcall	.-104    	; 0x2ce <lcd_wr_command>
 336:	80 e8       	ldi	r24, 0x80	; 128
	lcd_wr_command(0x80);								// LCD cursor set to Home position		
 338:	ca cf       	rjmp	.-108    	; 0x2ce <lcd_wr_command>
 33a:	08 95       	ret

0000033c <lcd_home>:
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	c7 cf       	rjmp	.-114    	; 0x2ce <lcd_wr_command>
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);								// LCD cursor set to Home position
 340:	08 95       	ret

00000342 <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	69 f0       	breq	.+26     	; 0x360 <lcd_cursor+0x1e>
 346:	18 f4       	brcc	.+6      	; 0x34e <lcd_cursor+0xc>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	31 f0       	breq	.+12     	; 0x358 <lcd_cursor+0x16>
 34c:	08 95       	ret
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	59 f0       	breq	.+22     	; 0x368 <lcd_cursor+0x26>
 352:	84 30       	cpi	r24, 0x04	; 4
 354:	69 f0       	breq	.+26     	; 0x370 <lcd_cursor+0x2e>
 356:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 358:	8f e7       	ldi	r24, 0x7F	; 127
 35a:	86 0f       	add	r24, r22
 35c:	b8 cf       	rjmp	.-144    	; 0x2ce <lcd_wr_command>
 35e:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 360:	8f eb       	ldi	r24, 0xBF	; 191
 362:	86 0f       	add	r24, r22
 364:	b4 cf       	rjmp	.-152    	; 0x2ce <lcd_wr_command>
 366:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 368:	83 e9       	ldi	r24, 0x93	; 147
 36a:	86 0f       	add	r24, r22
 36c:	b0 cf       	rjmp	.-160    	; 0x2ce <lcd_wr_command>
 36e:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 370:	83 ed       	ldi	r24, 0xD3	; 211
 372:	86 0f       	add	r24, r22
 374:	ac cf       	rjmp	.-168    	; 0x2ce <lcd_wr_command>
 376:	08 95       	ret

00000378 <lcd_clear>:
 378:	81 e0       	ldi	r24, 0x01	; 1
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 37a:	a9 cf       	rjmp	.-174    	; 0x2ce <lcd_wr_command>
 37c:	08 95       	ret

0000037e <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 37e:	cf 93       	push	r28
 380:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 382:	df df       	rcall	.-66     	; 0x342 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 384:	8b b1       	in	r24, 0x0b	; 11
 386:	8f 70       	andi	r24, 0x0F	; 15
 388:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= temp;
 38a:	8b b1       	in	r24, 0x0b	; 11
 38c:	9c 2f       	mov	r25, r28
 38e:	90 7f       	andi	r25, 0xF0	; 240
 390:	89 2b       	or	r24, r25
 392:	8b b9       	out	0x0b, r24	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 394:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 396:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 398:	29 9a       	sbi	0x05, 1	; 5
 39a:	8f e1       	ldi	r24, 0x1F	; 31
 39c:	9e e4       	ldi	r25, 0x4E	; 78
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_wr_char+0x20>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <lcd_wr_char+0x26>
 3a4:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 3a6:	29 98       	cbi	0x05, 1	; 5
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 3a8:	8b b1       	in	r24, 0x0b	; 11
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= alpha_num_char;
 3ae:	8b b1       	in	r24, 0x0b	; 11
 3b0:	c2 95       	swap	r28
 3b2:	c0 7f       	andi	r28, 0xF0	; 240
 3b4:	c8 2b       	or	r28, r24
 3b6:	cb b9       	out	0x0b, r28	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 3b8:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 3ba:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 3bc:	29 9a       	sbi	0x05, 1	; 5
 3be:	8f e1       	ldi	r24, 0x1F	; 31
 3c0:	9e e4       	ldi	r25, 0x4E	; 78
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lcd_wr_char+0x44>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <lcd_wr_char+0x4a>
 3c8:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 3ca:	29 98       	cbi	0x05, 1	; 5
}
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	d8 2f       	mov	r29, r24
 3da:	c6 2f       	mov	r28, r22
 3dc:	fa 01       	movw	r30, r20
	while(*str != '\0')
 3de:	40 81       	ld	r20, Z
 3e0:	44 23       	and	r20, r20
 3e2:	61 f0       	breq	.+24     	; 0x3fc <lcd_string+0x2c>
 3e4:	8f 01       	movw	r16, r30
 3e6:	0f 5f       	subi	r16, 0xFF	; 255
 3e8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 3ea:	6c 2f       	mov	r22, r28
 3ec:	8d 2f       	mov	r24, r29
 3ee:	c7 df       	rcall	.-114    	; 0x37e <lcd_wr_char>
		str++;
		column+=1;
 3f0:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 3f2:	f8 01       	movw	r30, r16
 3f4:	41 91       	ld	r20, Z+
 3f6:	8f 01       	movw	r16, r30
 3f8:	41 11       	cpse	r20, r1
 3fa:	f7 cf       	rjmp	.-18     	; 0x3ea <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	08 95       	ret

00000406 <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	d8 2f       	mov	r29, r24
 414:	c6 2f       	mov	r28, r22
 416:	7a 01       	movw	r14, r20
 418:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
 41a:	93 df       	rcall	.-218    	; 0x342 <lcd_cursor>
	
	if (val < 0)
 41c:	ff 20       	and	r15, r15
 41e:	4c f4       	brge	.+18     	; 0x432 <lcd_numeric_value+0x2c>
	{
		val = 0 - val;
 420:	f1 94       	neg	r15
 422:	e1 94       	neg	r14
 424:	f1 08       	sbc	r15, r1
		lcd_string(row, column, "-");
 426:	44 e2       	ldi	r20, 0x24	; 36
 428:	51 e0       	ldi	r21, 0x01	; 1
 42a:	6c 2f       	mov	r22, r28
 42c:	8d 2f       	mov	r24, r29
 42e:	d0 df       	rcall	.-96     	; 0x3d0 <lcd_string>
		column+=1;
 430:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
 432:	dd 23       	and	r29, r29
 434:	11 f0       	breq	.+4      	; 0x43a <lcd_numeric_value+0x34>
 436:	c1 11       	cpse	r28, r1
	{
		lcd_home();
 438:	02 c0       	rjmp	.+4      	; 0x43e <lcd_numeric_value+0x38>
 43a:	80 df       	rcall	.-256    	; 0x33c <lcd_home>
	}
	
	else
	{
		lcd_cursor(row, column);
 43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_numeric_value+0x3e>
 43e:	6c 2f       	mov	r22, r28
 440:	8d 2f       	mov	r24, r29
 442:	7f df       	rcall	.-258    	; 0x342 <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
 444:	05 30       	cpi	r16, 0x05	; 5
 446:	11 05       	cpc	r17, r1
 448:	09 f0       	breq	.+2      	; 0x44c <lcd_numeric_value+0x46>
	{
		million = val/10000+48;
 44a:	ad c0       	rjmp	.+346    	; 0x5a6 <lcd_numeric_value+0x1a0>
 44c:	c7 01       	movw	r24, r14
 44e:	60 e1       	ldi	r22, 0x10	; 16
 450:	77 e2       	ldi	r23, 0x27	; 39
 452:	b9 d0       	rcall	.+370    	; 0x5c6 <__divmodhi4>
 454:	ab 01       	movw	r20, r22
 456:	40 5d       	subi	r20, 0xD0	; 208
 458:	5f 4f       	sbci	r21, 0xFF	; 255
 45a:	50 93 27 01 	sts	0x0127, r21	; 0x800127 <__data_end+0x1>
 45e:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <__data_end>
		lcd_wr_char(row ,column, million);
 462:	6c 2f       	mov	r22, r28
 464:	8d 2f       	mov	r24, r29
		column+=1;
 466:	8b df       	rcall	.-234    	; 0x37e <lcd_wr_char>
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
	{
		temp = val/1000;
 468:	cf 5f       	subi	r28, 0xFF	; 255
 46a:	c7 01       	movw	r24, r14
 46c:	68 ee       	ldi	r22, 0xE8	; 232
 46e:	73 e0       	ldi	r23, 0x03	; 3
 470:	aa d0       	rcall	.+340    	; 0x5c6 <__divmodhi4>
 472:	ab 01       	movw	r20, r22
 474:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <temp+0x1>
 478:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <temp>
		thousand = temp%10 + 48;
 47c:	9b 01       	movw	r18, r22
 47e:	ad ec       	ldi	r26, 0xCD	; 205
 480:	bc ec       	ldi	r27, 0xCC	; 204
 482:	b4 d0       	rcall	.+360    	; 0x5ec <__umulhisi3>
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	9c 01       	movw	r18, r24
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	48 1b       	sub	r20, r24
 4a8:	59 0b       	sbc	r21, r25
 4aa:	40 5d       	subi	r20, 0xD0	; 208
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	50 93 31 01 	sts	0x0131, r21	; 0x800131 <thousand+0x1>
 4b2:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <thousand>
		lcd_wr_char(row, column, thousand);
 4b6:	6c 2f       	mov	r22, r28
 4b8:	8d 2f       	mov	r24, r29
		column+=1;
 4ba:	61 df       	rcall	.-318    	; 0x37e <lcd_wr_char>
 4bc:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <lcd_numeric_value+0xc0>
 4c0:	03 30       	cpi	r16, 0x03	; 3
 4c2:	11 05       	cpc	r17, r1
	{
		temp = val/100;
 4c4:	59 f5       	brne	.+86     	; 0x51c <lcd_numeric_value+0x116>
 4c6:	c7 01       	movw	r24, r14
 4c8:	64 e6       	ldi	r22, 0x64	; 100
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	7c d0       	rcall	.+248    	; 0x5c6 <__divmodhi4>
 4ce:	ab 01       	movw	r20, r22
 4d0:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <temp+0x1>
 4d4:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <temp>
		hundred = temp%10 + 48;
 4d8:	9b 01       	movw	r18, r22
 4da:	ad ec       	ldi	r26, 0xCD	; 205
 4dc:	bc ec       	ldi	r27, 0xCC	; 204
 4de:	86 d0       	rcall	.+268    	; 0x5ec <__umulhisi3>
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	9c 01       	movw	r18, r24
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	82 0f       	add	r24, r18
 500:	93 1f       	adc	r25, r19
 502:	48 1b       	sub	r20, r24
 504:	59 0b       	sbc	r21, r25
 506:	40 5d       	subi	r20, 0xD0	; 208
 508:	5f 4f       	sbci	r21, 0xFF	; 255
 50a:	50 93 2d 01 	sts	0x012D, r21	; 0x80012d <hundred+0x1>
 50e:	40 93 2c 01 	sts	0x012C, r20	; 0x80012c <hundred>
		lcd_wr_char(row, column, hundred);
 512:	6c 2f       	mov	r22, r28
 514:	8d 2f       	mov	r24, r29
		column+=1;
 516:	33 df       	rcall	.-410    	; 0x37e <lcd_wr_char>
 518:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 2 || flag == 1)
 51a:	04 c0       	rjmp	.+8      	; 0x524 <lcd_numeric_value+0x11e>
 51c:	02 30       	cpi	r16, 0x02	; 2
 51e:	11 05       	cpc	r17, r1
 520:	09 f0       	breq	.+2      	; 0x524 <lcd_numeric_value+0x11e>
	{
		temp = val/10;
 522:	46 c0       	rjmp	.+140    	; 0x5b0 <lcd_numeric_value+0x1aa>
 524:	c7 01       	movw	r24, r14
 526:	6a e0       	ldi	r22, 0x0A	; 10
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	4d d0       	rcall	.+154    	; 0x5c6 <__divmodhi4>
 52c:	ab 01       	movw	r20, r22
 52e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <temp+0x1>
 532:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <temp>
		tens = temp%10 + 48;
 536:	9b 01       	movw	r18, r22
 538:	ad ec       	ldi	r26, 0xCD	; 205
 53a:	bc ec       	ldi	r27, 0xCC	; 204
 53c:	57 d0       	rcall	.+174    	; 0x5ec <__umulhisi3>
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	9c 01       	movw	r18, r24
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	82 0f       	add	r24, r18
 55e:	93 1f       	adc	r25, r19
 560:	48 1b       	sub	r20, r24
 562:	59 0b       	sbc	r21, r25
 564:	40 5d       	subi	r20, 0xD0	; 208
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <tens+0x1>
		lcd_wr_char(row, column, tens);
 56c:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <tens>
 570:	6c 2f       	mov	r22, r28
		column+=1;
 572:	8d 2f       	mov	r24, r29
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
	{
		unit = val%10 + 48;
 574:	04 df       	rcall	.-504    	; 0x37e <lcd_wr_char>
 576:	cf 5f       	subi	r28, 0xFF	; 255
 578:	c7 01       	movw	r24, r14
 57a:	6a e0       	ldi	r22, 0x0A	; 10
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	23 d0       	rcall	.+70     	; 0x5c6 <__divmodhi4>
 580:	ac 01       	movw	r20, r24
 582:	40 5d       	subi	r20, 0xD0	; 208
 584:	5f 4f       	sbci	r21, 0xFF	; 255
 586:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <unit+0x1>
		lcd_wr_char(row, column, unit);
 58a:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <unit>
 58e:	6c 2f       	mov	r22, r28
 590:	8d 2f       	mov	r24, r29
		column+=1;
 592:	f5 de       	rcall	.-534    	; 0x37e <lcd_wr_char>
	}
	
	if(digits > 5)
 594:	cf 5f       	subi	r28, 0xFF	; 255
 596:	06 30       	cpi	r16, 0x06	; 6
 598:	11 05       	cpc	r17, r1
	{
		lcd_wr_char(row, column, 'E');
 59a:	74 f0       	brlt	.+28     	; 0x5b8 <lcd_numeric_value+0x1b2>
 59c:	45 e4       	ldi	r20, 0x45	; 69
 59e:	6c 2f       	mov	r22, r28
 5a0:	8d 2f       	mov	r24, r29
 5a2:	ed de       	rcall	.-550    	; 0x37e <lcd_wr_char>
		column+=1;
	}
 5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <lcd_numeric_value+0x1b2>
		lcd_wr_char(row ,column, million);
		column+=1;
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
 5a6:	04 30       	cpi	r16, 0x04	; 4
 5a8:	11 05       	cpc	r17, r1
 5aa:	09 f0       	breq	.+2      	; 0x5ae <lcd_numeric_value+0x1a8>
 5ac:	89 cf       	rjmp	.-238    	; 0x4c0 <lcd_numeric_value+0xba>
 5ae:	5d cf       	rjmp	.-326    	; 0x46a <lcd_numeric_value+0x64>
		lcd_wr_char(row, column, tens);
		column+=1;
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
 5b0:	01 30       	cpi	r16, 0x01	; 1
 5b2:	11 05       	cpc	r17, r1
 5b4:	81 f7       	brne	.-32     	; 0x596 <lcd_numeric_value+0x190>
 5b6:	e0 cf       	rjmp	.-64     	; 0x578 <lcd_numeric_value+0x172>
	if(digits > 5)
	{
		lcd_wr_char(row, column, 'E');
		column+=1;
	}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	ff 90       	pop	r15
 5c2:	ef 90       	pop	r14
 5c4:	08 95       	ret

000005c6 <__divmodhi4>:
 5c6:	97 fb       	bst	r25, 7
 5c8:	07 2e       	mov	r0, r23
 5ca:	16 f4       	brtc	.+4      	; 0x5d0 <__divmodhi4+0xa>
 5cc:	00 94       	com	r0
 5ce:	06 d0       	rcall	.+12     	; 0x5dc <__divmodhi4_neg1>
 5d0:	77 fd       	sbrc	r23, 7
 5d2:	08 d0       	rcall	.+16     	; 0x5e4 <__divmodhi4_neg2>
 5d4:	1a d0       	rcall	.+52     	; 0x60a <__udivmodhi4>
 5d6:	07 fc       	sbrc	r0, 7
 5d8:	05 d0       	rcall	.+10     	; 0x5e4 <__divmodhi4_neg2>
 5da:	3e f4       	brtc	.+14     	; 0x5ea <__divmodhi4_exit>

000005dc <__divmodhi4_neg1>:
 5dc:	90 95       	com	r25
 5de:	81 95       	neg	r24
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__divmodhi4_neg2>:
 5e4:	70 95       	com	r23
 5e6:	61 95       	neg	r22
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ea <__divmodhi4_exit>:
 5ea:	08 95       	ret

000005ec <__umulhisi3>:
 5ec:	a2 9f       	mul	r26, r18
 5ee:	b0 01       	movw	r22, r0
 5f0:	b3 9f       	mul	r27, r19
 5f2:	c0 01       	movw	r24, r0
 5f4:	a3 9f       	mul	r26, r19
 5f6:	70 0d       	add	r23, r0
 5f8:	81 1d       	adc	r24, r1
 5fa:	11 24       	eor	r1, r1
 5fc:	91 1d       	adc	r25, r1
 5fe:	b2 9f       	mul	r27, r18
 600:	70 0d       	add	r23, r0
 602:	81 1d       	adc	r24, r1
 604:	11 24       	eor	r1, r1
 606:	91 1d       	adc	r25, r1
 608:	08 95       	ret

0000060a <__udivmodhi4>:
 60a:	aa 1b       	sub	r26, r26
 60c:	bb 1b       	sub	r27, r27
 60e:	51 e1       	ldi	r21, 0x11	; 17
 610:	07 c0       	rjmp	.+14     	; 0x620 <__udivmodhi4_ep>

00000612 <__udivmodhi4_loop>:
 612:	aa 1f       	adc	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	a6 17       	cp	r26, r22
 618:	b7 07       	cpc	r27, r23
 61a:	10 f0       	brcs	.+4      	; 0x620 <__udivmodhi4_ep>
 61c:	a6 1b       	sub	r26, r22
 61e:	b7 0b       	sbc	r27, r23

00000620 <__udivmodhi4_ep>:
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	5a 95       	dec	r21
 626:	a9 f7       	brne	.-22     	; 0x612 <__udivmodhi4_loop>
 628:	80 95       	com	r24
 62a:	90 95       	com	r25
 62c:	bc 01       	movw	r22, r24
 62e:	cd 01       	movw	r24, r26
 630:	08 95       	ret

00000632 <sprintf>:
 632:	ae e0       	ldi	r26, 0x0E	; 14
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	ee e1       	ldi	r30, 0x1E	; 30
 638:	f3 e0       	ldi	r31, 0x03	; 3
 63a:	aa c2       	rjmp	.+1364   	; 0xb90 <__prologue_saves__+0x1c>
 63c:	0d 89       	ldd	r16, Y+21	; 0x15
 63e:	1e 89       	ldd	r17, Y+22	; 0x16
 640:	86 e0       	ldi	r24, 0x06	; 6
 642:	8c 83       	std	Y+4, r24	; 0x04
 644:	1a 83       	std	Y+2, r17	; 0x02
 646:	09 83       	std	Y+1, r16	; 0x01
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	9f e7       	ldi	r25, 0x7F	; 127
 64c:	9e 83       	std	Y+6, r25	; 0x06
 64e:	8d 83       	std	Y+5, r24	; 0x05
 650:	ae 01       	movw	r20, r28
 652:	47 5e       	subi	r20, 0xE7	; 231
 654:	5f 4f       	sbci	r21, 0xFF	; 255
 656:	6f 89       	ldd	r22, Y+23	; 0x17
 658:	78 8d       	ldd	r23, Y+24	; 0x18
 65a:	ce 01       	movw	r24, r28
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	08 d0       	rcall	.+16     	; 0x670 <vfprintf>
 660:	ef 81       	ldd	r30, Y+7	; 0x07
 662:	f8 85       	ldd	r31, Y+8	; 0x08
 664:	e0 0f       	add	r30, r16
 666:	f1 1f       	adc	r31, r17
 668:	10 82       	st	Z, r1
 66a:	2e 96       	adiw	r28, 0x0e	; 14
 66c:	e4 e0       	ldi	r30, 0x04	; 4
 66e:	ac c2       	rjmp	.+1368   	; 0xbc8 <__epilogue_restores__+0x1c>

00000670 <vfprintf>:
 670:	ab e0       	ldi	r26, 0x0B	; 11
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	ed e3       	ldi	r30, 0x3D	; 61
 676:	f3 e0       	ldi	r31, 0x03	; 3
 678:	7d c2       	rjmp	.+1274   	; 0xb74 <__prologue_saves__>
 67a:	6c 01       	movw	r12, r24
 67c:	7b 01       	movw	r14, r22
 67e:	8a 01       	movw	r16, r20
 680:	fc 01       	movw	r30, r24
 682:	17 82       	std	Z+7, r1	; 0x07
 684:	16 82       	std	Z+6, r1	; 0x06
 686:	83 81       	ldd	r24, Z+3	; 0x03
 688:	81 ff       	sbrs	r24, 1
 68a:	bf c1       	rjmp	.+894    	; 0xa0a <__stack+0x10b>
 68c:	ce 01       	movw	r24, r28
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	3c 01       	movw	r6, r24
 692:	f6 01       	movw	r30, r12
 694:	93 81       	ldd	r25, Z+3	; 0x03
 696:	f7 01       	movw	r30, r14
 698:	93 fd       	sbrc	r25, 3
 69a:	85 91       	lpm	r24, Z+
 69c:	93 ff       	sbrs	r25, 3
 69e:	81 91       	ld	r24, Z+
 6a0:	7f 01       	movw	r14, r30
 6a2:	88 23       	and	r24, r24
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <vfprintf+0x38>
 6a6:	ad c1       	rjmp	.+858    	; 0xa02 <__stack+0x103>
 6a8:	85 32       	cpi	r24, 0x25	; 37
 6aa:	39 f4       	brne	.+14     	; 0x6ba <vfprintf+0x4a>
 6ac:	93 fd       	sbrc	r25, 3
 6ae:	85 91       	lpm	r24, Z+
 6b0:	93 ff       	sbrs	r25, 3
 6b2:	81 91       	ld	r24, Z+
 6b4:	7f 01       	movw	r14, r30
 6b6:	85 32       	cpi	r24, 0x25	; 37
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <vfprintf+0x52>
 6ba:	b6 01       	movw	r22, r12
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	c0 d1       	rcall	.+896    	; 0xa40 <fputc>
 6c0:	e8 cf       	rjmp	.-48     	; 0x692 <vfprintf+0x22>
 6c2:	91 2c       	mov	r9, r1
 6c4:	21 2c       	mov	r2, r1
 6c6:	31 2c       	mov	r3, r1
 6c8:	ff e1       	ldi	r31, 0x1F	; 31
 6ca:	f3 15       	cp	r31, r3
 6cc:	d8 f0       	brcs	.+54     	; 0x704 <vfprintf+0x94>
 6ce:	8b 32       	cpi	r24, 0x2B	; 43
 6d0:	79 f0       	breq	.+30     	; 0x6f0 <vfprintf+0x80>
 6d2:	38 f4       	brcc	.+14     	; 0x6e2 <vfprintf+0x72>
 6d4:	80 32       	cpi	r24, 0x20	; 32
 6d6:	79 f0       	breq	.+30     	; 0x6f6 <vfprintf+0x86>
 6d8:	83 32       	cpi	r24, 0x23	; 35
 6da:	a1 f4       	brne	.+40     	; 0x704 <vfprintf+0x94>
 6dc:	23 2d       	mov	r18, r3
 6de:	20 61       	ori	r18, 0x10	; 16
 6e0:	1d c0       	rjmp	.+58     	; 0x71c <vfprintf+0xac>
 6e2:	8d 32       	cpi	r24, 0x2D	; 45
 6e4:	61 f0       	breq	.+24     	; 0x6fe <vfprintf+0x8e>
 6e6:	80 33       	cpi	r24, 0x30	; 48
 6e8:	69 f4       	brne	.+26     	; 0x704 <vfprintf+0x94>
 6ea:	23 2d       	mov	r18, r3
 6ec:	21 60       	ori	r18, 0x01	; 1
 6ee:	16 c0       	rjmp	.+44     	; 0x71c <vfprintf+0xac>
 6f0:	83 2d       	mov	r24, r3
 6f2:	82 60       	ori	r24, 0x02	; 2
 6f4:	38 2e       	mov	r3, r24
 6f6:	e3 2d       	mov	r30, r3
 6f8:	e4 60       	ori	r30, 0x04	; 4
 6fa:	3e 2e       	mov	r3, r30
 6fc:	2a c0       	rjmp	.+84     	; 0x752 <vfprintf+0xe2>
 6fe:	f3 2d       	mov	r31, r3
 700:	f8 60       	ori	r31, 0x08	; 8
 702:	1d c0       	rjmp	.+58     	; 0x73e <vfprintf+0xce>
 704:	37 fc       	sbrc	r3, 7
 706:	2d c0       	rjmp	.+90     	; 0x762 <vfprintf+0xf2>
 708:	20 ed       	ldi	r18, 0xD0	; 208
 70a:	28 0f       	add	r18, r24
 70c:	2a 30       	cpi	r18, 0x0A	; 10
 70e:	40 f0       	brcs	.+16     	; 0x720 <vfprintf+0xb0>
 710:	8e 32       	cpi	r24, 0x2E	; 46
 712:	b9 f4       	brne	.+46     	; 0x742 <vfprintf+0xd2>
 714:	36 fc       	sbrc	r3, 6
 716:	75 c1       	rjmp	.+746    	; 0xa02 <__stack+0x103>
 718:	23 2d       	mov	r18, r3
 71a:	20 64       	ori	r18, 0x40	; 64
 71c:	32 2e       	mov	r3, r18
 71e:	19 c0       	rjmp	.+50     	; 0x752 <vfprintf+0xe2>
 720:	36 fe       	sbrs	r3, 6
 722:	06 c0       	rjmp	.+12     	; 0x730 <vfprintf+0xc0>
 724:	8a e0       	ldi	r24, 0x0A	; 10
 726:	98 9e       	mul	r9, r24
 728:	20 0d       	add	r18, r0
 72a:	11 24       	eor	r1, r1
 72c:	92 2e       	mov	r9, r18
 72e:	11 c0       	rjmp	.+34     	; 0x752 <vfprintf+0xe2>
 730:	ea e0       	ldi	r30, 0x0A	; 10
 732:	2e 9e       	mul	r2, r30
 734:	20 0d       	add	r18, r0
 736:	11 24       	eor	r1, r1
 738:	22 2e       	mov	r2, r18
 73a:	f3 2d       	mov	r31, r3
 73c:	f0 62       	ori	r31, 0x20	; 32
 73e:	3f 2e       	mov	r3, r31
 740:	08 c0       	rjmp	.+16     	; 0x752 <vfprintf+0xe2>
 742:	8c 36       	cpi	r24, 0x6C	; 108
 744:	21 f4       	brne	.+8      	; 0x74e <vfprintf+0xde>
 746:	83 2d       	mov	r24, r3
 748:	80 68       	ori	r24, 0x80	; 128
 74a:	38 2e       	mov	r3, r24
 74c:	02 c0       	rjmp	.+4      	; 0x752 <vfprintf+0xe2>
 74e:	88 36       	cpi	r24, 0x68	; 104
 750:	41 f4       	brne	.+16     	; 0x762 <vfprintf+0xf2>
 752:	f7 01       	movw	r30, r14
 754:	93 fd       	sbrc	r25, 3
 756:	85 91       	lpm	r24, Z+
 758:	93 ff       	sbrs	r25, 3
 75a:	81 91       	ld	r24, Z+
 75c:	7f 01       	movw	r14, r30
 75e:	81 11       	cpse	r24, r1
 760:	b3 cf       	rjmp	.-154    	; 0x6c8 <vfprintf+0x58>
 762:	98 2f       	mov	r25, r24
 764:	9f 7d       	andi	r25, 0xDF	; 223
 766:	95 54       	subi	r25, 0x45	; 69
 768:	93 30       	cpi	r25, 0x03	; 3
 76a:	28 f4       	brcc	.+10     	; 0x776 <vfprintf+0x106>
 76c:	0c 5f       	subi	r16, 0xFC	; 252
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	9f e3       	ldi	r25, 0x3F	; 63
 772:	99 83       	std	Y+1, r25	; 0x01
 774:	0d c0       	rjmp	.+26     	; 0x790 <vfprintf+0x120>
 776:	83 36       	cpi	r24, 0x63	; 99
 778:	31 f0       	breq	.+12     	; 0x786 <vfprintf+0x116>
 77a:	83 37       	cpi	r24, 0x73	; 115
 77c:	71 f0       	breq	.+28     	; 0x79a <vfprintf+0x12a>
 77e:	83 35       	cpi	r24, 0x53	; 83
 780:	09 f0       	breq	.+2      	; 0x784 <vfprintf+0x114>
 782:	55 c0       	rjmp	.+170    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 784:	20 c0       	rjmp	.+64     	; 0x7c6 <vfprintf+0x156>
 786:	f8 01       	movw	r30, r16
 788:	80 81       	ld	r24, Z
 78a:	89 83       	std	Y+1, r24	; 0x01
 78c:	0e 5f       	subi	r16, 0xFE	; 254
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	88 24       	eor	r8, r8
 792:	83 94       	inc	r8
 794:	91 2c       	mov	r9, r1
 796:	53 01       	movw	r10, r6
 798:	12 c0       	rjmp	.+36     	; 0x7be <vfprintf+0x14e>
 79a:	28 01       	movw	r4, r16
 79c:	f2 e0       	ldi	r31, 0x02	; 2
 79e:	4f 0e       	add	r4, r31
 7a0:	51 1c       	adc	r5, r1
 7a2:	f8 01       	movw	r30, r16
 7a4:	a0 80       	ld	r10, Z
 7a6:	b1 80       	ldd	r11, Z+1	; 0x01
 7a8:	36 fe       	sbrs	r3, 6
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <vfprintf+0x142>
 7ac:	69 2d       	mov	r22, r9
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x146>
 7b2:	6f ef       	ldi	r22, 0xFF	; 255
 7b4:	7f ef       	ldi	r23, 0xFF	; 255
 7b6:	c5 01       	movw	r24, r10
 7b8:	38 d1       	rcall	.+624    	; 0xa2a <strnlen>
 7ba:	4c 01       	movw	r8, r24
 7bc:	82 01       	movw	r16, r4
 7be:	f3 2d       	mov	r31, r3
 7c0:	ff 77       	andi	r31, 0x7F	; 127
 7c2:	3f 2e       	mov	r3, r31
 7c4:	15 c0       	rjmp	.+42     	; 0x7f0 <vfprintf+0x180>
 7c6:	28 01       	movw	r4, r16
 7c8:	22 e0       	ldi	r18, 0x02	; 2
 7ca:	42 0e       	add	r4, r18
 7cc:	51 1c       	adc	r5, r1
 7ce:	f8 01       	movw	r30, r16
 7d0:	a0 80       	ld	r10, Z
 7d2:	b1 80       	ldd	r11, Z+1	; 0x01
 7d4:	36 fe       	sbrs	r3, 6
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x16e>
 7d8:	69 2d       	mov	r22, r9
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x172>
 7de:	6f ef       	ldi	r22, 0xFF	; 255
 7e0:	7f ef       	ldi	r23, 0xFF	; 255
 7e2:	c5 01       	movw	r24, r10
 7e4:	17 d1       	rcall	.+558    	; 0xa14 <strnlen_P>
 7e6:	4c 01       	movw	r8, r24
 7e8:	f3 2d       	mov	r31, r3
 7ea:	f0 68       	ori	r31, 0x80	; 128
 7ec:	3f 2e       	mov	r3, r31
 7ee:	82 01       	movw	r16, r4
 7f0:	33 fc       	sbrc	r3, 3
 7f2:	19 c0       	rjmp	.+50     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7f4:	82 2d       	mov	r24, r2
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	88 16       	cp	r8, r24
 7fa:	99 06       	cpc	r9, r25
 7fc:	a0 f4       	brcc	.+40     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7fe:	b6 01       	movw	r22, r12
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	1d d1       	rcall	.+570    	; 0xa40 <fputc>
 806:	2a 94       	dec	r2
 808:	f5 cf       	rjmp	.-22     	; 0x7f4 <vfprintf+0x184>
 80a:	f5 01       	movw	r30, r10
 80c:	37 fc       	sbrc	r3, 7
 80e:	85 91       	lpm	r24, Z+
 810:	37 fe       	sbrs	r3, 7
 812:	81 91       	ld	r24, Z+
 814:	5f 01       	movw	r10, r30
 816:	b6 01       	movw	r22, r12
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	12 d1       	rcall	.+548    	; 0xa40 <fputc>
 81c:	21 10       	cpse	r2, r1
 81e:	2a 94       	dec	r2
 820:	21 e0       	ldi	r18, 0x01	; 1
 822:	82 1a       	sub	r8, r18
 824:	91 08       	sbc	r9, r1
 826:	81 14       	cp	r8, r1
 828:	91 04       	cpc	r9, r1
 82a:	79 f7       	brne	.-34     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 82c:	e1 c0       	rjmp	.+450    	; 0x9f0 <__stack+0xf1>
 82e:	84 36       	cpi	r24, 0x64	; 100
 830:	11 f0       	breq	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	89 36       	cpi	r24, 0x69	; 105
 834:	39 f5       	brne	.+78     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 836:	f8 01       	movw	r30, r16
 838:	37 fe       	sbrs	r3, 7
 83a:	07 c0       	rjmp	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	0c 5f       	subi	r16, 0xFC	; 252
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	08 c0       	rjmp	.+16     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	07 2e       	mov	r0, r23
 850:	00 0c       	add	r0, r0
 852:	88 0b       	sbc	r24, r24
 854:	99 0b       	sbc	r25, r25
 856:	0e 5f       	subi	r16, 0xFE	; 254
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	f3 2d       	mov	r31, r3
 85c:	ff 76       	andi	r31, 0x6F	; 111
 85e:	3f 2e       	mov	r3, r31
 860:	97 ff       	sbrs	r25, 7
 862:	09 c0       	rjmp	.+18     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	f0 68       	ori	r31, 0x80	; 128
 874:	3f 2e       	mov	r3, r31
 876:	2a e0       	ldi	r18, 0x0A	; 10
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	a3 01       	movw	r20, r6
 87c:	1d d1       	rcall	.+570    	; 0xab8 <__ultoa_invert>
 87e:	88 2e       	mov	r8, r24
 880:	86 18       	sub	r8, r6
 882:	44 c0       	rjmp	.+136    	; 0x90c <__stack+0xd>
 884:	85 37       	cpi	r24, 0x75	; 117
 886:	31 f4       	brne	.+12     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 888:	23 2d       	mov	r18, r3
 88a:	2f 7e       	andi	r18, 0xEF	; 239
 88c:	b2 2e       	mov	r11, r18
 88e:	2a e0       	ldi	r18, 0x0A	; 10
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	25 c0       	rjmp	.+74     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 894:	93 2d       	mov	r25, r3
 896:	99 7f       	andi	r25, 0xF9	; 249
 898:	b9 2e       	mov	r11, r25
 89a:	8f 36       	cpi	r24, 0x6F	; 111
 89c:	c1 f0       	breq	.+48     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 89e:	18 f4       	brcc	.+6      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 8a0:	88 35       	cpi	r24, 0x58	; 88
 8a2:	79 f0       	breq	.+30     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8a4:	ae c0       	rjmp	.+348    	; 0xa02 <__stack+0x103>
 8a6:	80 37       	cpi	r24, 0x70	; 112
 8a8:	19 f0       	breq	.+6      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8aa:	88 37       	cpi	r24, 0x78	; 120
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8ae:	a9 c0       	rjmp	.+338    	; 0xa02 <__stack+0x103>
 8b0:	e9 2f       	mov	r30, r25
 8b2:	e0 61       	ori	r30, 0x10	; 16
 8b4:	be 2e       	mov	r11, r30
 8b6:	b4 fe       	sbrs	r11, 4
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8ba:	fb 2d       	mov	r31, r11
 8bc:	f4 60       	ori	r31, 0x04	; 4
 8be:	bf 2e       	mov	r11, r31
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8c2:	34 fe       	sbrs	r3, 4
 8c4:	0a c0       	rjmp	.+20     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8c6:	29 2f       	mov	r18, r25
 8c8:	26 60       	ori	r18, 0x06	; 6
 8ca:	b2 2e       	mov	r11, r18
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8ce:	28 e0       	ldi	r18, 0x08	; 8
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8d4:	20 e1       	ldi	r18, 0x10	; 16
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8da:	20 e1       	ldi	r18, 0x10	; 16
 8dc:	32 e0       	ldi	r19, 0x02	; 2
 8de:	f8 01       	movw	r30, r16
 8e0:	b7 fe       	sbrs	r11, 7
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8e4:	60 81       	ld	r22, Z
 8e6:	71 81       	ldd	r23, Z+1	; 0x01
 8e8:	82 81       	ldd	r24, Z+2	; 0x02
 8ea:	93 81       	ldd	r25, Z+3	; 0x03
 8ec:	0c 5f       	subi	r16, 0xFC	; 252
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8f2:	60 81       	ld	r22, Z
 8f4:	71 81       	ldd	r23, Z+1	; 0x01
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 5f       	subi	r16, 0xFE	; 254
 8fc:	1f 4f       	sbci	r17, 0xFF	; 255
 8fe:	a3 01       	movw	r20, r6
 900:	db d0       	rcall	.+438    	; 0xab8 <__ultoa_invert>
 902:	88 2e       	mov	r8, r24
 904:	86 18       	sub	r8, r6
 906:	fb 2d       	mov	r31, r11
 908:	ff 77       	andi	r31, 0x7F	; 127
 90a:	3f 2e       	mov	r3, r31
 90c:	36 fe       	sbrs	r3, 6
 90e:	0d c0       	rjmp	.+26     	; 0x92a <__stack+0x2b>
 910:	23 2d       	mov	r18, r3
 912:	2e 7f       	andi	r18, 0xFE	; 254
 914:	a2 2e       	mov	r10, r18
 916:	89 14       	cp	r8, r9
 918:	58 f4       	brcc	.+22     	; 0x930 <__stack+0x31>
 91a:	34 fe       	sbrs	r3, 4
 91c:	0b c0       	rjmp	.+22     	; 0x934 <__stack+0x35>
 91e:	32 fc       	sbrc	r3, 2
 920:	09 c0       	rjmp	.+18     	; 0x934 <__stack+0x35>
 922:	83 2d       	mov	r24, r3
 924:	8e 7e       	andi	r24, 0xEE	; 238
 926:	a8 2e       	mov	r10, r24
 928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
 92a:	b8 2c       	mov	r11, r8
 92c:	a3 2c       	mov	r10, r3
 92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
 930:	b8 2c       	mov	r11, r8
 932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
 934:	b9 2c       	mov	r11, r9
 936:	a4 fe       	sbrs	r10, 4
 938:	0f c0       	rjmp	.+30     	; 0x958 <__stack+0x59>
 93a:	fe 01       	movw	r30, r28
 93c:	e8 0d       	add	r30, r8
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	80 33       	cpi	r24, 0x30	; 48
 944:	21 f4       	brne	.+8      	; 0x94e <__stack+0x4f>
 946:	9a 2d       	mov	r25, r10
 948:	99 7e       	andi	r25, 0xE9	; 233
 94a:	a9 2e       	mov	r10, r25
 94c:	09 c0       	rjmp	.+18     	; 0x960 <__stack+0x61>
 94e:	a2 fe       	sbrs	r10, 2
 950:	06 c0       	rjmp	.+12     	; 0x95e <__stack+0x5f>
 952:	b3 94       	inc	r11
 954:	b3 94       	inc	r11
 956:	04 c0       	rjmp	.+8      	; 0x960 <__stack+0x61>
 958:	8a 2d       	mov	r24, r10
 95a:	86 78       	andi	r24, 0x86	; 134
 95c:	09 f0       	breq	.+2      	; 0x960 <__stack+0x61>
 95e:	b3 94       	inc	r11
 960:	a3 fc       	sbrc	r10, 3
 962:	10 c0       	rjmp	.+32     	; 0x984 <__stack+0x85>
 964:	a0 fe       	sbrs	r10, 0
 966:	06 c0       	rjmp	.+12     	; 0x974 <__stack+0x75>
 968:	b2 14       	cp	r11, r2
 96a:	80 f4       	brcc	.+32     	; 0x98c <__stack+0x8d>
 96c:	28 0c       	add	r2, r8
 96e:	92 2c       	mov	r9, r2
 970:	9b 18       	sub	r9, r11
 972:	0d c0       	rjmp	.+26     	; 0x98e <__stack+0x8f>
 974:	b2 14       	cp	r11, r2
 976:	58 f4       	brcc	.+22     	; 0x98e <__stack+0x8f>
 978:	b6 01       	movw	r22, r12
 97a:	80 e2       	ldi	r24, 0x20	; 32
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	60 d0       	rcall	.+192    	; 0xa40 <fputc>
 980:	b3 94       	inc	r11
 982:	f8 cf       	rjmp	.-16     	; 0x974 <__stack+0x75>
 984:	b2 14       	cp	r11, r2
 986:	18 f4       	brcc	.+6      	; 0x98e <__stack+0x8f>
 988:	2b 18       	sub	r2, r11
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
 98c:	98 2c       	mov	r9, r8
 98e:	21 2c       	mov	r2, r1
 990:	a4 fe       	sbrs	r10, 4
 992:	0f c0       	rjmp	.+30     	; 0x9b2 <__stack+0xb3>
 994:	b6 01       	movw	r22, r12
 996:	80 e3       	ldi	r24, 0x30	; 48
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	52 d0       	rcall	.+164    	; 0xa40 <fputc>
 99c:	a2 fe       	sbrs	r10, 2
 99e:	16 c0       	rjmp	.+44     	; 0x9cc <__stack+0xcd>
 9a0:	a1 fc       	sbrc	r10, 1
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0xab>
 9a4:	88 e7       	ldi	r24, 0x78	; 120
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	88 e5       	ldi	r24, 0x58	; 88
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	b6 01       	movw	r22, r12
 9b0:	0c c0       	rjmp	.+24     	; 0x9ca <__stack+0xcb>
 9b2:	8a 2d       	mov	r24, r10
 9b4:	86 78       	andi	r24, 0x86	; 134
 9b6:	51 f0       	breq	.+20     	; 0x9cc <__stack+0xcd>
 9b8:	a1 fe       	sbrs	r10, 1
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	8b e2       	ldi	r24, 0x2B	; 43
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__stack+0xc3>
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	a7 fc       	sbrc	r10, 7
 9c4:	8d e2       	ldi	r24, 0x2D	; 45
 9c6:	b6 01       	movw	r22, r12
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	3a d0       	rcall	.+116    	; 0xa40 <fputc>
 9cc:	89 14       	cp	r8, r9
 9ce:	30 f4       	brcc	.+12     	; 0x9dc <__stack+0xdd>
 9d0:	b6 01       	movw	r22, r12
 9d2:	80 e3       	ldi	r24, 0x30	; 48
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	34 d0       	rcall	.+104    	; 0xa40 <fputc>
 9d8:	9a 94       	dec	r9
 9da:	f8 cf       	rjmp	.-16     	; 0x9cc <__stack+0xcd>
 9dc:	8a 94       	dec	r8
 9de:	f3 01       	movw	r30, r6
 9e0:	e8 0d       	add	r30, r8
 9e2:	f1 1d       	adc	r31, r1
 9e4:	80 81       	ld	r24, Z
 9e6:	b6 01       	movw	r22, r12
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	2a d0       	rcall	.+84     	; 0xa40 <fputc>
 9ec:	81 10       	cpse	r8, r1
 9ee:	f6 cf       	rjmp	.-20     	; 0x9dc <__stack+0xdd>
 9f0:	22 20       	and	r2, r2
 9f2:	09 f4       	brne	.+2      	; 0x9f6 <__stack+0xf7>
 9f4:	4e ce       	rjmp	.-868    	; 0x692 <vfprintf+0x22>
 9f6:	b6 01       	movw	r22, r12
 9f8:	80 e2       	ldi	r24, 0x20	; 32
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	21 d0       	rcall	.+66     	; 0xa40 <fputc>
 9fe:	2a 94       	dec	r2
 a00:	f7 cf       	rjmp	.-18     	; 0x9f0 <__stack+0xf1>
 a02:	f6 01       	movw	r30, r12
 a04:	86 81       	ldd	r24, Z+6	; 0x06
 a06:	97 81       	ldd	r25, Z+7	; 0x07
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__stack+0x10f>
 a0a:	8f ef       	ldi	r24, 0xFF	; 255
 a0c:	9f ef       	ldi	r25, 0xFF	; 255
 a0e:	2b 96       	adiw	r28, 0x0b	; 11
 a10:	e2 e1       	ldi	r30, 0x12	; 18
 a12:	cc c0       	rjmp	.+408    	; 0xbac <__epilogue_restores__>

00000a14 <strnlen_P>:
 a14:	fc 01       	movw	r30, r24
 a16:	05 90       	lpm	r0, Z+
 a18:	61 50       	subi	r22, 0x01	; 1
 a1a:	70 40       	sbci	r23, 0x00	; 0
 a1c:	01 10       	cpse	r0, r1
 a1e:	d8 f7       	brcc	.-10     	; 0xa16 <strnlen_P+0x2>
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	8e 0f       	add	r24, r30
 a26:	9f 1f       	adc	r25, r31
 a28:	08 95       	ret

00000a2a <strnlen>:
 a2a:	fc 01       	movw	r30, r24
 a2c:	61 50       	subi	r22, 0x01	; 1
 a2e:	70 40       	sbci	r23, 0x00	; 0
 a30:	01 90       	ld	r0, Z+
 a32:	01 10       	cpse	r0, r1
 a34:	d8 f7       	brcc	.-10     	; 0xa2c <strnlen+0x2>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	8e 0f       	add	r24, r30
 a3c:	9f 1f       	adc	r25, r31
 a3e:	08 95       	ret

00000a40 <fputc>:
 a40:	0f 93       	push	r16
 a42:	1f 93       	push	r17
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	fb 01       	movw	r30, r22
 a4a:	23 81       	ldd	r18, Z+3	; 0x03
 a4c:	21 fd       	sbrc	r18, 1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <fputc+0x16>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	2c c0       	rjmp	.+88     	; 0xaae <fputc+0x6e>
 a56:	22 ff       	sbrs	r18, 2
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <fputc+0x46>
 a5a:	46 81       	ldd	r20, Z+6	; 0x06
 a5c:	57 81       	ldd	r21, Z+7	; 0x07
 a5e:	24 81       	ldd	r18, Z+4	; 0x04
 a60:	35 81       	ldd	r19, Z+5	; 0x05
 a62:	42 17       	cp	r20, r18
 a64:	53 07       	cpc	r21, r19
 a66:	44 f4       	brge	.+16     	; 0xa78 <fputc+0x38>
 a68:	a0 81       	ld	r26, Z
 a6a:	b1 81       	ldd	r27, Z+1	; 0x01
 a6c:	9d 01       	movw	r18, r26
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	31 83       	std	Z+1, r19	; 0x01
 a74:	20 83       	st	Z, r18
 a76:	8c 93       	st	X, r24
 a78:	26 81       	ldd	r18, Z+6	; 0x06
 a7a:	37 81       	ldd	r19, Z+7	; 0x07
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	37 83       	std	Z+7, r19	; 0x07
 a82:	26 83       	std	Z+6, r18	; 0x06
 a84:	14 c0       	rjmp	.+40     	; 0xaae <fputc+0x6e>
 a86:	8b 01       	movw	r16, r22
 a88:	ec 01       	movw	r28, r24
 a8a:	fb 01       	movw	r30, r22
 a8c:	00 84       	ldd	r0, Z+8	; 0x08
 a8e:	f1 85       	ldd	r31, Z+9	; 0x09
 a90:	e0 2d       	mov	r30, r0
 a92:	09 95       	icall
 a94:	89 2b       	or	r24, r25
 a96:	e1 f6       	brne	.-72     	; 0xa50 <fputc+0x10>
 a98:	d8 01       	movw	r26, r16
 a9a:	16 96       	adiw	r26, 0x06	; 6
 a9c:	8d 91       	ld	r24, X+
 a9e:	9c 91       	ld	r25, X
 aa0:	17 97       	sbiw	r26, 0x07	; 7
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	17 96       	adiw	r26, 0x07	; 7
 aa6:	9c 93       	st	X, r25
 aa8:	8e 93       	st	-X, r24
 aaa:	16 97       	sbiw	r26, 0x06	; 6
 aac:	ce 01       	movw	r24, r28
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	08 95       	ret

00000ab8 <__ultoa_invert>:
 ab8:	fa 01       	movw	r30, r20
 aba:	aa 27       	eor	r26, r26
 abc:	28 30       	cpi	r18, 0x08	; 8
 abe:	51 f1       	breq	.+84     	; 0xb14 <__ultoa_invert+0x5c>
 ac0:	20 31       	cpi	r18, 0x10	; 16
 ac2:	81 f1       	breq	.+96     	; 0xb24 <__ultoa_invert+0x6c>
 ac4:	e8 94       	clt
 ac6:	6f 93       	push	r22
 ac8:	6e 7f       	andi	r22, 0xFE	; 254
 aca:	6e 5f       	subi	r22, 0xFE	; 254
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	af 4f       	sbci	r26, 0xFF	; 255
 ad4:	b1 e0       	ldi	r27, 0x01	; 1
 ad6:	3e d0       	rcall	.+124    	; 0xb54 <__ultoa_invert+0x9c>
 ad8:	b4 e0       	ldi	r27, 0x04	; 4
 ada:	3c d0       	rcall	.+120    	; 0xb54 <__ultoa_invert+0x9c>
 adc:	67 0f       	add	r22, r23
 ade:	78 1f       	adc	r23, r24
 ae0:	89 1f       	adc	r24, r25
 ae2:	9a 1f       	adc	r25, r26
 ae4:	a1 1d       	adc	r26, r1
 ae6:	68 0f       	add	r22, r24
 ae8:	79 1f       	adc	r23, r25
 aea:	8a 1f       	adc	r24, r26
 aec:	91 1d       	adc	r25, r1
 aee:	a1 1d       	adc	r26, r1
 af0:	6a 0f       	add	r22, r26
 af2:	71 1d       	adc	r23, r1
 af4:	81 1d       	adc	r24, r1
 af6:	91 1d       	adc	r25, r1
 af8:	a1 1d       	adc	r26, r1
 afa:	20 d0       	rcall	.+64     	; 0xb3c <__ultoa_invert+0x84>
 afc:	09 f4       	brne	.+2      	; 0xb00 <__ultoa_invert+0x48>
 afe:	68 94       	set
 b00:	3f 91       	pop	r19
 b02:	2a e0       	ldi	r18, 0x0A	; 10
 b04:	26 9f       	mul	r18, r22
 b06:	11 24       	eor	r1, r1
 b08:	30 19       	sub	r19, r0
 b0a:	30 5d       	subi	r19, 0xD0	; 208
 b0c:	31 93       	st	Z+, r19
 b0e:	de f6       	brtc	.-74     	; 0xac6 <__ultoa_invert+0xe>
 b10:	cf 01       	movw	r24, r30
 b12:	08 95       	ret
 b14:	46 2f       	mov	r20, r22
 b16:	47 70       	andi	r20, 0x07	; 7
 b18:	40 5d       	subi	r20, 0xD0	; 208
 b1a:	41 93       	st	Z+, r20
 b1c:	b3 e0       	ldi	r27, 0x03	; 3
 b1e:	0f d0       	rcall	.+30     	; 0xb3e <__ultoa_invert+0x86>
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0x5c>
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <__ultoa_invert+0x58>
 b24:	46 2f       	mov	r20, r22
 b26:	4f 70       	andi	r20, 0x0F	; 15
 b28:	40 5d       	subi	r20, 0xD0	; 208
 b2a:	4a 33       	cpi	r20, 0x3A	; 58
 b2c:	18 f0       	brcs	.+6      	; 0xb34 <__ultoa_invert+0x7c>
 b2e:	49 5d       	subi	r20, 0xD9	; 217
 b30:	31 fd       	sbrc	r19, 1
 b32:	40 52       	subi	r20, 0x20	; 32
 b34:	41 93       	st	Z+, r20
 b36:	02 d0       	rcall	.+4      	; 0xb3c <__ultoa_invert+0x84>
 b38:	a9 f7       	brne	.-22     	; 0xb24 <__ultoa_invert+0x6c>
 b3a:	ea cf       	rjmp	.-44     	; 0xb10 <__ultoa_invert+0x58>
 b3c:	b4 e0       	ldi	r27, 0x04	; 4
 b3e:	a6 95       	lsr	r26
 b40:	97 95       	ror	r25
 b42:	87 95       	ror	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	ba 95       	dec	r27
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0x86>
 b4c:	00 97       	sbiw	r24, 0x00	; 0
 b4e:	61 05       	cpc	r22, r1
 b50:	71 05       	cpc	r23, r1
 b52:	08 95       	ret
 b54:	9b 01       	movw	r18, r22
 b56:	ac 01       	movw	r20, r24
 b58:	0a 2e       	mov	r0, r26
 b5a:	06 94       	lsr	r0
 b5c:	57 95       	ror	r21
 b5e:	47 95       	ror	r20
 b60:	37 95       	ror	r19
 b62:	27 95       	ror	r18
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0xa2>
 b68:	62 0f       	add	r22, r18
 b6a:	73 1f       	adc	r23, r19
 b6c:	84 1f       	adc	r24, r20
 b6e:	95 1f       	adc	r25, r21
 b70:	a0 1d       	adc	r26, r0
 b72:	08 95       	ret

00000b74 <__prologue_saves__>:
 b74:	2f 92       	push	r2
 b76:	3f 92       	push	r3
 b78:	4f 92       	push	r4
 b7a:	5f 92       	push	r5
 b7c:	6f 92       	push	r6
 b7e:	7f 92       	push	r7
 b80:	8f 92       	push	r8
 b82:	9f 92       	push	r9
 b84:	af 92       	push	r10
 b86:	bf 92       	push	r11
 b88:	cf 92       	push	r12
 b8a:	df 92       	push	r13
 b8c:	ef 92       	push	r14
 b8e:	ff 92       	push	r15
 b90:	0f 93       	push	r16
 b92:	1f 93       	push	r17
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	cd b7       	in	r28, 0x3d	; 61
 b9a:	de b7       	in	r29, 0x3e	; 62
 b9c:	ca 1b       	sub	r28, r26
 b9e:	db 0b       	sbc	r29, r27
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	09 94       	ijmp

00000bac <__epilogue_restores__>:
 bac:	2a 88       	ldd	r2, Y+18	; 0x12
 bae:	39 88       	ldd	r3, Y+17	; 0x11
 bb0:	48 88       	ldd	r4, Y+16	; 0x10
 bb2:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb4:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb6:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb8:	8c 84       	ldd	r8, Y+12	; 0x0c
 bba:	9b 84       	ldd	r9, Y+11	; 0x0b
 bbc:	aa 84       	ldd	r10, Y+10	; 0x0a
 bbe:	b9 84       	ldd	r11, Y+9	; 0x09
 bc0:	c8 84       	ldd	r12, Y+8	; 0x08
 bc2:	df 80       	ldd	r13, Y+7	; 0x07
 bc4:	ee 80       	ldd	r14, Y+6	; 0x06
 bc6:	fd 80       	ldd	r15, Y+5	; 0x05
 bc8:	0c 81       	ldd	r16, Y+4	; 0x04
 bca:	1b 81       	ldd	r17, Y+3	; 0x03
 bcc:	aa 81       	ldd	r26, Y+2	; 0x02
 bce:	b9 81       	ldd	r27, Y+1	; 0x01
 bd0:	ce 0f       	add	r28, r30
 bd2:	d1 1d       	adc	r29, r1
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	ed 01       	movw	r28, r26
 be0:	08 95       	ret

00000be2 <_exit>:
 be2:	f8 94       	cli

00000be4 <__stop_program>:
 be4:	ff cf       	rjmp	.-2      	; 0xbe4 <__stop_program>
